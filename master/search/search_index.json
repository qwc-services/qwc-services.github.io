{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QWC / QWC Services \u00b6 QGIS Web Client (QWC) is a modular next generation responsive web client for QGIS Server, built with ReactJS and OpenLayers. The core concept of QWC is to display QGIS Projects which are published by QGIS Server via WMS. There are two ways to run QWC: As part of the qwc-services ecosystem, includes additional services to which includes additional services to extend the viewer functionality (such as user administration, editing, etc.). This is the recommended approach. As a standalone viewer (static JS/HTML/CSS web application) on top of QGIS Server. QWC with qwc-services on the backend provide a complete Web GIS infrastructure. Overview of functionalities \u00b6 Without any additional services, the stock QWC offers the following main functionalities: Theme switcher (a theme is a published QGIS project) Switchable background layers Layer tree Object information (feature info) Search with configurable providers Measurement tools Redlining (sketching) URL sharing Geolocation PDF printing Raster and DXF export Compare layers Import external layers (WMS, WFS, WMTS, KML, GeoJSON) When run as part of the qwc-services ecosystem, the following additional viewer functionalities are available: User administration Editing Fulltext search Compact permalinks Height profile Custom feature info templates Mapinfo popup Reports (via Jasper) qwc-services also provides the following enterprise relevant functionalities: Docker/Kubernetes or WSGI deployments Multi-tenant setup Custom service integration Multiple authentication backends Explore \u00b6 Developer Quickstart User guide Some public viewers: QWC demo instance | Glarus | Solothurn | Oslandia | Erft Verband Support \u00b6 Community support: Github Commercial Support: Sourcepole , Oslandia and other companies. Improve this web site","title":"Home"},{"location":"#qwc-qwc-services","text":"QGIS Web Client (QWC) is a modular next generation responsive web client for QGIS Server, built with ReactJS and OpenLayers. The core concept of QWC is to display QGIS Projects which are published by QGIS Server via WMS. There are two ways to run QWC: As part of the qwc-services ecosystem, includes additional services to which includes additional services to extend the viewer functionality (such as user administration, editing, etc.). This is the recommended approach. As a standalone viewer (static JS/HTML/CSS web application) on top of QGIS Server. QWC with qwc-services on the backend provide a complete Web GIS infrastructure.","title":"QWC / QWC Services"},{"location":"#overview-of-functionalities","text":"Without any additional services, the stock QWC offers the following main functionalities: Theme switcher (a theme is a published QGIS project) Switchable background layers Layer tree Object information (feature info) Search with configurable providers Measurement tools Redlining (sketching) URL sharing Geolocation PDF printing Raster and DXF export Compare layers Import external layers (WMS, WFS, WMTS, KML, GeoJSON) When run as part of the qwc-services ecosystem, the following additional viewer functionalities are available: User administration Editing Fulltext search Compact permalinks Height profile Custom feature info templates Mapinfo popup Reports (via Jasper) qwc-services also provides the following enterprise relevant functionalities: Docker/Kubernetes or WSGI deployments Multi-tenant setup Custom service integration Multiple authentication backends","title":"Overview of functionalities"},{"location":"#explore","text":"Developer Quickstart User guide Some public viewers: QWC demo instance | Glarus | Solothurn | Oslandia | Erft Verband","title":"Explore"},{"location":"#support","text":"Community support: Github Commercial Support: Sourcepole , Oslandia and other companies. Improve this web site","title":"Support"},{"location":"FAQ/","text":"FAQ \u00b6 Changing the qwc-docker port \u00b6 In the default setup, qwc-docker will run on port 8088 . To change this, you can modify the api-gateway port mapping in docker-compose.yml , i.e. to run on port 1234 : qwc-api-gateway: image: nginx:1.19 ports: - \"1234:80\"","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#changing-the-qwc-docker-port","text":"In the default setup, qwc-docker will run on port 8088 . To change this, you can modify the api-gateway port mapping in docker-compose.yml , i.e. to run on port 1234 : qwc-api-gateway: image: nginx:1.19 ports: - \"1234:80\"","title":"Changing the qwc-docker port"},{"location":"QuickStart/","text":"Quick start \u00b6 Running QWC as part of qwc-services \u00b6 qwc-services is a collection of loosely coupled micro-services for extending QWC. The services communicate with each other via HTTP/Rest, and are mostly written in Python. The easiest way to run qwc-services is to use the readily available docker images, using the sample setup at qwc-docker . To be able to run qwc-docker , first install docker and docker compose : Docker: https://docs.docker.com/engine/install/ docker-compose: https://docs.docker.com/compose/install/ Then, follow these steps: Clone the qwc-docker sample setup at qwc-docker and copy the docker-compose and api-gateway configuration templates: git clone --recursive https://github.com/qwc-services/qwc-docker.git cd qwc-docker cp docker-compose-example.yml docker-compose.yml cp api-gateway/nginx-example.conf api-gateway/nginx.conf Set the password for the postgres superuser in docker-compose.yml : qwc-postgis: image: sourcepole/qwc-base-db:<version> environment: POSTGRES_PASSWORD: '<SET YOUR PASSWORD HERE>' Create a secret key: python3 -c 'import secrets; print(\"JWT_SECRET_KEY=\\\"%s\\\"\" % secrets.token_hex(48))' >.env Change the UID/GID which runs the QWC services to match the user/group which owns the shared volumes on the host by setting SERVICE_UID and SERVICE_GID in qwc-docker/docker-compose.yml . Set permissions for the shared solr data volume: sudo chown 8983:8983 volumes/solr/data Start all containers (will download all images from dockerhub when executed the first time): docker compose up Note : If using older version of docker , you need to write docker-compose up instead of docker compose up (and similarly for other docker compose calls). Note : The sample docker-compose-example.yml uses latest-YYYY-lts as image versions. This will result in docker always pulling the latest images of the respective lts series. See Keeping QWC services up to date . The map viewer will run on http://localhost:8088/ . The admin GUI will run on http://localhost:8088/qwc_admin (default admin credentials: username admin , password admin , requires password change on first login). Next steps: Configure the themes Customize the viewer Configuring the services Set resource permissions Running QWC as a standalone viewer \u00b6 If you don't need the advanced functionalities provided by qwc-services or want to integrate QWC in another environment, you can run QWC as a standalone viewer. To work with QWC, you will need a minimal development environment consisting of git , node and yarn . You will also need a running QGIS Server instance which serves your projects. The fastest way to get started is by cloning the stock application: git clone https://github.com/qgis/qwc2.git Next, install all required dependencies: cd qwc2 yarn install Then, start a local development application: yarn start The development application will run by default on http://localhost:8081 . At this point, you can customize and configure the application according to your needs, as described in detail in the following chapters. The final step is to compile a deployable application bundle for production: yarn run prod You can then deploy the contents of the prod folder to your web server. Next steps: Configure the themes Customize the viewer","title":"Quick start"},{"location":"QuickStart/#quick-start","text":"","title":"Quick start"},{"location":"QuickStart/#running-qwc-as-part-of-qwc-services","text":"qwc-services is a collection of loosely coupled micro-services for extending QWC. The services communicate with each other via HTTP/Rest, and are mostly written in Python. The easiest way to run qwc-services is to use the readily available docker images, using the sample setup at qwc-docker . To be able to run qwc-docker , first install docker and docker compose : Docker: https://docs.docker.com/engine/install/ docker-compose: https://docs.docker.com/compose/install/ Then, follow these steps: Clone the qwc-docker sample setup at qwc-docker and copy the docker-compose and api-gateway configuration templates: git clone --recursive https://github.com/qwc-services/qwc-docker.git cd qwc-docker cp docker-compose-example.yml docker-compose.yml cp api-gateway/nginx-example.conf api-gateway/nginx.conf Set the password for the postgres superuser in docker-compose.yml : qwc-postgis: image: sourcepole/qwc-base-db:<version> environment: POSTGRES_PASSWORD: '<SET YOUR PASSWORD HERE>' Create a secret key: python3 -c 'import secrets; print(\"JWT_SECRET_KEY=\\\"%s\\\"\" % secrets.token_hex(48))' >.env Change the UID/GID which runs the QWC services to match the user/group which owns the shared volumes on the host by setting SERVICE_UID and SERVICE_GID in qwc-docker/docker-compose.yml . Set permissions for the shared solr data volume: sudo chown 8983:8983 volumes/solr/data Start all containers (will download all images from dockerhub when executed the first time): docker compose up Note : If using older version of docker , you need to write docker-compose up instead of docker compose up (and similarly for other docker compose calls). Note : The sample docker-compose-example.yml uses latest-YYYY-lts as image versions. This will result in docker always pulling the latest images of the respective lts series. See Keeping QWC services up to date . The map viewer will run on http://localhost:8088/ . The admin GUI will run on http://localhost:8088/qwc_admin (default admin credentials: username admin , password admin , requires password change on first login). Next steps: Configure the themes Customize the viewer Configuring the services Set resource permissions","title":"Running QWC as part of qwc-services"},{"location":"QuickStart/#running-qwc-as-a-standalone-viewer","text":"If you don't need the advanced functionalities provided by qwc-services or want to integrate QWC in another environment, you can run QWC as a standalone viewer. To work with QWC, you will need a minimal development environment consisting of git , node and yarn . You will also need a running QGIS Server instance which serves your projects. The fastest way to get started is by cloning the stock application: git clone https://github.com/qgis/qwc2.git Next, install all required dependencies: cd qwc2 yarn install Then, start a local development application: yarn start The development application will run by default on http://localhost:8081 . At this point, you can customize and configure the application according to your needs, as described in detail in the following chapters. The final step is to compile a deployable application bundle for production: yarn run prod You can then deploy the contents of the prod folder to your web server. Next steps: Configure the themes Customize the viewer","title":"Running QWC as a standalone viewer"},{"location":"UserGuide/","text":"User guide \u00b6 This section contains user documentation of the QWC application and QWC services. It describes some of the available features. Note : Depending on the specific viewer configuration, some functionalities might be missing or different than described in this section. Overview \u00b6 QGIS Web Client is composed of some essential features for the user to be able to navigate through its GIS data. The user interface is composed of : a map : navigate through your GIS data, zoom, pan a toolbar : configure some shortcuts for tools (none in this example) a logo : customize your application with your company logo a searchbar : search in the application according to configurable search providers a menu : navigate through all the tools and features of the application a scalebar : see what is the current scale of the map a coordinates display according to the mouse position in several configurable CRS (Coordinates Reference System) a drop-down list of scales : set the zoom of the map at a pre-defined scale shortcuts : configure shortcut buttons for some features (Show Layer Tree for example) home button : set the extent of the map at the home extent defined in your QGIS project location button : zoom at the location of your device zoom buttons : zoom in or out the map a background switcher : change background layer among those configured in the application attributions : links to the attributions data terms of use : links to the terms of use of the application Basic features \u00b6 Menu \u00b6 Here is a minimalist menu of the application with basic features : Theme \u00b6 Theme menu lists all the published QGIS projects in the application. One theme is linked to one QGIS project . You can switch from one to another by clicking on corresponding thumbnails. Then, the map is updated with data of the selected theme. Themes can be sorted in groups. You can also open a theme in a new tab, add a whole theme to the current map (to display several projects at the same time) or add some layers of a theme to the current one. Layers & Legend \u00b6 Layers & Legend menu allows user to show or hide any layer (or group of layers) on the map. Each layer comes from a published QGIS project (or theme ), or from an external WMS/WFS, or local file. On the top of this menu, you can print the legend of the displayed theme by clicking the print button. This will open a new window, where you can print this legend. The eye button is used to filter layers that are not visible. The trash button is used to remove all the layers displayed in the current map. You can retrieve layers from a QGIS project by selecting a theme in Theme menu. The i button displays a new window with all the informations about the current theme. These informations are retrieved from the QGIS project properties. For each layer, user can: remove the layer by clicking the trash button. This removes the layer only for the current context of the user, not for all the users. If the layer comes from the QGIS project, you can retrieve the deleted one by selecting the theme in Theme menu. change the order of display, by clicking up and down arrows buttons change opacity with the slider zoom on the layer extent with the magnifying glass button display layer legend by hovering the image on the left of the layer name or by clicking the i button (new window displaying info about the layer retrieved from QGIS project) The Show layer map tips option is used to display a tooltip when hovering an object on the map. It needs you have configured a map tip in layers properties. The Compare top layer option splits the map into two parts. On the left side, top layer (in the tree) is displayed while it is not on the right side. You can move the slider on the map to see the differences between the two sides. The Import layer submenu allows user to add some external data to the current map. You can configure some predefined URLs in the application. For example, Swisstopo WMTS is a predefined entry in the demo application which queries https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml . You can also add other URLs that are not predefined in the application, https://wxs.ign.fr/clc/geoportail/r/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities if you want to add french Corine Land Cover data. By clicking on connect, there is a list of data available from the entered URL and you can add some of the layers to your current map by clicking on them. In the Import layer submenu, you can also import local files to the current map. Only some formats are supported ( GeoJSON , JSON , KML ). Map Tools \u00b6 In the Map Tools menu, user can retrieve some basic features of GIS webclient : * identify objects * measuring tools * drawing tools * export image Identify \u00b6 To identify an object and get attribute values, you can click directly on the map. If an object is present at the click position, there is a request sent to QGIS Server to get attributes of the clicked object. Results are displayed in a window with all objects identified. Geometry of queried objects are highlighted. You can zoom on an object extent, or browse results one by one in the Feature Info panel. Finally, you can export results of all identified objects ( JSON , GeoJSON , CSV or CSV + ZIP ). To be able to query an object, layer must be configured as queryable in the QGIS project (check the Identifiable checkbox in Project \u2192 Properties \u2192 Data Sources in your QGIS project). Identify Region \u00b6 User can also use Identify Region tool to identify multiple objects in the same time. Draw a polygon around the features to identify to get the results. Measure \u00b6 Measuring tools can be used to retrieve position, object length, object area, ... Values can be copied to clipboard with the copy button. Position \u00b6 Click on the map to get coordinates. Coordinates are displayed according to selected CRS in bottom bar of the application (here WGS 84 / Pseudo Mercator ). Length \u00b6 Draw a polyline on the map to measure the length of each segment and the sum of all these lengths. User can choose the units of measurement ( meters , feet , kilometers , miles ). Area \u00b6 Draw a polygon on the map to measure an area. User can choose the units of measurement ( square meters , square feet , square kilometers , square miles , hectares ). Bearing \u00b6 Draw a line on the map to get the bearing angle of this line (angle from start point to end point). Redlining \u00b6 In Redlining tool, user can add some annotations to the map in different temporary layers. The default layer in which you can add annotations is named Redlining . You can add new layers by clicking + button. Drawing layers are available in Layers & Legend menu. Drawing options are : * point * polyline * polygon * circle * text For each object, you can set border color, fill color, size. Fill the label entry to set text on your object. Once you have drawn objects, you can edit them by picking one and change options. Pick an object and click on trash button to delete it. Buffer option is used to create a buffer around the selected object. Raster Export \u00b6 Raster Export tool allows the user to export a screenshot of the map in an image ( png , jpeg ) at a specified resolution ( 96 dpi , 300 dpi ). Draw a rectangle on the map to export a region in an image. An image is opened in a new tab and you can save it on your computer with the specified format and resolution. Print \u00b6 With Print menu, you can export a layout configured in your QGIS project as PDF file. When clicking on the menu, a list of all available layouts of the theme (QGIS project) is displayed. You can set some options : scale, rotation, grid and custom text (if configured in the layout). Result is displayed in a new tab or in a window in the application. Then, you can save it in a file or print it. Help \u00b6 By default, Help menu displays the build date of the application. You can also customize this menu to have a link to the QWC User documentation. External Link \u00b6 External Link menu can be used to have a link to other resources. For example, your company site.","title":"User guide"},{"location":"UserGuide/#user-guide","text":"This section contains user documentation of the QWC application and QWC services. It describes some of the available features. Note : Depending on the specific viewer configuration, some functionalities might be missing or different than described in this section.","title":"User guide"},{"location":"UserGuide/#overview","text":"QGIS Web Client is composed of some essential features for the user to be able to navigate through its GIS data. The user interface is composed of : a map : navigate through your GIS data, zoom, pan a toolbar : configure some shortcuts for tools (none in this example) a logo : customize your application with your company logo a searchbar : search in the application according to configurable search providers a menu : navigate through all the tools and features of the application a scalebar : see what is the current scale of the map a coordinates display according to the mouse position in several configurable CRS (Coordinates Reference System) a drop-down list of scales : set the zoom of the map at a pre-defined scale shortcuts : configure shortcut buttons for some features (Show Layer Tree for example) home button : set the extent of the map at the home extent defined in your QGIS project location button : zoom at the location of your device zoom buttons : zoom in or out the map a background switcher : change background layer among those configured in the application attributions : links to the attributions data terms of use : links to the terms of use of the application","title":"Overview"},{"location":"UserGuide/#basic-features","text":"","title":"Basic features"},{"location":"UserGuide/#menu","text":"Here is a minimalist menu of the application with basic features :","title":"Menu"},{"location":"UserGuide/#theme","text":"Theme menu lists all the published QGIS projects in the application. One theme is linked to one QGIS project . You can switch from one to another by clicking on corresponding thumbnails. Then, the map is updated with data of the selected theme. Themes can be sorted in groups. You can also open a theme in a new tab, add a whole theme to the current map (to display several projects at the same time) or add some layers of a theme to the current one.","title":"Theme"},{"location":"UserGuide/#layers-legend","text":"Layers & Legend menu allows user to show or hide any layer (or group of layers) on the map. Each layer comes from a published QGIS project (or theme ), or from an external WMS/WFS, or local file. On the top of this menu, you can print the legend of the displayed theme by clicking the print button. This will open a new window, where you can print this legend. The eye button is used to filter layers that are not visible. The trash button is used to remove all the layers displayed in the current map. You can retrieve layers from a QGIS project by selecting a theme in Theme menu. The i button displays a new window with all the informations about the current theme. These informations are retrieved from the QGIS project properties. For each layer, user can: remove the layer by clicking the trash button. This removes the layer only for the current context of the user, not for all the users. If the layer comes from the QGIS project, you can retrieve the deleted one by selecting the theme in Theme menu. change the order of display, by clicking up and down arrows buttons change opacity with the slider zoom on the layer extent with the magnifying glass button display layer legend by hovering the image on the left of the layer name or by clicking the i button (new window displaying info about the layer retrieved from QGIS project) The Show layer map tips option is used to display a tooltip when hovering an object on the map. It needs you have configured a map tip in layers properties. The Compare top layer option splits the map into two parts. On the left side, top layer (in the tree) is displayed while it is not on the right side. You can move the slider on the map to see the differences between the two sides. The Import layer submenu allows user to add some external data to the current map. You can configure some predefined URLs in the application. For example, Swisstopo WMTS is a predefined entry in the demo application which queries https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml . You can also add other URLs that are not predefined in the application, https://wxs.ign.fr/clc/geoportail/r/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities if you want to add french Corine Land Cover data. By clicking on connect, there is a list of data available from the entered URL and you can add some of the layers to your current map by clicking on them. In the Import layer submenu, you can also import local files to the current map. Only some formats are supported ( GeoJSON , JSON , KML ).","title":"Layers &amp; Legend"},{"location":"UserGuide/#map-tools","text":"In the Map Tools menu, user can retrieve some basic features of GIS webclient : * identify objects * measuring tools * drawing tools * export image","title":"Map Tools"},{"location":"UserGuide/#identify","text":"To identify an object and get attribute values, you can click directly on the map. If an object is present at the click position, there is a request sent to QGIS Server to get attributes of the clicked object. Results are displayed in a window with all objects identified. Geometry of queried objects are highlighted. You can zoom on an object extent, or browse results one by one in the Feature Info panel. Finally, you can export results of all identified objects ( JSON , GeoJSON , CSV or CSV + ZIP ). To be able to query an object, layer must be configured as queryable in the QGIS project (check the Identifiable checkbox in Project \u2192 Properties \u2192 Data Sources in your QGIS project).","title":"Identify"},{"location":"UserGuide/#identify-region","text":"User can also use Identify Region tool to identify multiple objects in the same time. Draw a polygon around the features to identify to get the results.","title":"Identify Region"},{"location":"UserGuide/#measure","text":"Measuring tools can be used to retrieve position, object length, object area, ... Values can be copied to clipboard with the copy button.","title":"Measure"},{"location":"UserGuide/#position","text":"Click on the map to get coordinates. Coordinates are displayed according to selected CRS in bottom bar of the application (here WGS 84 / Pseudo Mercator ).","title":"Position"},{"location":"UserGuide/#length","text":"Draw a polyline on the map to measure the length of each segment and the sum of all these lengths. User can choose the units of measurement ( meters , feet , kilometers , miles ).","title":"Length"},{"location":"UserGuide/#area","text":"Draw a polygon on the map to measure an area. User can choose the units of measurement ( square meters , square feet , square kilometers , square miles , hectares ).","title":"Area"},{"location":"UserGuide/#bearing","text":"Draw a line on the map to get the bearing angle of this line (angle from start point to end point).","title":"Bearing"},{"location":"UserGuide/#redlining","text":"In Redlining tool, user can add some annotations to the map in different temporary layers. The default layer in which you can add annotations is named Redlining . You can add new layers by clicking + button. Drawing layers are available in Layers & Legend menu. Drawing options are : * point * polyline * polygon * circle * text For each object, you can set border color, fill color, size. Fill the label entry to set text on your object. Once you have drawn objects, you can edit them by picking one and change options. Pick an object and click on trash button to delete it. Buffer option is used to create a buffer around the selected object.","title":"Redlining"},{"location":"UserGuide/#raster-export","text":"Raster Export tool allows the user to export a screenshot of the map in an image ( png , jpeg ) at a specified resolution ( 96 dpi , 300 dpi ). Draw a rectangle on the map to export a region in an image. An image is opened in a new tab and you can save it on your computer with the specified format and resolution.","title":"Raster Export"},{"location":"UserGuide/#print","text":"With Print menu, you can export a layout configured in your QGIS project as PDF file. When clicking on the menu, a list of all available layouts of the theme (QGIS project) is displayed. You can set some options : scale, rotation, grid and custom text (if configured in the layout). Result is displayed in a new tab or in a window in the application. Then, you can save it in a file or print it.","title":"Print"},{"location":"UserGuide/#help","text":"By default, Help menu displays the build date of the application. You can also customize this menu to have a link to the QWC User documentation.","title":"Help"},{"location":"UserGuide/#external-link","text":"External Link menu can be used to have a link to other resources. For example, your company site.","title":"External Link"},{"location":"configuration/ResourcesPermissions/","text":"Managing Users, Resources and Permissions \u00b6 qwc-docker has a QWC configuration backend . That backend can be reached by default at http://localhost:8088/qwc_admin . The configuration backend allows to assign users and groups to roles. The roles in their turn can receive permissions on resources. These configuration settings will be stored in the configuration database . Out of the box qwc-docker comes with with a container qwc-postgis that contains the configuration database. Users, groups and roles \u00b6 Roles can be given permissions on resources. That means that if you want to give users or groups permissions on resources, then you have to first create a role, configure the permissions that the roles has on some resources, and then assign the role the users or groups. Resources \u00b6 The following resource types are available: Resource name Description Map WMS service corresponding to a QGIS Project, see Map permissions . \u251c\u2500 Layer Layer of a map. \u2502 \u2570\u2500 Attribute Layer attribute. \u251c\u2500 Data Dataset, for Editing, Feature Form, Attribute Table. \u2502 \u2570\u2500 Attribute Attribute of a dataset. \u251c\u2500 Data (create) Dataset for creating features. \u251c\u2500 Data (update) Dataset for updating features. \u251c\u2500 Data (delete) Dataset for deleting features. \u251c\u2500 Print template Print composer template of a QGIS Project. \u2570\u2500 3D Tiles Tileset 3D tiles tileset, see 3D view . FeatureInfo service Feature info service, see Info permissions . \u2570\u2500 FeatureInfo layer Feature info layer. \u2570\u2500 Attribute Attribute of an info layer. WFS Service WFS service, corresponding to a QGIS Project, see WFS permissions . \u251c\u2500 WFS Layer WFS layer. \u2502 \u2570\u2500 Attribute Attribute of a WFS layer. \u251c\u2500 WFS Layer (create) WFS layer for creating features. \u251c\u2500 WFS Layer (update) WFS layer for updating features. \u2570\u2500 WFS Layer (delete) WFS layer for deleting features. Search facet Fulltext search facet, see Search permissions . Viewer task Viewer task key, see Viewer task permissions . Viewer asset Viewer asset path, see Viewer asset permissions . Document template Document template name, see Report permissions . Theme info link Theme info link name, see theme info links . Map info query Map info query identifier, see Map info permissions . Plugin Plugin name of Plugin data entries. \u2570\u2500 Plugin data Plugin resource name Plugin data entries. Note : New resource types, i.e. for custom QWC plugins, can be inserted into the qwc_config.resource_types table of the QWC configuration database.. Permissions \u00b6 Permissions are based on roles. Roles can be assigned to groups or users, and users can be members of groups. A special role is public . The public role always applies, no matter whether a user is signed in or is not signed in. Roles can be assigned permission for resources. The write flag is only used for Data and WFS Layer resources and determines whether the dataset / WFS layer is read-only or writeable (the respective create / update / delete allow for fine-grained CRUD permission control). By using the permissions_default_allow configuration setting in tenantConfig.json , some resources can be set to be permitted or restricted by default if no permissions are set (default: false ). Among affected resources are Map , Layer , Print template , Viewer task , FeatureInfo service , FeatureInfo layer . E.g.: permissions_default_allow=true : all maps and layers are permitted by default permissions_default_allow=false : maps and layers are only available if their resources and permissions are explicitly configured Based on the user's identity (user name and/or group name), all corresponding roles and their permissions and restrictions are collected from the QWC configuration database by the QWC Config Generator , which then generates a permissions.json file. The QWC services will read the permissions.json to filter the responses according to these permissions and restrictions, by using PermissionClient::resource_permissions() or PermissionClient::resource_restrictions() from QWC Services Core . Map permissions \u00b6 The Map resource permissions control whether a theme is visibile and whether the corresponding WMS is accessible via qwc-ogc-service . The name of a Map resource corresponds to the relative path to the project below qgs-resources without .qgs extension (so i.e. the resource name for qgs-resources/subfolder/project.qgs will be subfolder/project ). Note : The display behaviour of restricted themes can be customized with the following settings in the mapViewer service config in tenantConfig.json : show_restricted_themes : Whether to show placeholder items for restricted themes. Default: false . show_restricted_themes_whitelist : Whitelist of restricted theme names to display as placeholders. If empty, all restricted themes are shown. Only used if show_restricted_themes enabled. Default: [] . redirect_restricted_themes_to_auth : Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in. Default: false . The Layer resource permissions control whether a theme layer is visibile and whether it is exposed via WMS by the qwc-ogc-service . The name of the Layer resource corresponds to the QGIS layer name, or its WMS short name, if one is set in the QGIS layer properties. The Layer \u2192 Attribute resource permissions control whether a layer attribute is visibile in the WMS GetFeatureInfo results. The name of the Attribute resource corresponds to the QGIS field name (not its alias). The Print template resource permissions control access to a QGIS print layout. The name of the Print template resource is the name of the QGIS print layout. Map , Layer , Attributes , Print template and 3D Tiles Tileset resources are permitted by default if permissions_default_allow is true . The Data and subordinate Attribute resources control whether access to a dataset is permitted via the qwc-data-service . Data resources are not permitted by default. They are used for controlling the dataset accessible for Editing and by the FeatureForm . For more detailed CRUD permissions Data (create) , Data (update) and Date (delete) can be used instead of Data . A Data permission with write=true permits all CRUD operations. Viewer task permissions \u00b6 The Viewer task resource defines viewer functionalities (e.g. Print or MapExport ) which can be restricted. The resource name will be matched against: The key in menuItems and toolbarItems in the QWC config.json . The name of a plugin entry in config.json . The task configuration property of a TaskButton plugin entry in config.json Note : You can restrict tasks entires which specify a mode (i.e. {\"key\": \"Measure\", \"mode\": \"LineString\"} ) by concatenating the task key and the mode as the viewer_task resource name, i.e. MeasureLineString . Restricted viewer task items are then removed from the menu and toolbar in the map viewer. Viewer asset permissions \u00b6 The Viewer asset resource defines viewer assets (i.e. files below the QWC assets folder) which can be restricted. The resource name is a file path below the assets folder (i.e. pdfs/mydocument.pdf for <baseurl>/assets/pdfs/mydocument.pdf ). The path can also contain wildcards (i.e. pdfs/restricted/ ), in which case all matching files will be restricted to permitted users only. Accessing a viewer asset which is not permitted will result in a 404 Not Found error. WFS/OAPIF permissions \u00b6 WFS and OGC API Features (OAPIF) services are disabled by default and need to be explicitly permitted to be exposed by the qwc-ogc-service . The services also need to be published in in QGIS \u2192 Project Properties \u2192 QGIS Server \u2192 WFS/OAPIF . The WFS Service resource permissions control whether a WFS service is exposed by the qwc-ogc-service . If a WFS Service is permitted, all its (published) child layers are permitted by default, without write permissions. The WFS Layer resource permissions allow individually controlling whether child layers of a WFS Service are permitted and writable (via WFS-T or OAPIF). Aditionally, the WFS Layer (create) , WFS Layer (update) and WFS Layer (delete) resource permissions allow setting fine-grained CRUD permissions on the WFS Layer . The WFS Layer \u2192 Attribute resource permissions allow controlling whether a WFS layer attribute is exposed via qwc-ogc-service . Group registration \u00b6 Using the optional Registration GUI allows users to request membership or unsubscribe from registrable groups. These requests can then be accepted or rejected in the Admin GUI . Workflow: Admin GUI admin user creates new groups with assigned roles and permissions on resources admin user configures registrable groups Registration GUI user select desired groups from registrable groups and submits application form admin users are notified of new registration requests Admin GUI admin user selects entry from list of pending registration requests admin user accepts or rejects registration requests for a user user is added to or removed from accepted groups user is notified of registration request updates Map Viewer user permissions are updated for new groups","title":"Resources and permissions"},{"location":"configuration/ResourcesPermissions/#managing-users-resources-and-permissions","text":"qwc-docker has a QWC configuration backend . That backend can be reached by default at http://localhost:8088/qwc_admin . The configuration backend allows to assign users and groups to roles. The roles in their turn can receive permissions on resources. These configuration settings will be stored in the configuration database . Out of the box qwc-docker comes with with a container qwc-postgis that contains the configuration database.","title":"Managing Users, Resources and Permissions"},{"location":"configuration/ResourcesPermissions/#users-groups-and-roles","text":"Roles can be given permissions on resources. That means that if you want to give users or groups permissions on resources, then you have to first create a role, configure the permissions that the roles has on some resources, and then assign the role the users or groups.","title":"Users, groups and roles"},{"location":"configuration/ResourcesPermissions/#resources","text":"The following resource types are available: Resource name Description Map WMS service corresponding to a QGIS Project, see Map permissions . \u251c\u2500 Layer Layer of a map. \u2502 \u2570\u2500 Attribute Layer attribute. \u251c\u2500 Data Dataset, for Editing, Feature Form, Attribute Table. \u2502 \u2570\u2500 Attribute Attribute of a dataset. \u251c\u2500 Data (create) Dataset for creating features. \u251c\u2500 Data (update) Dataset for updating features. \u251c\u2500 Data (delete) Dataset for deleting features. \u251c\u2500 Print template Print composer template of a QGIS Project. \u2570\u2500 3D Tiles Tileset 3D tiles tileset, see 3D view . FeatureInfo service Feature info service, see Info permissions . \u2570\u2500 FeatureInfo layer Feature info layer. \u2570\u2500 Attribute Attribute of an info layer. WFS Service WFS service, corresponding to a QGIS Project, see WFS permissions . \u251c\u2500 WFS Layer WFS layer. \u2502 \u2570\u2500 Attribute Attribute of a WFS layer. \u251c\u2500 WFS Layer (create) WFS layer for creating features. \u251c\u2500 WFS Layer (update) WFS layer for updating features. \u2570\u2500 WFS Layer (delete) WFS layer for deleting features. Search facet Fulltext search facet, see Search permissions . Viewer task Viewer task key, see Viewer task permissions . Viewer asset Viewer asset path, see Viewer asset permissions . Document template Document template name, see Report permissions . Theme info link Theme info link name, see theme info links . Map info query Map info query identifier, see Map info permissions . Plugin Plugin name of Plugin data entries. \u2570\u2500 Plugin data Plugin resource name Plugin data entries. Note : New resource types, i.e. for custom QWC plugins, can be inserted into the qwc_config.resource_types table of the QWC configuration database..","title":"Resources"},{"location":"configuration/ResourcesPermissions/#permissions","text":"Permissions are based on roles. Roles can be assigned to groups or users, and users can be members of groups. A special role is public . The public role always applies, no matter whether a user is signed in or is not signed in. Roles can be assigned permission for resources. The write flag is only used for Data and WFS Layer resources and determines whether the dataset / WFS layer is read-only or writeable (the respective create / update / delete allow for fine-grained CRUD permission control). By using the permissions_default_allow configuration setting in tenantConfig.json , some resources can be set to be permitted or restricted by default if no permissions are set (default: false ). Among affected resources are Map , Layer , Print template , Viewer task , FeatureInfo service , FeatureInfo layer . E.g.: permissions_default_allow=true : all maps and layers are permitted by default permissions_default_allow=false : maps and layers are only available if their resources and permissions are explicitly configured Based on the user's identity (user name and/or group name), all corresponding roles and their permissions and restrictions are collected from the QWC configuration database by the QWC Config Generator , which then generates a permissions.json file. The QWC services will read the permissions.json to filter the responses according to these permissions and restrictions, by using PermissionClient::resource_permissions() or PermissionClient::resource_restrictions() from QWC Services Core .","title":"Permissions"},{"location":"configuration/ResourcesPermissions/#map-permissions","text":"The Map resource permissions control whether a theme is visibile and whether the corresponding WMS is accessible via qwc-ogc-service . The name of a Map resource corresponds to the relative path to the project below qgs-resources without .qgs extension (so i.e. the resource name for qgs-resources/subfolder/project.qgs will be subfolder/project ). Note : The display behaviour of restricted themes can be customized with the following settings in the mapViewer service config in tenantConfig.json : show_restricted_themes : Whether to show placeholder items for restricted themes. Default: false . show_restricted_themes_whitelist : Whitelist of restricted theme names to display as placeholders. If empty, all restricted themes are shown. Only used if show_restricted_themes enabled. Default: [] . redirect_restricted_themes_to_auth : Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in. Default: false . The Layer resource permissions control whether a theme layer is visibile and whether it is exposed via WMS by the qwc-ogc-service . The name of the Layer resource corresponds to the QGIS layer name, or its WMS short name, if one is set in the QGIS layer properties. The Layer \u2192 Attribute resource permissions control whether a layer attribute is visibile in the WMS GetFeatureInfo results. The name of the Attribute resource corresponds to the QGIS field name (not its alias). The Print template resource permissions control access to a QGIS print layout. The name of the Print template resource is the name of the QGIS print layout. Map , Layer , Attributes , Print template and 3D Tiles Tileset resources are permitted by default if permissions_default_allow is true . The Data and subordinate Attribute resources control whether access to a dataset is permitted via the qwc-data-service . Data resources are not permitted by default. They are used for controlling the dataset accessible for Editing and by the FeatureForm . For more detailed CRUD permissions Data (create) , Data (update) and Date (delete) can be used instead of Data . A Data permission with write=true permits all CRUD operations.","title":"Map permissions"},{"location":"configuration/ResourcesPermissions/#viewer-task-permissions","text":"The Viewer task resource defines viewer functionalities (e.g. Print or MapExport ) which can be restricted. The resource name will be matched against: The key in menuItems and toolbarItems in the QWC config.json . The name of a plugin entry in config.json . The task configuration property of a TaskButton plugin entry in config.json Note : You can restrict tasks entires which specify a mode (i.e. {\"key\": \"Measure\", \"mode\": \"LineString\"} ) by concatenating the task key and the mode as the viewer_task resource name, i.e. MeasureLineString . Restricted viewer task items are then removed from the menu and toolbar in the map viewer.","title":"Viewer task permissions"},{"location":"configuration/ResourcesPermissions/#viewer-asset-permissions","text":"The Viewer asset resource defines viewer assets (i.e. files below the QWC assets folder) which can be restricted. The resource name is a file path below the assets folder (i.e. pdfs/mydocument.pdf for <baseurl>/assets/pdfs/mydocument.pdf ). The path can also contain wildcards (i.e. pdfs/restricted/ ), in which case all matching files will be restricted to permitted users only. Accessing a viewer asset which is not permitted will result in a 404 Not Found error.","title":"Viewer asset permissions"},{"location":"configuration/ResourcesPermissions/#wfsoapif-permissions","text":"WFS and OGC API Features (OAPIF) services are disabled by default and need to be explicitly permitted to be exposed by the qwc-ogc-service . The services also need to be published in in QGIS \u2192 Project Properties \u2192 QGIS Server \u2192 WFS/OAPIF . The WFS Service resource permissions control whether a WFS service is exposed by the qwc-ogc-service . If a WFS Service is permitted, all its (published) child layers are permitted by default, without write permissions. The WFS Layer resource permissions allow individually controlling whether child layers of a WFS Service are permitted and writable (via WFS-T or OAPIF). Aditionally, the WFS Layer (create) , WFS Layer (update) and WFS Layer (delete) resource permissions allow setting fine-grained CRUD permissions on the WFS Layer . The WFS Layer \u2192 Attribute resource permissions allow controlling whether a WFS layer attribute is exposed via qwc-ogc-service .","title":"WFS/OAPIF permissions"},{"location":"configuration/ResourcesPermissions/#group-registration","text":"Using the optional Registration GUI allows users to request membership or unsubscribe from registrable groups. These requests can then be accepted or rejected in the Admin GUI . Workflow: Admin GUI admin user creates new groups with assigned roles and permissions on resources admin user configures registrable groups Registration GUI user select desired groups from registrable groups and submits application form admin users are notified of new registration requests Admin GUI admin user selects entry from list of pending registration requests admin user accepts or rejects registration requests for a user user is added to or removed from accepted groups user is notified of registration request updates Map Viewer user permissions are updated for new groups","title":"Group registration"},{"location":"configuration/ServiceConfiguration/","text":"QWC Services configuration \u00b6 The architecture of qwc-services is as follows: API-Gateway: API Gateway, forwards requests to individual services http://localhost:8088 Auth-Service: Authentication service with local user database (default users: admin:admin, demo:demo) http://localhost:8088/auth/login Map viewer: QWC map viewer http://localhost:8088 OGC Service: Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server http://localhost:8088/ows/api Admin GUI: Admin GUI http://localhost:8088/qwc_admin/ qwc-docker ships a pre-configured the qwc-services ecosystem as an easy to use application. Service overview \u00b6 Following is an overview of existing qwc-services : Applications : QWC Map Viewer : The map viewer application QWC Admin GUI : Configuration backend for managing users and permissions Registration GUI : GUI for registration of new users REST services : DB auth service : Authentication service with local user database LDAP auth service : LDAP Authentication service Data service : Data edit service, required for QWC editing functionality Document service : Service for generating Jasper reports Elevation service : Service for providing elevation data, required for QWC elevation profile Feature info service : Service for providing enhanced GetFeatureInfo responses to QWC Fulltext search service : Fulltext search service for the QWC search functionality Legend service : Service for providing enhanced legend graphics to QWC Mapinfo service : Service for providing additional information to the QWC right-click map context popup OGC service : Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server Permalink service : Service for storing compat permalinks and bookmarks generated by QWC Print service : Service for enhancing the QWC GetPrint requests Configuration database : DB schema and migrations Configuration generator : Configuration generator qwc-docker layout \u00b6 The layout of the qwc-docker tree is as follows: Path Description \u251c\u2500 api-gateway/nginx.conf API gateway configuration. \u251c\u2500 volumes/ Contains folders which are mounted into the various containers. \u2502 \u251c\u2500 attachments Storage of files uploaded through the QWC editing functionality. \u2502 \u251c\u2500 config/<tenant>/ Service configuration files, generated by qwc-config-generator . \u2502 \u251c\u2500 config-in/<tenant>/ Input configuration files, processed by the qwc-config-generator . \u2502 \u2502 \u251c\u2500 config.json Master configuration for the QWC viewer. \u2502 \u2502 \u251c\u2500 index.html Viewer entry point. \u2502 \u2502 \u251c\u2500 themesConfig.json Themes configuration. \u2502 \u2502 \u2514\u2500 tenantConfig.json Master configuration file for qwc services. \u2502 \u251c\u2500 db/ Storage of configuration database (see Config DB ). \u2502 \u251c\u2500 info-templates/ Custom feature-info templates (see qwc-feature-info-service ). \u2502 \u251c\u2500 jasper-reports/ Jasper reports (see qwc-document-service ). \u2502 \u251c\u2500 legends/ Custom legend images (see qwc-legend-service ). \u2502 \u251c\u2500 qgs-resources/ QGIS projects and data referenced by the projects. \u2502 \u251c\u2500 qwc2/ QWC Viewer. \u2502 \u2514\u2500 solr/ Fulltext search index. \u251c\u2500 docker-compose.yml Container configuration file. \u251c\u2500 pg_service.conf Database service definitions. \u2514\u2500 pg_service-write.conf Database service definitions for write connections. Service configurations \u00b6 The master configuration file for the QWC services is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , where <tenant> is the tenant name, default by default. See Multi Tenancy for more details on tenants. The file is structured as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { <ConfigGenerator config> }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"<service name\", <Service config> }, ... ] } Refer to the qwc-config-generator schema for the available ConfigGenerator config settings. themesConfig is a relative path to the theme configuration file as documented in Theme configuration . The services block contains the configuration for the individual QWC services, as documented in the reference . Note: All config settings can also be set as environment variables in capitalized form in docker-compose.yml . Note: Some variables must be set as environment variables in docker-compose.yml : ENV Default value Description INPUT_CONFIG_PATH config-in Base path for service configuration files OUTPUT_CONFIG_PATH /tmp Base path for service configuration files JWT_SECRET_KEY ******** secret key for JWT token TENANT_URL_RE None Regex for tenant extraction from base URL. Example: ^https?://.+?/(.+?)/ TENANT_HEADER None Tenant Header name. Example: Tenant Enabling additional services \u00b6 Add service entry in qwc-services/docker-compose.yml , setting the service mountpoint: SERVICE_MOUNTPOINT=/<mountpoint> Example: qwc-print-service: image: sourcepole/qwc-print-service:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/print' volumes: - ./volumes/config:/srv/qwc_service/config:ro ports: - \"127.0.0.1:5020:9090\" Add corresponding entry in api-gateway/nginx.conf , example: location /api/v1/print { proxy_pass http://qwc-print-service:9090; } If necessary, uncomment/add the respective service url (see also the qwc-map-viewer schema reference ) in the mapViewer config block of volumes/config-in/default/tenantConfig.json , i.e. { \"name\": \"mapViewer\", \"generator_config\": { # ... }, \"config\": { \"print_service_url\": \"/api/v1/print/\", # ... } } Add the service configuration block below services in volumes/config-in/default/tenantConfig.json , according to the service config schema, i.e. { \"name\": \"print\", \"config\": { \"ogc_service_url\": \"http://qwc-ogc-service:9090/\", \"qgis_server_version\": \"3.16\" } } Configuration database \u00b6 The Configuration database (CofigDB) contains the database schema qwc_config for configurations and permissions of QWC services. This database uses the PostgreSQL connection service qwc_configdb by default, which can be setup for the corresponding database in the PostgreSQL connection service file qwc-docker/pg_service.conf . To use an external configuration database, either change the connection definition for qwc_configdb in qwc-docker/pg_service.conf or change the config_db_url in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json . Database migrations \u00b6 Migrations to the ConfigDB are applied automatically by the qwc-base-db-migrate image which is included in the sample docker-compose-example.yml . To upgrade the ConfigDB to a newer version, it is sufficient to change the version of the image to the desired version, and migrations will be applied automatically next time the application is restarted. See the qwc-base-db README for more info. Keeping QWC services up to date \u00b6 When using qwc-docker , updating the services is a simple as updating the image tags in qwc-docker/docker-compose.yml . Two versioning schemes are available: vYYYY-MM-DD : These refer to the latest available \"development\" version of the respective images (i.e. v2023.05.12 ). vYYYY.X-lts : These refer to the long term support version of the respective images (i.e. v2023.1-lts ). You can always check the available tags on dockerhub, for example at https://hub.docker.com/r/sourcepole/qwc-config-generator . In particular, to special tags exist, latest , latest-lts and latest-YYYY-lts (i.e. latest-2024-lts ) which always refer to the latest available \"development\" and long term support versions respectively. Note however that using these tags will result in docker automatically pulling new versions when the application is launched, which may be undesired. The qwc-docker Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Services"},{"location":"configuration/ServiceConfiguration/#qwc-services-configuration","text":"The architecture of qwc-services is as follows: API-Gateway: API Gateway, forwards requests to individual services http://localhost:8088 Auth-Service: Authentication service with local user database (default users: admin:admin, demo:demo) http://localhost:8088/auth/login Map viewer: QWC map viewer http://localhost:8088 OGC Service: Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server http://localhost:8088/ows/api Admin GUI: Admin GUI http://localhost:8088/qwc_admin/ qwc-docker ships a pre-configured the qwc-services ecosystem as an easy to use application.","title":"QWC Services configuration"},{"location":"configuration/ServiceConfiguration/#service-overview","text":"Following is an overview of existing qwc-services : Applications : QWC Map Viewer : The map viewer application QWC Admin GUI : Configuration backend for managing users and permissions Registration GUI : GUI for registration of new users REST services : DB auth service : Authentication service with local user database LDAP auth service : LDAP Authentication service Data service : Data edit service, required for QWC editing functionality Document service : Service for generating Jasper reports Elevation service : Service for providing elevation data, required for QWC elevation profile Feature info service : Service for providing enhanced GetFeatureInfo responses to QWC Fulltext search service : Fulltext search service for the QWC search functionality Legend service : Service for providing enhanced legend graphics to QWC Mapinfo service : Service for providing additional information to the QWC right-click map context popup OGC service : Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server Permalink service : Service for storing compat permalinks and bookmarks generated by QWC Print service : Service for enhancing the QWC GetPrint requests Configuration database : DB schema and migrations Configuration generator : Configuration generator","title":"Service overview"},{"location":"configuration/ServiceConfiguration/#qwc-docker-layout","text":"The layout of the qwc-docker tree is as follows: Path Description \u251c\u2500 api-gateway/nginx.conf API gateway configuration. \u251c\u2500 volumes/ Contains folders which are mounted into the various containers. \u2502 \u251c\u2500 attachments Storage of files uploaded through the QWC editing functionality. \u2502 \u251c\u2500 config/<tenant>/ Service configuration files, generated by qwc-config-generator . \u2502 \u251c\u2500 config-in/<tenant>/ Input configuration files, processed by the qwc-config-generator . \u2502 \u2502 \u251c\u2500 config.json Master configuration for the QWC viewer. \u2502 \u2502 \u251c\u2500 index.html Viewer entry point. \u2502 \u2502 \u251c\u2500 themesConfig.json Themes configuration. \u2502 \u2502 \u2514\u2500 tenantConfig.json Master configuration file for qwc services. \u2502 \u251c\u2500 db/ Storage of configuration database (see Config DB ). \u2502 \u251c\u2500 info-templates/ Custom feature-info templates (see qwc-feature-info-service ). \u2502 \u251c\u2500 jasper-reports/ Jasper reports (see qwc-document-service ). \u2502 \u251c\u2500 legends/ Custom legend images (see qwc-legend-service ). \u2502 \u251c\u2500 qgs-resources/ QGIS projects and data referenced by the projects. \u2502 \u251c\u2500 qwc2/ QWC Viewer. \u2502 \u2514\u2500 solr/ Fulltext search index. \u251c\u2500 docker-compose.yml Container configuration file. \u251c\u2500 pg_service.conf Database service definitions. \u2514\u2500 pg_service-write.conf Database service definitions for write connections.","title":"qwc-docker layout"},{"location":"configuration/ServiceConfiguration/#service-configurations","text":"The master configuration file for the QWC services is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , where <tenant> is the tenant name, default by default. See Multi Tenancy for more details on tenants. The file is structured as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { <ConfigGenerator config> }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"<service name\", <Service config> }, ... ] } Refer to the qwc-config-generator schema for the available ConfigGenerator config settings. themesConfig is a relative path to the theme configuration file as documented in Theme configuration . The services block contains the configuration for the individual QWC services, as documented in the reference . Note: All config settings can also be set as environment variables in capitalized form in docker-compose.yml . Note: Some variables must be set as environment variables in docker-compose.yml : ENV Default value Description INPUT_CONFIG_PATH config-in Base path for service configuration files OUTPUT_CONFIG_PATH /tmp Base path for service configuration files JWT_SECRET_KEY ******** secret key for JWT token TENANT_URL_RE None Regex for tenant extraction from base URL. Example: ^https?://.+?/(.+?)/ TENANT_HEADER None Tenant Header name. Example: Tenant","title":"Service configurations"},{"location":"configuration/ServiceConfiguration/#enabling-additional-services","text":"Add service entry in qwc-services/docker-compose.yml , setting the service mountpoint: SERVICE_MOUNTPOINT=/<mountpoint> Example: qwc-print-service: image: sourcepole/qwc-print-service:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/print' volumes: - ./volumes/config:/srv/qwc_service/config:ro ports: - \"127.0.0.1:5020:9090\" Add corresponding entry in api-gateway/nginx.conf , example: location /api/v1/print { proxy_pass http://qwc-print-service:9090; } If necessary, uncomment/add the respective service url (see also the qwc-map-viewer schema reference ) in the mapViewer config block of volumes/config-in/default/tenantConfig.json , i.e. { \"name\": \"mapViewer\", \"generator_config\": { # ... }, \"config\": { \"print_service_url\": \"/api/v1/print/\", # ... } } Add the service configuration block below services in volumes/config-in/default/tenantConfig.json , according to the service config schema, i.e. { \"name\": \"print\", \"config\": { \"ogc_service_url\": \"http://qwc-ogc-service:9090/\", \"qgis_server_version\": \"3.16\" } }","title":"Enabling additional services"},{"location":"configuration/ServiceConfiguration/#configuration-database","text":"The Configuration database (CofigDB) contains the database schema qwc_config for configurations and permissions of QWC services. This database uses the PostgreSQL connection service qwc_configdb by default, which can be setup for the corresponding database in the PostgreSQL connection service file qwc-docker/pg_service.conf . To use an external configuration database, either change the connection definition for qwc_configdb in qwc-docker/pg_service.conf or change the config_db_url in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json .","title":"Configuration database"},{"location":"configuration/ServiceConfiguration/#database-migrations","text":"Migrations to the ConfigDB are applied automatically by the qwc-base-db-migrate image which is included in the sample docker-compose-example.yml . To upgrade the ConfigDB to a newer version, it is sufficient to change the version of the image to the desired version, and migrations will be applied automatically next time the application is restarted. See the qwc-base-db README for more info.","title":"Database migrations"},{"location":"configuration/ServiceConfiguration/#keeping-qwc-services-up-to-date","text":"When using qwc-docker , updating the services is a simple as updating the image tags in qwc-docker/docker-compose.yml . Two versioning schemes are available: vYYYY-MM-DD : These refer to the latest available \"development\" version of the respective images (i.e. v2023.05.12 ). vYYYY.X-lts : These refer to the long term support version of the respective images (i.e. v2023.1-lts ). You can always check the available tags on dockerhub, for example at https://hub.docker.com/r/sourcepole/qwc-config-generator . In particular, to special tags exist, latest , latest-lts and latest-YYYY-lts (i.e. latest-2024-lts ) which always refer to the latest available \"development\" and long term support versions respectively. Note however that using these tags will result in docker automatically pulling new versions when the application is launched, which may be undesired. The qwc-docker Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Keeping QWC services up to date"},{"location":"configuration/ThemesConfiguration/","text":"Themes configuration \u00b6 A theme corresponds to a QGIS project, published as WMS and served by QGIS Server. The basic steps for configuring a theme are: Create a QGIS project and deploy it to QGIS Server Writing the QWC theme configuration Generating the themes configuration Creating and publishing a QGIS project \u00b6 The first step is to prepare a QGIS project for publishing. Besides the common tasks of adding and styling layers, the following table gives an overview of settings which influence how the theme is displayed in QWC: What Where Description Map projection Project Properties \u2192 CRS Map projection used in QWC. Service Metadata Project Properties \u2192 QGIS Server \u2192 Service capabilities Shown in the theme info dialog, invokable from the Layer Tree panel titlebar. Title, keywords Project Properties \u2192 QGIS Server \u2192 Service capabilities Theme title, displayed in the Theme Switcher, and keywords, useful for filtering. Map extent Project Properties \u2192 QGIS Server \u2192 WMS \u2192 Advertised extent The extent used as initial map extent when loading the theme, unless overridden in themesConfig.json . Queryable layers Project Properties \u2192 Data sources Mark layers as identifyable by the client. FeatureInfo geometry Project Properties \u2192 QGIS Server \u2192 WMS Capabilities \u2192 Add geometry to feature response Return feature geometries with the GetFeatureInfo request. Allows the client to highlight the selected features. Layer Display Field Vector Layer Properties \u2192 Display The field used in the identify results. Layer Map Tip Vector Layer Properties \u2192 Display The contents of the Map Tip shown when hovering over layers in the client, if displaying Map Tips is enabled in the Layer Tree. Layer Metadata Layer Properties \u2192 QGIS Server Shown in the client Layer Info dialog, invokable from the Layer Tree. Scale range Layer Properties \u2192 Rendering \u2192 Scale dependent visibility The scale range within which a layer is visible, useful to improve rendering performance. Initial visibility Layers Panel Initial visibility of layers and groups. Rendering order Layer Order Panel or Layers Panel Rendering order of the layers. If layer re-ordering is enabled in config.json , the order from the Layer Order Panel is ignored. Print layouts Layout manager The print layouts offered in the Print plugin. Print layout labels Layout manager Print layout labels with an ID will be exposed in the Print plugin. Note: a label ID starting with __ will not be exposed. Attribute form Vector Layer Properties \u2192 Attributes Form The configured attribute form will be displayed when editing in QWC. External layers Layer Properties \u2192 QGIS Server \u2192 Data URL Mark the layer as an external layer to avoid cascaded requests. See Configuring external layers . Then, store the project in the publishing directory of your QGIS Server instance. When using qwc-docker , store the project as *.qgs below qwc-docker/volumes/qgs-resources . Alternatively, when using qwc-docker , you can also store the project in a database in QGIS using Project \u2192 Save To \u2192 PostgreSQL (see Storing projects in database ). Ensuring valid datasources \u00b6 A common issue is that the project will reference datasources in locations which cannot be resolved when QGIS Server reads the project, in particular when running QGIS Server inside a docker container. To avoid such issues: Make sure that any file-based resources are located on the same level or below the level of the *.qgs project file. Remember to copy all resources along with the *.qgs project file to the server. Load any PostgreSQL datasource in QGIS using a service, and make sure the service definition exists both in the pg_service.conf on your host system as well as in the qwc_docker/pg_service.conf and qwc_docker/pg_service-write.conf which are mounted inside the docker containers. For instance, to use default qwc-docker database, use the qwc_geodb service and add the service definition to your host pg_service.conf as follows: [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable Configuring the themes in themesConfig.json \u00b6 The next step is to configure the theme for QWC. There are two approaches: Automatic theme configuration (only when using qwc-docker ): Just copy the project file to the designated location and the qwc-config-generator will automatically generate a theme configuration using default parameters. Manual theme configuration : Manually configure a theme with the full set of configuration options. Automatic theme configuration \u00b6 When using qwc-docker , save your QGIS projects below qwc-docker/volumes/qgs-resources/scan . Adjust the default settings ( defaultBackgroundLayers , defaultSearchProviders , etc.) as desired in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Then generate the theme configuration . You can configure an automatically configured theme as default theme by setting defaultTheme in themesConfig.json to the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. For example to set qwc-docker/volumes/qgs-resources/scan/project.qgs as default theme, you'd write ... \"defaultTheme\": \"scan/project\" ... To use a custom thumbnail for an automatically configured theme, place a an image called <project_basename>.png in qwc-docker/volumes/qwc2/assets/img/mapthumbs . For example. if the project is called project_name.qgs , the name thumbnail image would be named project_name.png . Note: The auto-scan directory can be is controlled by qgis_projects_scan_base_dir in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Manual theme configuration \u00b6 The theme configuration file is located as follows: Standalone viewer: qwc-app/static/themesConfig.json qwc-docker : qwc-docker/volumes/config-in/<tentant>/themesConfig.json Note : when using qwc-docker , the themes configuration may also be embedded as themesConfig directly in qwc-docker/volumes/config-in/<tentant>/tenantConfig.json . The themesConfig.json file contains a list of themes, optionally organized in groups, as well as a list of background layers: { \"themes\": { \"items\": [ { <ThemeDefinition> }, ... ], \"groups\": [ { \"title\": <Group title>, \"items\": [{ <ThemeDefinition> }, ...], \"groups\": [ { <Group> }, ...] }, ... ], \"externalLayers\": [ { <ExternalLayerDefinition> }, ... ], \"themeInfoLinks\": [ { <ThemeInfoLinkDefinition> }, ... ], \"pluginData\": { \"<PluginName>\": [{ <PluginDataReource>}, ...], ... }, \"backgroundLayers\": [ { <BackgroundLayerDefinition> }, ... ], }, \"defaultBackgroundLayers\": \"<Default background layers, see theme definition below>\", \"defaultWMSVersion\": \"<Default WMS version, i.e. 1.3.0>\", \"defaultScales\": [<Scale denominators, see theme definition below>], \"defaultPrintScales\" [<Scale denominators, see theme definition below>], \"defaultPrintResolutions\": [<DPIs, see theme definition below>], \"defaultSearchProviders\": [<Search providers, see theme definition below>], \"defaultPrintGrid\": [<Print grid, see theme definition below>], \"defaultTheme\": \"<Default theme id>\" } Refer to External layers , Theme info links , Plugin data and Background layers for the format of the respective definitions. Refer to the sample themesConfig.json for a complete example. The format of the theme definitions is as follows: Entry Description \"id\": \"<id>\", Theme identificator. Autogenerated if not specified. \"url\": \"<WMS URL>\", The address of desired WMS served by QGIS Server. \"additionalMouseCrs\": [\"<EPSG code>\"], Optional, list of additional projections for displaying the mouse position. WGS84 and mapCrs are available by default. Additional projections definitions must be added to config.json . \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"backgroundLayers\": [{, Optional, list of available background layers, defaults to defaultBackgroundLayers . \u2063 \"name\": \"<Background layer name>\", Name of matching BackgroundLayerDefinition , see below . \u2063 \"overview\": <boolean>, Optional, set the layer as the overview map layer (i.e. this layer will be displayed in the overview map regardless of the background layer visible in the main map). \u2063 \"printLayer\": \"<layer name>\"\\|[<list>], Optional, a QGIS layer name or layer resource string to use as matching background layer when printing. Alternatively, a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<layer name>\"}] can be provided, ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. If omitted, no background is printed, unless layer is of type wms and printExternalLayers is true in the Print plugin configuration. See Printing . \u2063 \"visibility\": <boolean> Optional, initial visibility of the layer when theme is loaded. }], \"collapseLayerGroupsBelowLevel\": <level>, Optional, layer tree level below which to initially collapse groups. By default the tree is completely expanded. \"config\": { Optional, per-theme configuration entries which override the global entries in config.json , see Viewer Configuration . \u2063 \"<...>\": ..., Global config settings overridden in theme, see config.json . \u2063 \"desktop\": {...}, Desktop specific global and plugin configuration overridden in theme. \u2063 \"mobile\": {...}, Mobile specific global and plugin configuration overridden in theme. \u2063 \"plugins\": {...} Plugin configuration overridden in theme, See config.json . } \"defaultDisplayCrs\": \"<EPSG code>\", Optional, defines default measuring CRS for coordinates used in BottomBar and Measure, defaults to mapCrs/project projection. \"defaultPrintLayout\": \"<name>\", Optional, name of print layout to select by default. \"description\": \"<Description>\", Optional, an additional description to show below the theme title. \"editConfig\": {<editConfig>} Optional, object containing the editing configuration for the theme, see Editing . Usually auto-generated by the ConfigGenerator. \"extent\": [<xmin>, <ymin>, <xmax>, <ymax>], Optional, override theme extent. In mapCrs . \"externalLayers\": [{ Optional, external layers to use as replacements for internal layers. \u2063 \"internalLayer\": \"<QGis_layer_name>\", Name of an internal layer, as contained in the QGIS project, to replace with the external layer. \u2063 \"name\": \"<external_layer_name>\" Name of the external layer, matching a ExternalLayerDefinition , see below . }], \"extraDxfParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to DXF export request. \"extraLegendParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetLegendGraphic request. \"extraPrintParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetPrint request (requires QGIS Server >= 3.32.0). \"extraPrintLayers\": [\"<layername>\", ...], Optional, extra list of layers to mark as internal print layers, i.e. which are omitted from the QWC LayerTree. \"featureReport\": { Optional, available feature report templates. \u2063 \"<LayerId>\": <TemplateCfg> WMS sublayer ID and associated template ID to pass to the documentService . See Reports . }, \"flags\": [\"<flag1>\", \"<flag2>\", ...], Optional, list of arbitrary flag names. The visibility of menu items, toolbar items and map buttons can be controlled based on the flags a theme declares. See Plugin Configuration . \"format\": \"<mimetype>\", Optional, the format to use for WMS GetMap. Defaults to image/png . \"hidden_in_ows_landing_page\": <true|false>, Optional, whether the service should be hidden from the OGC Service OWS landing page. Default: false \"layerTreeHiddenSublayers\": [\"<layername>\", ...], Optional: list of sublayer names to omit in layertree (but still displayed in map). \"lockedVisibilityPreset\": \"<name>\", Optional: lock styles of theme layers to those set in the specified visibility preset. \"mapCrs\": \"<EPSG code>\", Optional, map projection, defaults to project projection. \"mapTips\": <boolean>|null, Optional, per-theme setting whether map-tips are unavailable ( null ), disabled by default ( false ) or enabled by default ( true ). \"minSearchScaleDenom\": <number>, Optional, minimum scale to enforce when zooming to search results. Takes precedence over value in config.json . \"predefinedFilters\": [{<filter_config>}, ...], Optional: predefined filter configuration, see MapFilter . \"pluginData\": { Optional, data to pass to custom plugins. \u2063 \"<PluginName>\": [\"<plugin_data_resource_name>\"], A list of plugin resource names for the specified plugin. See below . \u2063 ... }, \"printGrid\": [ List of grid scale-dependent grid intervals to use when printing. If omitted, defaults to defaultPrintGrid . \u2063 {\"s\": <Scale1>, \"x\": <Width1>, \"y\": <Height1>}, Keep this list sorted in descending order by scale denominator. \u2063 {\"s\": <Scale2>, \"x\": <Width2>, \"y\": <Height2>} In this example, {x: <Width2>, y: <Height2>} will be used for <Scale1> > Scale >= <Scale2> . ], \"printLabelBlacklist\": [\"<LabelId>\", ...] Optional, list of composer label ids to not expose in the print dialog. \"printLabelConfig\": { Optional, configuration of the text input fields for print layout labels. \u2063 \"<LabelId>\": { \u2063 \u2063 \"defaultValue\": \"<value\">, Optional, default value. \u2063 \u2063 \"options\": [\"<value1>\",\"<value2>\",...], Optional, to display a ComboBox with the specified options instead of a free-input textfield. \u2063 \u2063 <textarea config> Optional, additional textarea properties , i.e. maxLength , rows , placeholder , ... }, \"printLabelForAttribution\": \"<ID>\", Optional, an ID of a print layout label to which the current attribution text (if any) will be written to when printing. \"printLabelForSearchResult\": \"<ID>\", Optional, an ID of a print layout label to which the current search result text (if any) will be written to when printing. \"printResolutions\": [<DPIs>], List of available print resolutions. If an empty list, resolutions are freely choseable. If omitted, defaults to defaultPrintResolutions . \"printScales\": [<Scale denominators>], List of denominators of allowed print scales. If omitted, defaults to defaultPrintScales . \"skipEmptyFeatureAttributes\": <boolean>, Optional, whether to skip empty attributes in the identify results. Default is false . \"themeInfoLinks\": { Optional, custom links to additional resources, shown as a menu in the theme selector in the theme switcher. \u2063 \"entries\": [\"<link_name>\", ...], List of theme info link names, see below . \u2063 \"title\": \"<Menu title>\", An arbitrary string shown as title of the menu. \u2063 \"titleMsgId\": \"<Menu title msgID>\" Alternative to title , a message ID, translated through the translation files. }, \"title\": \"<Custom title>\", Optional, override WMS title. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). If omitted, <project_basename>.png will be used if it exists below assets/img/mapthumbs , otherwise it is autogenerated via WMS GetMap. \"scales\": [<Scale denominators>], List of denominators of allowed map scales. If omitted, defaults to defaultScales . \"snapping\": {...}, Optional, snapping configuration, see Snapping . \"startupView\": \"<view>\", Optional: the view mode to initially display the theme in. Allowed values are 2d , 3d and 3d2d . Default is 2d . \"tiled\": <boolean>, Optional, use tiled WMS, defaults to false . \"tileSize\": [<tile_width>, <tile_height>] Optional, the WMS tile width and height. \"searchProviders\": [\"<Provider>\"], Optional, list of search providers, see Search . Defaults to defaultSearchProviders . \"visibilityPresetsBlacklist\": [\"<name>\", ...], Optional: list of visibility presets (QGIS layer themes) to exclude. You can use * as a wildcard character. \"watermark\": { Optional, configuration of watermark to add to raster export images. \u2063 \"backgroundcolor\": \"#RRGGBB\", Optional, frame background color. \u2063 \"framecolor\": \"#RRGGBB\", Optional, frame color. \u2063 \"framewidth\": <number>, Optional, frame width. \u2063 \"fontcolor\": \"#RRGGBB\", Optional, font color. \u2063 \"fontfamily\": \"<Font family>\", Optional, font family. \u2063 \"fontsize\": <number>, Optional, font size. \u2063 \"text\": \"<text>\", Arbitrary text. \u2063 \"texpadding\": <number> Optional, padding between text and frame, in points. }, \"wmsBasicAuth\": \"{ Optional, allows to authenticate to QGIS Server during themes.json generation. NOTE: these credentials will solely be used by yarn run themesConfig and won't be stored in themes.json . \u2063 \"username\": <username>, Optional: http basic authentication username. \u2063 \"password\": <password> Optional: http basic authentication password. }, \"wmsOnly\": <true|false>, Optional, whether the entry should only be configured as a WMS, and not as a theme. A bare minimum theme entry might look as follows: { \"id\": \"theme_id\", \"title\": \"My theme\", \"url\": \"/ows/my_theme\", \"mapCrs\": \"EPSG:3857\", \"backgroundLayers\": [{\"name\": \"background_layer_name\"}], \"searchProviders\" [\"coordinates\"] } Note: The theme identifier id can be freely defined and will appear in the viewer URL as the t query parameter. When using qwc-docker , the url can be specified as /ows/<relative_path_to_qgs> where relative_path_to_qgs is the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. In the above sample, the project file would be located at qwc-docker/volumes/qgs-resources/my_theme.qgs . External layers \u00b6 External layers can be used to selectively replace layers in a QGIS project with a layer from an external source, for instance in the case of a WMS layer embedded in a QGIS project, to avoid cascading WMS requests. They are handled transparently by QWC (they are positioned in the layer tree identically to the internal layer they replace), but the GetMap and GetFeatureInfo requests are sent directly to the specified WMS Service. Configuring external layers via Data Url The simplest way to define an external layer is to set the \"Data Url\" for a layer in QGIS (Layer Properties \u2192 QGIS Server \u2192 Data Url) to a string of these forms wms:<service_url>?<options>#<layername> wmts:<capabilities_url>?<options>#<layername> mvt:<tile_url>|<style_url> For instance: wms:http://wms.geo.admin.ch?tiled=false&infoFormat=application/geojson#ch.are.bauzonen wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml?crs=EPSG:2056#ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill mvt:https://kataster.bev.gv.at/tiles/kataster/{z}/{x}/{y}.pbf|https://kataster.bev.gv.at/styles/kataster/style_vermv.json Note: Support for WMTS/MVT in Data Url is currently only implemented when using qwc-docker . Note: You can pass parameters which control the behaviour of the WMS client in QGIS Server by prefexing the parameters with extwms. when the layer is requested by QGIS Server, i.e. when printing. Example to override the step width/heigth of the QGIS WMS Client: wms:http://wms.geo.admin.ch?extwms.stepWidth=4096&extwms.stepHeight=4096#ch.swisstopo.pixelkarte-farbe-pk1000.noscale Manually configuring external layers Rather than setting the \"Data Url\", you can provide a manual ExternalLayerDefinition as follows: Entry Description { \u2063 \"name\": \"<external_layer_name>\", The name of the external layer, as referenced in the theme definitions. \u2063 \"type\": \"<layer_type>\", Layer type, \"wms\" or \"wmts\" \u2063 \"url\": \"<wms_baseurl>\", The WMS URL or WMTS resource URL for the external layer. } For external WMS layers, the following additional parameters apply: Entry Description \"params\": { Parameters for the GetMap request. \u2063 \"LAYERS\": \"<wms_layername>,...\" , Comma-separated list of WMS layer names. \u2063 \"OPACITIES\": \"<0-255>,...\" Optional, if WMS server supports opacities. }, \"featureInfoUrl\": \"<wms_featureinfo_baseurl>\", Optional, base URL for WMS GetFeatureInfo, if different from url . \"legendUrl\": \"<wms_legendgraphic_baseurl>\" , Optional, base URL for WMS GetLegendGraphic, if different from url . \"queryLayers\": [\"<wms_featureinfo_layername>\", ...], Optional, list of GetFeatureInfo query layers, if different from params.LAYERS . \"infoFormats\": [\"<featureinfo_format>\", ...] List of GetFeatureInfo query formats which the WMS service supports. For external WMTS layers, the following additional parameters apply (you can use the qwc2/scripts/wmts_config_generator.py script to obtain these values): Entry Description \"tileMatrixSet\": \"<tile_matrix_set_name>\", The name of the tile matrix set. \"originX\": <origin_x>, The X origin of the tile matrix. \"originY\": <origin_y>, The Y origin of the tile matrix. \"projection\": \"EPSG:<code>\", The layer projection. \"resolutions\": [<resolution>, ...], The list of WMTS resolutions. \"tileSize\": [<tile_width>, <tile_height>] The tile width and height. Theme info links \u00b6 You can specify links to display in an info-menu next to the respective theme title in the theme switcher entries. The format of a ThemeInfoLinkDefinition is as follows: Entry Description \"name\": \"<link_name>\", The name of the link, as referenced in the theme definitions. \"title\": \"<link_title>\", The title for the link, as displayed in the info menu of the theme entry in the theme switcher. \"url\": \"<link>\", A link URL. \"target\": \"<link_target>\" The link target, i.e. _blank . Note : When using qwc-services , theme info links must be explicitly permitted by creating appropriate Theme info link resources and permissions in the qwc-admin-gui . Plugin data \u00b6 Plugin data is useful to provide a per-theme configuration for custom plugins. The format for a PluginDataReource is as follows: Entry Description \"name\": \"<resource_name>\", The name of the resource. \"...\": ..., Arbitrary additional fields. Note : When using qwc-services , theme plugin data entries must be explicitly permitted by creating appropriate Plugin data resources (as child of a respective Plugin resource) and permissions in the qwc-admin-gui . Background layers \u00b6 Background layers are handled completely client-side and do not appear in the layer tree. The format of the background layer definitions is as follows: Entry Description \"name\": \"<Name>\", The name of the background layer, used in the theme definitions. \"title\": \"<Title>\", The title of the background layer, as displayed in the background switcher. \"titleMsgId\": \"<Title msgID>\", Alternative to title , a message ID, translated through the translation files. \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"group\": \"<GroupId>\", Optional, a group ID string. Background layers with the same group ID will be grouped together in the background switcher. \"layerConfig\": {...}, Optional, extra OpenLayers layer configuration, according to the API of the specific layer type. \"minScale\": <min_scale>, Optional, minimum scale denominator from which to render the layer. \"maxScale\": <max_scale>, Optional, maximum scale denominator from which to render the layer. \"opacity\": <opacity>, Optional, the layer opacity (between 0 and 255 ). Default: 255 . \"sourceConfig\": {...}, Optional, extra OpenLayers source configuration, according to the API of the specific source type. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). Defaults to img/mapthumbs/default.jpg . \"type\": \"<Type>\", The background layer type, i.e. wms or wmts . <Layer params> Parameters according to the specified layer type. Some minimal examples of supported background layers: WMS : { \"name\": \"swissboundaries\", \"type\":\"wms\", \"url\":\"https://wms.geo.admin.ch\", \"projection:\":\"EPSG:2056\", \"params\": { \"LAYERS\": \"ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill\", \"VERSION\": \"1.3.0\", ... } } WMTS : { \"name\":\"bluemarble\", \"type\":\"wmts\", \"url\":\"http://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_ShadedRelief/default/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpeg\", \"bbox\":{ \"bounds\":[-180.0,-85.051129,180.0,85.051129], \"crs\":\"EPSG:4326\" }, \"originX\":-20037508.34278925, \"originY\":20037508.34278925, \"projection:\":\"EPSG:3857\", \"resolutions\":[156543.03390625,78271.516953125,39135.7584765625,19567.87923828125,9783.939619140625,4891.9698095703125,2445.9849047851562,1222.9924523925781], \"tileMatrixPrefix\":\"\", \"tileMatrixSet\":\"GoogleMapsCompatible_Level8\", \"tileSize\":[256,256] } Note : You can use the helper python script located at qwc2/scripts/wmts_config_generator.py to easily generate WMTS background layer configurations. OpenStreetMap : { \"name\":\"mapnik\", \"type\":\"osm\" } Bing : { \"name\": \"bing\", \"type\": \"bing\", \"apiKey\": \"<get from https://www.bingmapsportal.com/>\", \"imagerySet\": \"<Aerial|AerialWithLabelsOnDemand|RoadOnDemand|CanvasDark|OrdnanceSurvey>\" } XYZ : { \"name\": \"OpenCycleMap\", \"type\": \"xyz\", \"url\":\"https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\" } VectorTiles : (note: if the tile projection is not EPSG:3857 , you need to specifiy projection and tileGridConfig . If labels are cropped you could also set declutter to true ) { \"name\": \"mvt_example\", \"type\": \"mvt\", \"url\": \"http://foobar.baz/tileset/{z}/{x}/{y}.pbf\", \"style\": \"http://foobar.baz/style.json\", \"declutter\": false, \"projection\": \"EPSG:XXXX\", \"tileGridConfig\": { \"origin\": [<x>, <y>], \"resolutions\": [<resolutions>] } } Alternatively, WMS and WMTS background layers can also be defined specifiying a resource identifier. For example: { \"name\":\"ch.swisstopo.pixelkarte-grau\", \"title\":\"National map (gray)\", \"resource\": \"wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.pixelkarte-grau\", \"projection\": \"EPSG:2056\", \"thumbnail\":\"img/mapthumbs/default.jpg\" } A background layer definition can also be a group of layers, in the format { \"name\": \"<Name>\", \"title\": \"<Title>\", \"type\": \"group\", \"items\": [ { <BackgroundLayerDefinition> }, { <BackgroundLayerDefinition> }, ... ] } Instead of specifiying a full background layer definition in a group, you can also reference an existing one with \"ref\": \"<bg_layer_name>\" , and selectively override certain properties, such as minScale and maxScale : { ... \"items\": [ { \"ref\": \"<bg_layer_name>\", \"minScale\": <min_scale>, \"maxScale\": <max_scale> }, ... ] } Generating the themes configuration \u00b6 The file ultimately read by the QWC viewer is the themes.json configuration, which includes the contents of themesConfig.json completed with additional data obtained from the QGIS Project. When using qwc-docker , you can generate the themes from the qwc-admin-gui administration backend, running on http://localhost:8088/qwc_admin by default. Log in as admin user, then press the green Generate service configuration button. This will invoce the qwc-config-generator , which will generate mapViewerConfig.json located below qwc-docker/volumes/config/<tentant> . You can then inspect the generated themes.json at http://localhost:8088/themes.json . When using QWC as a standalone viewer, the themes.json can be generated by invoking yarn run themesconfig Note: this command is automatically invoked when starting the development server via yarn start . If working in an environment without node, using the equivalent command python3 qwc2/scripts/themesConfig.py If you want to manage multiple themesConfig.json files, you can specify which while should be processed by the theme generation script via the QWC2_THEMES_CONFIG environment variable. Storing projects in database \u00b6 When you are using qwc-docker , you can configure QWC to read the QGIS projects directly from the database. To do this, proceed as follows: Set up a PostgreSQL database connection in QGIS, checking the \"Allow saving/loading QGIS projects in the database\" option. Save the project to the configured database in QGIS using Project \u2192 Save To \u2192 PostgreSQL. Add a qgisprojects service definition for the used database to qwc-docker/pg_service.conf . Write a theme configuration entry in themesConfig.json using with \"url\": \"/ows/pg/<schema>/<projectname>\" , where schema and projectname as as specified when saving the project in QGIS. Using the QGZ project file format \u00b6 You can configure qwc-docker to look for qgz project files instead of qgs project files as follows: Set qgis_project_extension to .qgz in the toplevel config section of tenantConfig.json . If using qwc-docker , set QGIS_PROJECT_SUFFIX=qgz in the qwc-qgis-server environment in docker-compose.yml . Split categorized layers \u00b6 By default, symbol categories of a classified layer won't be exposed via WMS and hence in QWC. To expose symbol categories as separate layers via WMS, you can use the split_categorized QGIS Server plugin. To configure the plugin in qwc-docker , proceed as follows: Download the split_categorized , i.e. to volumes/qgis-server-plugins/split_categorized and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/split_categorized:/usr/share/qgis/python/plugins/split_categorized:ro ... For all layers that you want to split, create the variable convert_categorized_layer and set it to true . Generate the themes configuration . Note: ELSE symbol rules are currently unsupported, respectively will display the entire layer contents.","title":"Themes"},{"location":"configuration/ThemesConfiguration/#themes-configuration","text":"A theme corresponds to a QGIS project, published as WMS and served by QGIS Server. The basic steps for configuring a theme are: Create a QGIS project and deploy it to QGIS Server Writing the QWC theme configuration Generating the themes configuration","title":"Themes configuration"},{"location":"configuration/ThemesConfiguration/#creating-and-publishing-a-qgis-project","text":"The first step is to prepare a QGIS project for publishing. Besides the common tasks of adding and styling layers, the following table gives an overview of settings which influence how the theme is displayed in QWC: What Where Description Map projection Project Properties \u2192 CRS Map projection used in QWC. Service Metadata Project Properties \u2192 QGIS Server \u2192 Service capabilities Shown in the theme info dialog, invokable from the Layer Tree panel titlebar. Title, keywords Project Properties \u2192 QGIS Server \u2192 Service capabilities Theme title, displayed in the Theme Switcher, and keywords, useful for filtering. Map extent Project Properties \u2192 QGIS Server \u2192 WMS \u2192 Advertised extent The extent used as initial map extent when loading the theme, unless overridden in themesConfig.json . Queryable layers Project Properties \u2192 Data sources Mark layers as identifyable by the client. FeatureInfo geometry Project Properties \u2192 QGIS Server \u2192 WMS Capabilities \u2192 Add geometry to feature response Return feature geometries with the GetFeatureInfo request. Allows the client to highlight the selected features. Layer Display Field Vector Layer Properties \u2192 Display The field used in the identify results. Layer Map Tip Vector Layer Properties \u2192 Display The contents of the Map Tip shown when hovering over layers in the client, if displaying Map Tips is enabled in the Layer Tree. Layer Metadata Layer Properties \u2192 QGIS Server Shown in the client Layer Info dialog, invokable from the Layer Tree. Scale range Layer Properties \u2192 Rendering \u2192 Scale dependent visibility The scale range within which a layer is visible, useful to improve rendering performance. Initial visibility Layers Panel Initial visibility of layers and groups. Rendering order Layer Order Panel or Layers Panel Rendering order of the layers. If layer re-ordering is enabled in config.json , the order from the Layer Order Panel is ignored. Print layouts Layout manager The print layouts offered in the Print plugin. Print layout labels Layout manager Print layout labels with an ID will be exposed in the Print plugin. Note: a label ID starting with __ will not be exposed. Attribute form Vector Layer Properties \u2192 Attributes Form The configured attribute form will be displayed when editing in QWC. External layers Layer Properties \u2192 QGIS Server \u2192 Data URL Mark the layer as an external layer to avoid cascaded requests. See Configuring external layers . Then, store the project in the publishing directory of your QGIS Server instance. When using qwc-docker , store the project as *.qgs below qwc-docker/volumes/qgs-resources . Alternatively, when using qwc-docker , you can also store the project in a database in QGIS using Project \u2192 Save To \u2192 PostgreSQL (see Storing projects in database ).","title":"Creating and publishing a QGIS project"},{"location":"configuration/ThemesConfiguration/#ensuring-valid-datasources","text":"A common issue is that the project will reference datasources in locations which cannot be resolved when QGIS Server reads the project, in particular when running QGIS Server inside a docker container. To avoid such issues: Make sure that any file-based resources are located on the same level or below the level of the *.qgs project file. Remember to copy all resources along with the *.qgs project file to the server. Load any PostgreSQL datasource in QGIS using a service, and make sure the service definition exists both in the pg_service.conf on your host system as well as in the qwc_docker/pg_service.conf and qwc_docker/pg_service-write.conf which are mounted inside the docker containers. For instance, to use default qwc-docker database, use the qwc_geodb service and add the service definition to your host pg_service.conf as follows: [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable","title":"Ensuring valid datasources"},{"location":"configuration/ThemesConfiguration/#configuring-the-themes-in-themesconfigjson","text":"The next step is to configure the theme for QWC. There are two approaches: Automatic theme configuration (only when using qwc-docker ): Just copy the project file to the designated location and the qwc-config-generator will automatically generate a theme configuration using default parameters. Manual theme configuration : Manually configure a theme with the full set of configuration options.","title":"Configuring the themes in themesConfig.json "},{"location":"configuration/ThemesConfiguration/#automatic-theme-configuration","text":"When using qwc-docker , save your QGIS projects below qwc-docker/volumes/qgs-resources/scan . Adjust the default settings ( defaultBackgroundLayers , defaultSearchProviders , etc.) as desired in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Then generate the theme configuration . You can configure an automatically configured theme as default theme by setting defaultTheme in themesConfig.json to the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. For example to set qwc-docker/volumes/qgs-resources/scan/project.qgs as default theme, you'd write ... \"defaultTheme\": \"scan/project\" ... To use a custom thumbnail for an automatically configured theme, place a an image called <project_basename>.png in qwc-docker/volumes/qwc2/assets/img/mapthumbs . For example. if the project is called project_name.qgs , the name thumbnail image would be named project_name.png . Note: The auto-scan directory can be is controlled by qgis_projects_scan_base_dir in qwc-docker/volumes/config-in/<tentant>/themesConfig.json .","title":"Automatic theme configuration "},{"location":"configuration/ThemesConfiguration/#manual-theme-configuration","text":"The theme configuration file is located as follows: Standalone viewer: qwc-app/static/themesConfig.json qwc-docker : qwc-docker/volumes/config-in/<tentant>/themesConfig.json Note : when using qwc-docker , the themes configuration may also be embedded as themesConfig directly in qwc-docker/volumes/config-in/<tentant>/tenantConfig.json . The themesConfig.json file contains a list of themes, optionally organized in groups, as well as a list of background layers: { \"themes\": { \"items\": [ { <ThemeDefinition> }, ... ], \"groups\": [ { \"title\": <Group title>, \"items\": [{ <ThemeDefinition> }, ...], \"groups\": [ { <Group> }, ...] }, ... ], \"externalLayers\": [ { <ExternalLayerDefinition> }, ... ], \"themeInfoLinks\": [ { <ThemeInfoLinkDefinition> }, ... ], \"pluginData\": { \"<PluginName>\": [{ <PluginDataReource>}, ...], ... }, \"backgroundLayers\": [ { <BackgroundLayerDefinition> }, ... ], }, \"defaultBackgroundLayers\": \"<Default background layers, see theme definition below>\", \"defaultWMSVersion\": \"<Default WMS version, i.e. 1.3.0>\", \"defaultScales\": [<Scale denominators, see theme definition below>], \"defaultPrintScales\" [<Scale denominators, see theme definition below>], \"defaultPrintResolutions\": [<DPIs, see theme definition below>], \"defaultSearchProviders\": [<Search providers, see theme definition below>], \"defaultPrintGrid\": [<Print grid, see theme definition below>], \"defaultTheme\": \"<Default theme id>\" } Refer to External layers , Theme info links , Plugin data and Background layers for the format of the respective definitions. Refer to the sample themesConfig.json for a complete example. The format of the theme definitions is as follows: Entry Description \"id\": \"<id>\", Theme identificator. Autogenerated if not specified. \"url\": \"<WMS URL>\", The address of desired WMS served by QGIS Server. \"additionalMouseCrs\": [\"<EPSG code>\"], Optional, list of additional projections for displaying the mouse position. WGS84 and mapCrs are available by default. Additional projections definitions must be added to config.json . \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"backgroundLayers\": [{, Optional, list of available background layers, defaults to defaultBackgroundLayers . \u2063 \"name\": \"<Background layer name>\", Name of matching BackgroundLayerDefinition , see below . \u2063 \"overview\": <boolean>, Optional, set the layer as the overview map layer (i.e. this layer will be displayed in the overview map regardless of the background layer visible in the main map). \u2063 \"printLayer\": \"<layer name>\"\\|[<list>], Optional, a QGIS layer name or layer resource string to use as matching background layer when printing. Alternatively, a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<layer name>\"}] can be provided, ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. If omitted, no background is printed, unless layer is of type wms and printExternalLayers is true in the Print plugin configuration. See Printing . \u2063 \"visibility\": <boolean> Optional, initial visibility of the layer when theme is loaded. }], \"collapseLayerGroupsBelowLevel\": <level>, Optional, layer tree level below which to initially collapse groups. By default the tree is completely expanded. \"config\": { Optional, per-theme configuration entries which override the global entries in config.json , see Viewer Configuration . \u2063 \"<...>\": ..., Global config settings overridden in theme, see config.json . \u2063 \"desktop\": {...}, Desktop specific global and plugin configuration overridden in theme. \u2063 \"mobile\": {...}, Mobile specific global and plugin configuration overridden in theme. \u2063 \"plugins\": {...} Plugin configuration overridden in theme, See config.json . } \"defaultDisplayCrs\": \"<EPSG code>\", Optional, defines default measuring CRS for coordinates used in BottomBar and Measure, defaults to mapCrs/project projection. \"defaultPrintLayout\": \"<name>\", Optional, name of print layout to select by default. \"description\": \"<Description>\", Optional, an additional description to show below the theme title. \"editConfig\": {<editConfig>} Optional, object containing the editing configuration for the theme, see Editing . Usually auto-generated by the ConfigGenerator. \"extent\": [<xmin>, <ymin>, <xmax>, <ymax>], Optional, override theme extent. In mapCrs . \"externalLayers\": [{ Optional, external layers to use as replacements for internal layers. \u2063 \"internalLayer\": \"<QGis_layer_name>\", Name of an internal layer, as contained in the QGIS project, to replace with the external layer. \u2063 \"name\": \"<external_layer_name>\" Name of the external layer, matching a ExternalLayerDefinition , see below . }], \"extraDxfParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to DXF export request. \"extraLegendParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetLegendGraphic request. \"extraPrintParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetPrint request (requires QGIS Server >= 3.32.0). \"extraPrintLayers\": [\"<layername>\", ...], Optional, extra list of layers to mark as internal print layers, i.e. which are omitted from the QWC LayerTree. \"featureReport\": { Optional, available feature report templates. \u2063 \"<LayerId>\": <TemplateCfg> WMS sublayer ID and associated template ID to pass to the documentService . See Reports . }, \"flags\": [\"<flag1>\", \"<flag2>\", ...], Optional, list of arbitrary flag names. The visibility of menu items, toolbar items and map buttons can be controlled based on the flags a theme declares. See Plugin Configuration . \"format\": \"<mimetype>\", Optional, the format to use for WMS GetMap. Defaults to image/png . \"hidden_in_ows_landing_page\": <true|false>, Optional, whether the service should be hidden from the OGC Service OWS landing page. Default: false \"layerTreeHiddenSublayers\": [\"<layername>\", ...], Optional: list of sublayer names to omit in layertree (but still displayed in map). \"lockedVisibilityPreset\": \"<name>\", Optional: lock styles of theme layers to those set in the specified visibility preset. \"mapCrs\": \"<EPSG code>\", Optional, map projection, defaults to project projection. \"mapTips\": <boolean>|null, Optional, per-theme setting whether map-tips are unavailable ( null ), disabled by default ( false ) or enabled by default ( true ). \"minSearchScaleDenom\": <number>, Optional, minimum scale to enforce when zooming to search results. Takes precedence over value in config.json . \"predefinedFilters\": [{<filter_config>}, ...], Optional: predefined filter configuration, see MapFilter . \"pluginData\": { Optional, data to pass to custom plugins. \u2063 \"<PluginName>\": [\"<plugin_data_resource_name>\"], A list of plugin resource names for the specified plugin. See below . \u2063 ... }, \"printGrid\": [ List of grid scale-dependent grid intervals to use when printing. If omitted, defaults to defaultPrintGrid . \u2063 {\"s\": <Scale1>, \"x\": <Width1>, \"y\": <Height1>}, Keep this list sorted in descending order by scale denominator. \u2063 {\"s\": <Scale2>, \"x\": <Width2>, \"y\": <Height2>} In this example, {x: <Width2>, y: <Height2>} will be used for <Scale1> > Scale >= <Scale2> . ], \"printLabelBlacklist\": [\"<LabelId>\", ...] Optional, list of composer label ids to not expose in the print dialog. \"printLabelConfig\": { Optional, configuration of the text input fields for print layout labels. \u2063 \"<LabelId>\": { \u2063 \u2063 \"defaultValue\": \"<value\">, Optional, default value. \u2063 \u2063 \"options\": [\"<value1>\",\"<value2>\",...], Optional, to display a ComboBox with the specified options instead of a free-input textfield. \u2063 \u2063 <textarea config> Optional, additional textarea properties , i.e. maxLength , rows , placeholder , ... }, \"printLabelForAttribution\": \"<ID>\", Optional, an ID of a print layout label to which the current attribution text (if any) will be written to when printing. \"printLabelForSearchResult\": \"<ID>\", Optional, an ID of a print layout label to which the current search result text (if any) will be written to when printing. \"printResolutions\": [<DPIs>], List of available print resolutions. If an empty list, resolutions are freely choseable. If omitted, defaults to defaultPrintResolutions . \"printScales\": [<Scale denominators>], List of denominators of allowed print scales. If omitted, defaults to defaultPrintScales . \"skipEmptyFeatureAttributes\": <boolean>, Optional, whether to skip empty attributes in the identify results. Default is false . \"themeInfoLinks\": { Optional, custom links to additional resources, shown as a menu in the theme selector in the theme switcher. \u2063 \"entries\": [\"<link_name>\", ...], List of theme info link names, see below . \u2063 \"title\": \"<Menu title>\", An arbitrary string shown as title of the menu. \u2063 \"titleMsgId\": \"<Menu title msgID>\" Alternative to title , a message ID, translated through the translation files. }, \"title\": \"<Custom title>\", Optional, override WMS title. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). If omitted, <project_basename>.png will be used if it exists below assets/img/mapthumbs , otherwise it is autogenerated via WMS GetMap. \"scales\": [<Scale denominators>], List of denominators of allowed map scales. If omitted, defaults to defaultScales . \"snapping\": {...}, Optional, snapping configuration, see Snapping . \"startupView\": \"<view>\", Optional: the view mode to initially display the theme in. Allowed values are 2d , 3d and 3d2d . Default is 2d . \"tiled\": <boolean>, Optional, use tiled WMS, defaults to false . \"tileSize\": [<tile_width>, <tile_height>] Optional, the WMS tile width and height. \"searchProviders\": [\"<Provider>\"], Optional, list of search providers, see Search . Defaults to defaultSearchProviders . \"visibilityPresetsBlacklist\": [\"<name>\", ...], Optional: list of visibility presets (QGIS layer themes) to exclude. You can use * as a wildcard character. \"watermark\": { Optional, configuration of watermark to add to raster export images. \u2063 \"backgroundcolor\": \"#RRGGBB\", Optional, frame background color. \u2063 \"framecolor\": \"#RRGGBB\", Optional, frame color. \u2063 \"framewidth\": <number>, Optional, frame width. \u2063 \"fontcolor\": \"#RRGGBB\", Optional, font color. \u2063 \"fontfamily\": \"<Font family>\", Optional, font family. \u2063 \"fontsize\": <number>, Optional, font size. \u2063 \"text\": \"<text>\", Arbitrary text. \u2063 \"texpadding\": <number> Optional, padding between text and frame, in points. }, \"wmsBasicAuth\": \"{ Optional, allows to authenticate to QGIS Server during themes.json generation. NOTE: these credentials will solely be used by yarn run themesConfig and won't be stored in themes.json . \u2063 \"username\": <username>, Optional: http basic authentication username. \u2063 \"password\": <password> Optional: http basic authentication password. }, \"wmsOnly\": <true|false>, Optional, whether the entry should only be configured as a WMS, and not as a theme. A bare minimum theme entry might look as follows: { \"id\": \"theme_id\", \"title\": \"My theme\", \"url\": \"/ows/my_theme\", \"mapCrs\": \"EPSG:3857\", \"backgroundLayers\": [{\"name\": \"background_layer_name\"}], \"searchProviders\" [\"coordinates\"] } Note: The theme identifier id can be freely defined and will appear in the viewer URL as the t query parameter. When using qwc-docker , the url can be specified as /ows/<relative_path_to_qgs> where relative_path_to_qgs is the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. In the above sample, the project file would be located at qwc-docker/volumes/qgs-resources/my_theme.qgs .","title":"Manual theme configuration "},{"location":"configuration/ThemesConfiguration/#external-layers","text":"External layers can be used to selectively replace layers in a QGIS project with a layer from an external source, for instance in the case of a WMS layer embedded in a QGIS project, to avoid cascading WMS requests. They are handled transparently by QWC (they are positioned in the layer tree identically to the internal layer they replace), but the GetMap and GetFeatureInfo requests are sent directly to the specified WMS Service. Configuring external layers via Data Url The simplest way to define an external layer is to set the \"Data Url\" for a layer in QGIS (Layer Properties \u2192 QGIS Server \u2192 Data Url) to a string of these forms wms:<service_url>?<options>#<layername> wmts:<capabilities_url>?<options>#<layername> mvt:<tile_url>|<style_url> For instance: wms:http://wms.geo.admin.ch?tiled=false&infoFormat=application/geojson#ch.are.bauzonen wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml?crs=EPSG:2056#ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill mvt:https://kataster.bev.gv.at/tiles/kataster/{z}/{x}/{y}.pbf|https://kataster.bev.gv.at/styles/kataster/style_vermv.json Note: Support for WMTS/MVT in Data Url is currently only implemented when using qwc-docker . Note: You can pass parameters which control the behaviour of the WMS client in QGIS Server by prefexing the parameters with extwms. when the layer is requested by QGIS Server, i.e. when printing. Example to override the step width/heigth of the QGIS WMS Client: wms:http://wms.geo.admin.ch?extwms.stepWidth=4096&extwms.stepHeight=4096#ch.swisstopo.pixelkarte-farbe-pk1000.noscale Manually configuring external layers Rather than setting the \"Data Url\", you can provide a manual ExternalLayerDefinition as follows: Entry Description { \u2063 \"name\": \"<external_layer_name>\", The name of the external layer, as referenced in the theme definitions. \u2063 \"type\": \"<layer_type>\", Layer type, \"wms\" or \"wmts\" \u2063 \"url\": \"<wms_baseurl>\", The WMS URL or WMTS resource URL for the external layer. } For external WMS layers, the following additional parameters apply: Entry Description \"params\": { Parameters for the GetMap request. \u2063 \"LAYERS\": \"<wms_layername>,...\" , Comma-separated list of WMS layer names. \u2063 \"OPACITIES\": \"<0-255>,...\" Optional, if WMS server supports opacities. }, \"featureInfoUrl\": \"<wms_featureinfo_baseurl>\", Optional, base URL for WMS GetFeatureInfo, if different from url . \"legendUrl\": \"<wms_legendgraphic_baseurl>\" , Optional, base URL for WMS GetLegendGraphic, if different from url . \"queryLayers\": [\"<wms_featureinfo_layername>\", ...], Optional, list of GetFeatureInfo query layers, if different from params.LAYERS . \"infoFormats\": [\"<featureinfo_format>\", ...] List of GetFeatureInfo query formats which the WMS service supports. For external WMTS layers, the following additional parameters apply (you can use the qwc2/scripts/wmts_config_generator.py script to obtain these values): Entry Description \"tileMatrixSet\": \"<tile_matrix_set_name>\", The name of the tile matrix set. \"originX\": <origin_x>, The X origin of the tile matrix. \"originY\": <origin_y>, The Y origin of the tile matrix. \"projection\": \"EPSG:<code>\", The layer projection. \"resolutions\": [<resolution>, ...], The list of WMTS resolutions. \"tileSize\": [<tile_width>, <tile_height>] The tile width and height.","title":"External layers "},{"location":"configuration/ThemesConfiguration/#theme-info-links","text":"You can specify links to display in an info-menu next to the respective theme title in the theme switcher entries. The format of a ThemeInfoLinkDefinition is as follows: Entry Description \"name\": \"<link_name>\", The name of the link, as referenced in the theme definitions. \"title\": \"<link_title>\", The title for the link, as displayed in the info menu of the theme entry in the theme switcher. \"url\": \"<link>\", A link URL. \"target\": \"<link_target>\" The link target, i.e. _blank . Note : When using qwc-services , theme info links must be explicitly permitted by creating appropriate Theme info link resources and permissions in the qwc-admin-gui .","title":"Theme info links "},{"location":"configuration/ThemesConfiguration/#plugin-data","text":"Plugin data is useful to provide a per-theme configuration for custom plugins. The format for a PluginDataReource is as follows: Entry Description \"name\": \"<resource_name>\", The name of the resource. \"...\": ..., Arbitrary additional fields. Note : When using qwc-services , theme plugin data entries must be explicitly permitted by creating appropriate Plugin data resources (as child of a respective Plugin resource) and permissions in the qwc-admin-gui .","title":"Plugin data "},{"location":"configuration/ThemesConfiguration/#background-layers","text":"Background layers are handled completely client-side and do not appear in the layer tree. The format of the background layer definitions is as follows: Entry Description \"name\": \"<Name>\", The name of the background layer, used in the theme definitions. \"title\": \"<Title>\", The title of the background layer, as displayed in the background switcher. \"titleMsgId\": \"<Title msgID>\", Alternative to title , a message ID, translated through the translation files. \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"group\": \"<GroupId>\", Optional, a group ID string. Background layers with the same group ID will be grouped together in the background switcher. \"layerConfig\": {...}, Optional, extra OpenLayers layer configuration, according to the API of the specific layer type. \"minScale\": <min_scale>, Optional, minimum scale denominator from which to render the layer. \"maxScale\": <max_scale>, Optional, maximum scale denominator from which to render the layer. \"opacity\": <opacity>, Optional, the layer opacity (between 0 and 255 ). Default: 255 . \"sourceConfig\": {...}, Optional, extra OpenLayers source configuration, according to the API of the specific source type. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). Defaults to img/mapthumbs/default.jpg . \"type\": \"<Type>\", The background layer type, i.e. wms or wmts . <Layer params> Parameters according to the specified layer type. Some minimal examples of supported background layers: WMS : { \"name\": \"swissboundaries\", \"type\":\"wms\", \"url\":\"https://wms.geo.admin.ch\", \"projection:\":\"EPSG:2056\", \"params\": { \"LAYERS\": \"ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill\", \"VERSION\": \"1.3.0\", ... } } WMTS : { \"name\":\"bluemarble\", \"type\":\"wmts\", \"url\":\"http://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_ShadedRelief/default/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpeg\", \"bbox\":{ \"bounds\":[-180.0,-85.051129,180.0,85.051129], \"crs\":\"EPSG:4326\" }, \"originX\":-20037508.34278925, \"originY\":20037508.34278925, \"projection:\":\"EPSG:3857\", \"resolutions\":[156543.03390625,78271.516953125,39135.7584765625,19567.87923828125,9783.939619140625,4891.9698095703125,2445.9849047851562,1222.9924523925781], \"tileMatrixPrefix\":\"\", \"tileMatrixSet\":\"GoogleMapsCompatible_Level8\", \"tileSize\":[256,256] } Note : You can use the helper python script located at qwc2/scripts/wmts_config_generator.py to easily generate WMTS background layer configurations. OpenStreetMap : { \"name\":\"mapnik\", \"type\":\"osm\" } Bing : { \"name\": \"bing\", \"type\": \"bing\", \"apiKey\": \"<get from https://www.bingmapsportal.com/>\", \"imagerySet\": \"<Aerial|AerialWithLabelsOnDemand|RoadOnDemand|CanvasDark|OrdnanceSurvey>\" } XYZ : { \"name\": \"OpenCycleMap\", \"type\": \"xyz\", \"url\":\"https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\" } VectorTiles : (note: if the tile projection is not EPSG:3857 , you need to specifiy projection and tileGridConfig . If labels are cropped you could also set declutter to true ) { \"name\": \"mvt_example\", \"type\": \"mvt\", \"url\": \"http://foobar.baz/tileset/{z}/{x}/{y}.pbf\", \"style\": \"http://foobar.baz/style.json\", \"declutter\": false, \"projection\": \"EPSG:XXXX\", \"tileGridConfig\": { \"origin\": [<x>, <y>], \"resolutions\": [<resolutions>] } } Alternatively, WMS and WMTS background layers can also be defined specifiying a resource identifier. For example: { \"name\":\"ch.swisstopo.pixelkarte-grau\", \"title\":\"National map (gray)\", \"resource\": \"wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.pixelkarte-grau\", \"projection\": \"EPSG:2056\", \"thumbnail\":\"img/mapthumbs/default.jpg\" } A background layer definition can also be a group of layers, in the format { \"name\": \"<Name>\", \"title\": \"<Title>\", \"type\": \"group\", \"items\": [ { <BackgroundLayerDefinition> }, { <BackgroundLayerDefinition> }, ... ] } Instead of specifiying a full background layer definition in a group, you can also reference an existing one with \"ref\": \"<bg_layer_name>\" , and selectively override certain properties, such as minScale and maxScale : { ... \"items\": [ { \"ref\": \"<bg_layer_name>\", \"minScale\": <min_scale>, \"maxScale\": <max_scale> }, ... ] }","title":"Background layers "},{"location":"configuration/ThemesConfiguration/#generating-the-themes-configuration","text":"The file ultimately read by the QWC viewer is the themes.json configuration, which includes the contents of themesConfig.json completed with additional data obtained from the QGIS Project. When using qwc-docker , you can generate the themes from the qwc-admin-gui administration backend, running on http://localhost:8088/qwc_admin by default. Log in as admin user, then press the green Generate service configuration button. This will invoce the qwc-config-generator , which will generate mapViewerConfig.json located below qwc-docker/volumes/config/<tentant> . You can then inspect the generated themes.json at http://localhost:8088/themes.json . When using QWC as a standalone viewer, the themes.json can be generated by invoking yarn run themesconfig Note: this command is automatically invoked when starting the development server via yarn start . If working in an environment without node, using the equivalent command python3 qwc2/scripts/themesConfig.py If you want to manage multiple themesConfig.json files, you can specify which while should be processed by the theme generation script via the QWC2_THEMES_CONFIG environment variable.","title":"Generating the themes configuration "},{"location":"configuration/ThemesConfiguration/#storing-projects-in-database","text":"When you are using qwc-docker , you can configure QWC to read the QGIS projects directly from the database. To do this, proceed as follows: Set up a PostgreSQL database connection in QGIS, checking the \"Allow saving/loading QGIS projects in the database\" option. Save the project to the configured database in QGIS using Project \u2192 Save To \u2192 PostgreSQL. Add a qgisprojects service definition for the used database to qwc-docker/pg_service.conf . Write a theme configuration entry in themesConfig.json using with \"url\": \"/ows/pg/<schema>/<projectname>\" , where schema and projectname as as specified when saving the project in QGIS.","title":"Storing projects in database "},{"location":"configuration/ThemesConfiguration/#using-the-qgz-project-file-format","text":"You can configure qwc-docker to look for qgz project files instead of qgs project files as follows: Set qgis_project_extension to .qgz in the toplevel config section of tenantConfig.json . If using qwc-docker , set QGIS_PROJECT_SUFFIX=qgz in the qwc-qgis-server environment in docker-compose.yml .","title":"Using the QGZ project file format "},{"location":"configuration/ThemesConfiguration/#split-categorized-layers","text":"By default, symbol categories of a classified layer won't be exposed via WMS and hence in QWC. To expose symbol categories as separate layers via WMS, you can use the split_categorized QGIS Server plugin. To configure the plugin in qwc-docker , proceed as follows: Download the split_categorized , i.e. to volumes/qgis-server-plugins/split_categorized and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/split_categorized:/usr/share/qgis/python/plugins/split_categorized:ro ... For all layers that you want to split, create the variable convert_categorized_layer and set it to true . Generate the themes configuration . Note: ELSE symbol rules are currently unsupported, respectively will display the entire layer contents.","title":"Split categorized layers"},{"location":"configuration/ViewerConfiguration/","text":"QWC Viewer Configuration \u00b6 This chapter describes how to customize the QWC viewer. First of all, it is important to keep in mind that the QWC viewer is designed to be a modular and highly customizeable application. Configuration falls into three categories: Load-time configuration : configuration applied when the application is loaded. Customizing the assets : specify additional search providers, customize the color schemes, etc... Compiling a custom viewer : configure which components which are built into the application, add own plugins, etc... The QWC stock application (and the qwc-map-viewer docker image) serve as a good starting point, and for simple viewers the load-time configuration options are often sufficient to avoid the need of building a customized application. Load-time configuration config.json \u00b6 The load-time configuration config.json configuration file contains global viewer settings as well as the viewer plugin configuration for mobile and desktop devices. It is located as follows: qwc-docker : qwc-docker/volumes/config-in/<tentant>/config.json Standalone viewer: qwc-app/static/config.json Refer to the sample config.json for a concrete example. Global settings \u00b6 All settings are optional, with fallback to the default values as documented. Setting Description allowFractionalZoom Whether to allow arbitrary scales for viewing the map. Default: false . assetsPath Relative path to the assets folder. Default: \"assets\" . bearingFormat Format of bearing measurement. Default value is \"bearing\" which shows angle in degrees, minutes and seconds with N/S prefix and W/E suffix, \"azimuth\" is shown as 0\u00b0 to 360\u00b0, \"azimuth180\" is shown as -180\u00b0 to +180\u00b0, \"bearingEW\" is shown as 0\u00b0 to 180\u00b0 with E/W suffix. bearingPrecision Defines number of decimals for bearing angle shown in degrees. Default: 0 . defaultColorScheme The color scheme to use. See Color schemes for details. Default: \"default\" . defaultFeatureStyle The default style to use for selection geometries and other unstyled features. Default: see qwc2/utils/FeatureStyles.js . defaultInteractionStyle The default style to use on geometries to measure, snap or edit. Default: see qwc2/utils/FeatureStyles.js . defaultMarkerStyle The default style to use as marker icon. Default: see qwc2/utils/FeatureStyles.js . editingAddLinkAnchors Whether to automatically insert link anchors in text values when editing. Default: true , editServiceCaptchaSiteKey ReCAPTCHA public site key for public editing, see ReCAPTCHA validation . editTextNullValue A text value which represents NULL when editing. Default: \"\" . geodesicMeasurements Whether to perform measurements on the geoid. Default: false . loadTranslationOverrides Whether to attempt to load tanslation overrides, see Translations . Default: false . localeAwareNumbers Whether to use locale aware numbers throughout. Default: false . measurementPrecision Number of decimal digits to display in measurements. Default: 2 . omitUrlParameterUpdates Whether to omit updating the URL parameters. Default: false . projections A list of map projections to register, in the format {\"code\": \"<code>\", \"proj\": \"<proj4def>\", \"label\": \"<label>\", \"precision\": <decimals>} . By default, EPSG:3857 and EPSG:4326 are registered. qgisServerVersion The QGIS Server major version in use. Default: 3 . startupTask Task to automatically activate on application start, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . storeAllLayersInPermalink Whether to store the full layertree in the permalink data, rather than only local (i.e. redlining) layers. If false , remote layers are re-queried from the respective services, if true , they are statically reloaded (meaning restored layers may be outdated compared to current service capabilities). Default: false . tilePreloadLevels For tiled layers, load low-resolution tiles up to preload levels. 0 means no preloading. Default: 0 . translationsPath Relative path to the translations folder. Default: \"translations\" . trustWmsCapabilityURLs Whether to trust the GetMap etc. URLs reported in WMS service capabilities. If not true , the protocol, host and pathname portion of the URLs are inherited from the called capabilities URL. Default: false . urlPositionCrs The CRS used to encode the current map extent coordinates in the URL. Default: the current map projection. urlPositionFormat How to encode the current map extent in the URL, either \"centerAndZoom\" or \"extent\" . See URL parameters for details. Default: \"extent\" . urlRegEx A JSON-escaped regular expression used to match URLs in feature attribute values. Default: see qwc2/utils/MiscUtils.js . wmsHidpi Whether to honour the device pixel ratio for WMS GetMap requests. Default: true . wmsMaxGetUrlLength URL length limit before switching to a POST request for GetMap and GetFeatureInfo. Default: 2048 . wmsWktPrecision Precision (as number of decimals) of WKT geometries passed in WMS requests. Default: 4 . Global settings, overridable per theme \u00b6 The following options can be specified globally, and also overriden per theme, see themesConfig.json . All settings are optional, with fallback to the default values as documented. Setting Description allowAddingOtherThemes Whether to allow adding another theme to a currently loaded theme. Default: false . allowLayerTreeSeparators Allows users to add separator items in a flat layer tree. Default: false . allowRemovingThemeLayers Whether to allow removing any theme layers from the layer tree. Default: false . allowReorderingLayers Whether to allow re-ordering layers in the layer tree. Default: false . disableImportingLocalLayers Whether to hide the option to import local layers from the layer tree. Default: false . flattenLayerTreeGroups Whether to display a flat layer tree, omitting the groups. Default: false . globallyDisableDetachableDialogs Whether to globally disable the detachable feature of popup dialogs. Default: false . globallyDisableDockableDialogs Whether to globally disable the dockable feature of popup dialogs. Default: false . globallyDisableMaximizeableDialogs Whether to globally disable the maximizeable feature of popup dialogs. Default: false . identifyTool The name of the identify plugin to use as default identify tool. If set to an empty string, no identify tool will be active by default. Default: \"Identify\" . importLayerUrlPresets A list of predefined URLs from which the user can choose when importing layers from the layer tree. Entries must be strings or objects of the format {\"label\": \"<Label>\", \"value\": \"<URL>\"} . preserveBackgroundOnThemeSwitch Whether to preserve the current background layer when switching theme, if possible. Default: false . preserveExtentOnThemeSwitch Whether to preserve the current map extent when switching theme, if possible (see below). Default: false . preserveNonThemeLayersOnThemeSwitch Whether to preserve non-theme layers when switching theme. Default: false . preventSplittingGroupsWhenReordering Whether to prevent splitting sibling groups or the group itself when reordering items. Default: false . searchFilterRegions List of predefined search filter regions, see Search filtering . searchThemeLayers Whether to allow searching for theme layers from the global search field. Default: false . searchThemes Whether to allow searching for themes from the global search field. Default: false . startupTask Task to automatically start when switching to the theme, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . Takes precedence over the global startupTask . Note that the task is activated whenever switching to the theme, not only on application start. Note: The layer tree supports re-ordering layers via drag-and-drop if allowReorderingLayers = true and either preventSplittingGroupsWhenReordering = true or flattenLayerTreeGroups = true . If preserveExtentOnThemeSwitch = true , the current extent is preserved if it is within the new theme extent and if the current theme map projection is equal to the new theme projection. If preserveExtentOnThemeSwitch = \"force\" , the current extent is preserved regardless of whether it is within the new theme extent, but the current and new theme map projections must still match. Separate mobile / desktop global settings \u00b6 You can specify the global settings separately for mobile and desktop by setting these in a corresponding toplevel section, i.e.: { \"<prop>\": \"<value>\", // This property applies for both mobile and desktop ... \"mobile\": { \"<prop>: \"<value>\", // This property applies only for mobile ... }, \"desktop\": { \"<prop>: \"<value>\", // This property applies only for desktop ... } } You can also specify separate mobile and desktop sections in the config block of a theme item. URLs of external services \u00b6 Some plugins require external services (typically part of the qwc-services ecosystem). When using the qwc-docker , these configuration entries will be automatically injected into the config.json for enabled services. Setting Description authServiceUrl Typically the URL of a QWC authentication service like qwc-db-auth . editServiceUrl Typically the URL of the qwc-data-service . elevationServiceUrl Typically the URL of the qwc-elevation-service . documentService Typically the URL of the qwc-document-service . mapInfoService Typically the URL of the qwc-map-info-service . permalinkServiceUrl Typically the URL of the qwc-permalink-service . searchServiceUrl Typically the URL of the qwc-fulltext-search-service . Plugin configuration \u00b6 The plugin configuration is entered as follows: \"plugins\": { \"common\": [{<PluginConfig>}, ...], \"mobile\": [{<PluginConfig>}, ...], \"desktop\": [{<PluginConfig>}, ...] } The final mobile and desktop configurations will be computed by merging the common configuration with the respective specific configuration. Each <PluginConfig> block is of the format Setting Description { \u2063 \"name\": \"<name>\", The plugin name. \u2063 \"cfg\": {...}, The plugin configuration options, see plugin reference . \u2063 \"mapClickAction\": <\"identify\"|\"unset\"|null>, Optional: in case the plugin activates a viewer task, determines whether a click in the map will result in the identify tool being invoked, the task being unset, or whether no particular action should be performed (default). } Any plugin configuration option can be overridden per theme in the theme item config section as follows: { \"plugins\": { \"<plugin_name>\": { \"<cfg_prop>\": <value>, ... }, ... }, \"mobile\": { \"plugins: {...}, // Plugin config props applied only for mobile ... }, \"desktop\": { \"plugins: {...}, // Plugin config props applied only for desktop ... } } In general, the procedure for enabling a plugin is: Make sure the plugin is compiled into the application (see Build-time configuration ). In the plugins section of config.json , below common (or mobile and/or desktop ), add an entry { \"name\": \"<Plugin name>\", \"cfg\": { <Plugin configuration props> } } For most plugins (i.e. those which launch as an explicit task in the viewer), add entries in menuItems and/or toolbarItems in the TopBar configuration. The format of these entires is as follows: Setting Description { \u2063 \"key\": \"<key>\", The name of a plugin, i.e. LayerTree . The label for the entry will be looked up from the translations using the appmenu.items.<key> message identifier (see Translations . \u2063 \"icon\": \"<icon>\", The icon of the entry, either a built-in icon name (see below), or :/<path_to_asset> containing the path relative to assetsPath of an asset image. \u2063 \"themeBlacklist\": [\"<themename>\", ...], Optional, allows specifying a blacklist of theme names or titles for which the entry should not be visible. \u2063 \"themeWhitelist\": [\"<themename>\", ...], Optional, allows specifying a whitelist of theme names or titles for which the entry should be visible. \u2063 \"themeFlagBlacklist\": [\"<flag1>\", ...], Optional, allows specifying a blacklist of theme flags for which the entry should not be visible. \u2063 \"themeFlagWhitelist\": [\"<flag1>\", ...], Optional, allows specifying a whitelist of theme flags for which the entry should be visible. \u2063 \"mode\": \"<mode>\", Optional, depending on the plugin, a mode can be configured to launch the plugin directly in a specific mode. For instance, the Measure plugin supports specifying the measurement mode ( Point , LineString , Polygon ). \u2063 \"requireAuth\": \"<true|false>\", Optional, the entry is only visible when user is logged-in. \u2063 \"shortcut\": \"<shortcut>\" Optional, keyboard shortcut which triggers the entry, i.e. \"alt+shift+a\" . } Note: The built-in icons are those located in qwc2/icons and in qwc-app/icons . The built-in icon names are the respective file names, without .svg extension. Opening external websites As a special case, entries for opening external URLs can be defined in the menuItems and/or toolbarItems in the TopBar configuration as follows: Setting Description { \u2063 \"key\": \"<key>\", An arbitrary key (not used by existing plugins), used to lookup the label for the entry from the translations (as appmenu.items.<key> ). \u2063 \"title\": \"<key>\", Optional: Title to use insead of appmenu.items.<key> . \u2063 \"icon\": \"<icon>\", As above. \u2063 \"url\": \"<url>\", The URL to open. Can contain as placeholders the keys listed in URL Parameters , encolsed in $ (i.e. $e$ for the extent). In addition, the placeholders $x$ and $y$ for the individual map center coordinates are also supported. \u2063 \"target\": \"<target>\" The target where to open the URL, if empty, _blank is assumed. Can be iframe or :iframedialog:<windowname>:<options> (see below) to open the link in a iframe window inside QWC. } The format of the :iframedialog:<windowname>:<options> target is as follows: windowname is used to identify the name of the iframe window within which the link will be opened, i.e. can be used to make multiple external URLs re-use the same iframe window. options is a sequence of <key>=<value> , separated by : , with the following options: dockable=<false|left|right|top|bottom> : whether the window is dockable, and to which screen edge docked=<true|false> : whether the window is docked by default splitScreenWhenDocked=<true|false> : whether to split the screen when docked h=<h> : the initial window height w=<w> : the initial window width zIndex=<zIndex> : the stacking zIndex for the dialog icon=<icon> : the name of a build-in icon (see qwc2/icons ) to display in the window title bar (overrides the icon set in the menuItems / tollbarItems entry) title=<title> : the title to display in the window title bar (overrides the title set in the menuItems / tollbarItems entry) print=<true|false> : whether to display a print icon in the window title bar Customizing the viewer assets \u00b6 The viewer assets are located as follows: Standalone viewer: qwc-app/static/assets qwc-docker : qwc-docker/volumes/qwc2/assets The default structure of the assets folder is as follows: Path Description \u2514\u2500 assets/ See Viewer assets \u251c\u2500 css/ Additional style sheets, must be included by index.html . \u2502 \u251c\u2500 colorschemes.css Additional color schemes. \u2502 \u2514\u2500 qwc2.css Additional style definitions. \u251c\u2500 img/ Application logo etc. \u2502 \u251c\u2500 genmapthumbs/ Autogenerated map thumbnails. \u2502 \u2514\u2500 mapthumbs/ Map thumbnails. \u251c\u2500 templates/ \u2502 \u2514\u2500 legendprint.html HTML template for the legend print. \u251c\u2500 help.html Help dialog fragment, see Help dialog . \u2514\u2500 searchProviders.js Additional search providers, see Search providers . Furthermore, the application entry point index.html is located as follows: Standalone viewer: qwc-app/index.html qwc-docker : qwc-docker/volumes/config-in/<tenant>/index.html This file noteably specifies the application title, and references many of the assets located below the assets folder. Customizing the color scheme \u00b6 The QWC color scheme is fully customizeable via CSS. A default color-scheme is built-in (see DefaultColorScheme.css ). To define a custom color scheme, copy the default color scheme to assets/css/colorschemes.css , add an appropriate class name to the :root selector, and modify the colors as desided. Two additional examples ( highcontrast and dark ) are provided by default in assets/css/colorschemes.css . You can then modify the color scheme which is applied by default by setting defaultColorScheme in config.json to an appropriate class name (i.e. highcontrast or dark ). To change the color scheme at runtime in QWC, make sure the Settings plugin is enabled, and in the Settings plugin configuration block in config.json list the color schemes below colorSchemes . Refer to the sample config.json . Note : When changing the color scheme via Settings dialog in QWC, the picked color scheme is stored in the browser local storage, and this setting will override the defaultColorScheme setting from config.json . Specifying the style URL-parameter (see URL parameters ) will take precedence over all other settings. Note: Make sure that assets/css/colorschemes.css is included in index.html . Overriding component styles \u00b6 Occasionally, it may be desired to customize the styling on the QWC components. The recommended approach is to add the corresponding style overrides to assets/css/qwc2.css . Note: Make sure that assets/css/qwc2.css is included in index.html . Customizing the application logo \u00b6 The application logo in its various shapes and sizes are located below assets/img/ . In particular, the logo.svg and logo-mobile.svg images are displayed as in the top left corner of QWC in desktop and mobile mode respectively. If you'd like to use another format than SVG (while keeping logo and logo-mobile as base name), you can change logoFormat in the TopBar configuration block in config.json . Providing custom map thumbnails \u00b6 By default, when generating the themes configuration (see theme configuration ), a default map thumbnail is generating via WMS GetMap , and placed below assets/img/genmapthumbs . You can provide your own thumbnail images instead by placing the corresponding images below assets/img/mapthumbs and referencing these as thumbnail in you theme configuration block in themesConig.json . Personalizing the help dialog \u00b6 You can personalize the help dialog by providing a plain HTML document fragment in static/assets/help.html and configuring the Help plugin accordingly in config.json : { \"name\": \"Help\", \"cfg\": { \"bodyContentsFragmentUrl\": \"assets/help.html\" } } Note: $VERSION$ can be used in the HTML document fragment as a placeholder for the application build date. Personalizing the legend print template \u00b6 The legend print template assets/templates/legendprint.html is used when printing the map legend from the layer tree. The only requirement for this template is that is must contain a <div id=\"legendcontainer\"></div> element. Building a custom viewer \u00b6 The QWC stock application, hosted at https://github.com/qgis/qwc2/ , can serve as a base for building a custom application, and is published as an NPM package . The LTS branch is published on NPM as qwc2-lts . An example of a custom application is hosted at https://github.com/qgis/qwc2-demo-app . To build a custom viewer, the first step is cloning the demo application: git clone https://github.com/qgis/qwc2-demo-app.git qwc-app The typical layout of a QWC app source tree is as follows: Path Description \u251c\u2500 static/ \u2502 \u251c\u2500 assets/ See Viewer assets \u2502 \u251c\u2500 translations/ Translation files. \u2502 \u251c\u2500 config.json Runtime configuration file. \u251c\u2500 themesConfig.json Themes configuration, edited manually. \u2502 \u2514\u2500 themes.json Generated theme configuration, autogenerated from themesConfig.json . \u251c\u2500 js/ \u2502 \u251c\u2500 app.jsx Entry point of the ReactJS application. \u2502 \u251c\u2500 appConfig.js Build-time configuration file. \u2502 \u251c\u2500 Help.jsx Built-in component of custom Help dialog, see Help dialog . \u2502 \u2514\u2500 SearchProviders.js Built-in custom search providers, see Search providers . \u251c\u2500 icons/ Application icons. \u251c\u2500 index.html Entry point. \u251c\u2500 package.json NodeJS configuration file. \u2514\u2500 webpack.config.js Webpack configuration. Application build-time configuration \u00b6 The js/appConfig.js is the the principal build-time configuation file, and defines: The default application locale, built into the application. This locale is used if no available locale matches the browser locale. Which plugins are built into the application. Plugins left out here will be completely omitted when compiling the application bundle, and will hence also reduce the size of the bundle. Various hook functions, as documented in the sample sample js/appConfig.js . Refer to the sample appConfig.js for a concrete example. Overriding icons \u00b6 The common application icons are located in qwc2/icons . They can be overridden by creating an icon with the same filename in the application specific icons folder. Note : The icons in the icons folder are compiled into an icon font. The icons need to be black content on transparent background, and all drawings (including texts) must be converted to paths for the icons to render correctly. Compiling an application bundle \u00b6 After tweaking the source files as desired, compile a deployable application bundle for production running yarn run prod When using qwc-docker , copy the contents of the qwc-app/prod folder to qwc-docker/volumes/qwc2 and edit the qwc-docker/docker-compose.yml to use qwc-map-viewer-base with your custom build: qwc-map-viewer: image: sourcepole/qwc-map-viewer-base:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qwc2:/qwc2:ro Keeping the QWC application up to date \u00b6 To update the base QWC components, just update the version of the qwc2 dependency in package.json . The QWC Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Viewer"},{"location":"configuration/ViewerConfiguration/#qwc-viewer-configuration","text":"This chapter describes how to customize the QWC viewer. First of all, it is important to keep in mind that the QWC viewer is designed to be a modular and highly customizeable application. Configuration falls into three categories: Load-time configuration : configuration applied when the application is loaded. Customizing the assets : specify additional search providers, customize the color schemes, etc... Compiling a custom viewer : configure which components which are built into the application, add own plugins, etc... The QWC stock application (and the qwc-map-viewer docker image) serve as a good starting point, and for simple viewers the load-time configuration options are often sufficient to avoid the need of building a customized application.","title":"QWC Viewer Configuration"},{"location":"configuration/ViewerConfiguration/#load-time-configuration-configjson","text":"The load-time configuration config.json configuration file contains global viewer settings as well as the viewer plugin configuration for mobile and desktop devices. It is located as follows: qwc-docker : qwc-docker/volumes/config-in/<tentant>/config.json Standalone viewer: qwc-app/static/config.json Refer to the sample config.json for a concrete example.","title":"Load-time configuration config.json"},{"location":"configuration/ViewerConfiguration/#global-settings","text":"All settings are optional, with fallback to the default values as documented. Setting Description allowFractionalZoom Whether to allow arbitrary scales for viewing the map. Default: false . assetsPath Relative path to the assets folder. Default: \"assets\" . bearingFormat Format of bearing measurement. Default value is \"bearing\" which shows angle in degrees, minutes and seconds with N/S prefix and W/E suffix, \"azimuth\" is shown as 0\u00b0 to 360\u00b0, \"azimuth180\" is shown as -180\u00b0 to +180\u00b0, \"bearingEW\" is shown as 0\u00b0 to 180\u00b0 with E/W suffix. bearingPrecision Defines number of decimals for bearing angle shown in degrees. Default: 0 . defaultColorScheme The color scheme to use. See Color schemes for details. Default: \"default\" . defaultFeatureStyle The default style to use for selection geometries and other unstyled features. Default: see qwc2/utils/FeatureStyles.js . defaultInteractionStyle The default style to use on geometries to measure, snap or edit. Default: see qwc2/utils/FeatureStyles.js . defaultMarkerStyle The default style to use as marker icon. Default: see qwc2/utils/FeatureStyles.js . editingAddLinkAnchors Whether to automatically insert link anchors in text values when editing. Default: true , editServiceCaptchaSiteKey ReCAPTCHA public site key for public editing, see ReCAPTCHA validation . editTextNullValue A text value which represents NULL when editing. Default: \"\" . geodesicMeasurements Whether to perform measurements on the geoid. Default: false . loadTranslationOverrides Whether to attempt to load tanslation overrides, see Translations . Default: false . localeAwareNumbers Whether to use locale aware numbers throughout. Default: false . measurementPrecision Number of decimal digits to display in measurements. Default: 2 . omitUrlParameterUpdates Whether to omit updating the URL parameters. Default: false . projections A list of map projections to register, in the format {\"code\": \"<code>\", \"proj\": \"<proj4def>\", \"label\": \"<label>\", \"precision\": <decimals>} . By default, EPSG:3857 and EPSG:4326 are registered. qgisServerVersion The QGIS Server major version in use. Default: 3 . startupTask Task to automatically activate on application start, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . storeAllLayersInPermalink Whether to store the full layertree in the permalink data, rather than only local (i.e. redlining) layers. If false , remote layers are re-queried from the respective services, if true , they are statically reloaded (meaning restored layers may be outdated compared to current service capabilities). Default: false . tilePreloadLevels For tiled layers, load low-resolution tiles up to preload levels. 0 means no preloading. Default: 0 . translationsPath Relative path to the translations folder. Default: \"translations\" . trustWmsCapabilityURLs Whether to trust the GetMap etc. URLs reported in WMS service capabilities. If not true , the protocol, host and pathname portion of the URLs are inherited from the called capabilities URL. Default: false . urlPositionCrs The CRS used to encode the current map extent coordinates in the URL. Default: the current map projection. urlPositionFormat How to encode the current map extent in the URL, either \"centerAndZoom\" or \"extent\" . See URL parameters for details. Default: \"extent\" . urlRegEx A JSON-escaped regular expression used to match URLs in feature attribute values. Default: see qwc2/utils/MiscUtils.js . wmsHidpi Whether to honour the device pixel ratio for WMS GetMap requests. Default: true . wmsMaxGetUrlLength URL length limit before switching to a POST request for GetMap and GetFeatureInfo. Default: 2048 . wmsWktPrecision Precision (as number of decimals) of WKT geometries passed in WMS requests. Default: 4 .","title":"Global settings"},{"location":"configuration/ViewerConfiguration/#global-settings-overridable-per-theme","text":"The following options can be specified globally, and also overriden per theme, see themesConfig.json . All settings are optional, with fallback to the default values as documented. Setting Description allowAddingOtherThemes Whether to allow adding another theme to a currently loaded theme. Default: false . allowLayerTreeSeparators Allows users to add separator items in a flat layer tree. Default: false . allowRemovingThemeLayers Whether to allow removing any theme layers from the layer tree. Default: false . allowReorderingLayers Whether to allow re-ordering layers in the layer tree. Default: false . disableImportingLocalLayers Whether to hide the option to import local layers from the layer tree. Default: false . flattenLayerTreeGroups Whether to display a flat layer tree, omitting the groups. Default: false . globallyDisableDetachableDialogs Whether to globally disable the detachable feature of popup dialogs. Default: false . globallyDisableDockableDialogs Whether to globally disable the dockable feature of popup dialogs. Default: false . globallyDisableMaximizeableDialogs Whether to globally disable the maximizeable feature of popup dialogs. Default: false . identifyTool The name of the identify plugin to use as default identify tool. If set to an empty string, no identify tool will be active by default. Default: \"Identify\" . importLayerUrlPresets A list of predefined URLs from which the user can choose when importing layers from the layer tree. Entries must be strings or objects of the format {\"label\": \"<Label>\", \"value\": \"<URL>\"} . preserveBackgroundOnThemeSwitch Whether to preserve the current background layer when switching theme, if possible. Default: false . preserveExtentOnThemeSwitch Whether to preserve the current map extent when switching theme, if possible (see below). Default: false . preserveNonThemeLayersOnThemeSwitch Whether to preserve non-theme layers when switching theme. Default: false . preventSplittingGroupsWhenReordering Whether to prevent splitting sibling groups or the group itself when reordering items. Default: false . searchFilterRegions List of predefined search filter regions, see Search filtering . searchThemeLayers Whether to allow searching for theme layers from the global search field. Default: false . searchThemes Whether to allow searching for themes from the global search field. Default: false . startupTask Task to automatically start when switching to the theme, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . Takes precedence over the global startupTask . Note that the task is activated whenever switching to the theme, not only on application start. Note: The layer tree supports re-ordering layers via drag-and-drop if allowReorderingLayers = true and either preventSplittingGroupsWhenReordering = true or flattenLayerTreeGroups = true . If preserveExtentOnThemeSwitch = true , the current extent is preserved if it is within the new theme extent and if the current theme map projection is equal to the new theme projection. If preserveExtentOnThemeSwitch = \"force\" , the current extent is preserved regardless of whether it is within the new theme extent, but the current and new theme map projections must still match.","title":"Global settings, overridable per theme"},{"location":"configuration/ViewerConfiguration/#separate-mobile-desktop-global-settings","text":"You can specify the global settings separately for mobile and desktop by setting these in a corresponding toplevel section, i.e.: { \"<prop>\": \"<value>\", // This property applies for both mobile and desktop ... \"mobile\": { \"<prop>: \"<value>\", // This property applies only for mobile ... }, \"desktop\": { \"<prop>: \"<value>\", // This property applies only for desktop ... } } You can also specify separate mobile and desktop sections in the config block of a theme item.","title":"Separate mobile / desktop global settings"},{"location":"configuration/ViewerConfiguration/#urls-of-external-services","text":"Some plugins require external services (typically part of the qwc-services ecosystem). When using the qwc-docker , these configuration entries will be automatically injected into the config.json for enabled services. Setting Description authServiceUrl Typically the URL of a QWC authentication service like qwc-db-auth . editServiceUrl Typically the URL of the qwc-data-service . elevationServiceUrl Typically the URL of the qwc-elevation-service . documentService Typically the URL of the qwc-document-service . mapInfoService Typically the URL of the qwc-map-info-service . permalinkServiceUrl Typically the URL of the qwc-permalink-service . searchServiceUrl Typically the URL of the qwc-fulltext-search-service .","title":"URLs of external services"},{"location":"configuration/ViewerConfiguration/#plugin-configuration","text":"The plugin configuration is entered as follows: \"plugins\": { \"common\": [{<PluginConfig>}, ...], \"mobile\": [{<PluginConfig>}, ...], \"desktop\": [{<PluginConfig>}, ...] } The final mobile and desktop configurations will be computed by merging the common configuration with the respective specific configuration. Each <PluginConfig> block is of the format Setting Description { \u2063 \"name\": \"<name>\", The plugin name. \u2063 \"cfg\": {...}, The plugin configuration options, see plugin reference . \u2063 \"mapClickAction\": <\"identify\"|\"unset\"|null>, Optional: in case the plugin activates a viewer task, determines whether a click in the map will result in the identify tool being invoked, the task being unset, or whether no particular action should be performed (default). } Any plugin configuration option can be overridden per theme in the theme item config section as follows: { \"plugins\": { \"<plugin_name>\": { \"<cfg_prop>\": <value>, ... }, ... }, \"mobile\": { \"plugins: {...}, // Plugin config props applied only for mobile ... }, \"desktop\": { \"plugins: {...}, // Plugin config props applied only for desktop ... } } In general, the procedure for enabling a plugin is: Make sure the plugin is compiled into the application (see Build-time configuration ). In the plugins section of config.json , below common (or mobile and/or desktop ), add an entry { \"name\": \"<Plugin name>\", \"cfg\": { <Plugin configuration props> } } For most plugins (i.e. those which launch as an explicit task in the viewer), add entries in menuItems and/or toolbarItems in the TopBar configuration. The format of these entires is as follows: Setting Description { \u2063 \"key\": \"<key>\", The name of a plugin, i.e. LayerTree . The label for the entry will be looked up from the translations using the appmenu.items.<key> message identifier (see Translations . \u2063 \"icon\": \"<icon>\", The icon of the entry, either a built-in icon name (see below), or :/<path_to_asset> containing the path relative to assetsPath of an asset image. \u2063 \"themeBlacklist\": [\"<themename>\", ...], Optional, allows specifying a blacklist of theme names or titles for which the entry should not be visible. \u2063 \"themeWhitelist\": [\"<themename>\", ...], Optional, allows specifying a whitelist of theme names or titles for which the entry should be visible. \u2063 \"themeFlagBlacklist\": [\"<flag1>\", ...], Optional, allows specifying a blacklist of theme flags for which the entry should not be visible. \u2063 \"themeFlagWhitelist\": [\"<flag1>\", ...], Optional, allows specifying a whitelist of theme flags for which the entry should be visible. \u2063 \"mode\": \"<mode>\", Optional, depending on the plugin, a mode can be configured to launch the plugin directly in a specific mode. For instance, the Measure plugin supports specifying the measurement mode ( Point , LineString , Polygon ). \u2063 \"requireAuth\": \"<true|false>\", Optional, the entry is only visible when user is logged-in. \u2063 \"shortcut\": \"<shortcut>\" Optional, keyboard shortcut which triggers the entry, i.e. \"alt+shift+a\" . } Note: The built-in icons are those located in qwc2/icons and in qwc-app/icons . The built-in icon names are the respective file names, without .svg extension. Opening external websites As a special case, entries for opening external URLs can be defined in the menuItems and/or toolbarItems in the TopBar configuration as follows: Setting Description { \u2063 \"key\": \"<key>\", An arbitrary key (not used by existing plugins), used to lookup the label for the entry from the translations (as appmenu.items.<key> ). \u2063 \"title\": \"<key>\", Optional: Title to use insead of appmenu.items.<key> . \u2063 \"icon\": \"<icon>\", As above. \u2063 \"url\": \"<url>\", The URL to open. Can contain as placeholders the keys listed in URL Parameters , encolsed in $ (i.e. $e$ for the extent). In addition, the placeholders $x$ and $y$ for the individual map center coordinates are also supported. \u2063 \"target\": \"<target>\" The target where to open the URL, if empty, _blank is assumed. Can be iframe or :iframedialog:<windowname>:<options> (see below) to open the link in a iframe window inside QWC. } The format of the :iframedialog:<windowname>:<options> target is as follows: windowname is used to identify the name of the iframe window within which the link will be opened, i.e. can be used to make multiple external URLs re-use the same iframe window. options is a sequence of <key>=<value> , separated by : , with the following options: dockable=<false|left|right|top|bottom> : whether the window is dockable, and to which screen edge docked=<true|false> : whether the window is docked by default splitScreenWhenDocked=<true|false> : whether to split the screen when docked h=<h> : the initial window height w=<w> : the initial window width zIndex=<zIndex> : the stacking zIndex for the dialog icon=<icon> : the name of a build-in icon (see qwc2/icons ) to display in the window title bar (overrides the icon set in the menuItems / tollbarItems entry) title=<title> : the title to display in the window title bar (overrides the title set in the menuItems / tollbarItems entry) print=<true|false> : whether to display a print icon in the window title bar","title":"Plugin configuration"},{"location":"configuration/ViewerConfiguration/#customizing-the-viewer-assets","text":"The viewer assets are located as follows: Standalone viewer: qwc-app/static/assets qwc-docker : qwc-docker/volumes/qwc2/assets The default structure of the assets folder is as follows: Path Description \u2514\u2500 assets/ See Viewer assets \u251c\u2500 css/ Additional style sheets, must be included by index.html . \u2502 \u251c\u2500 colorschemes.css Additional color schemes. \u2502 \u2514\u2500 qwc2.css Additional style definitions. \u251c\u2500 img/ Application logo etc. \u2502 \u251c\u2500 genmapthumbs/ Autogenerated map thumbnails. \u2502 \u2514\u2500 mapthumbs/ Map thumbnails. \u251c\u2500 templates/ \u2502 \u2514\u2500 legendprint.html HTML template for the legend print. \u251c\u2500 help.html Help dialog fragment, see Help dialog . \u2514\u2500 searchProviders.js Additional search providers, see Search providers . Furthermore, the application entry point index.html is located as follows: Standalone viewer: qwc-app/index.html qwc-docker : qwc-docker/volumes/config-in/<tenant>/index.html This file noteably specifies the application title, and references many of the assets located below the assets folder.","title":"Customizing the viewer assets "},{"location":"configuration/ViewerConfiguration/#customizing-the-color-scheme","text":"The QWC color scheme is fully customizeable via CSS. A default color-scheme is built-in (see DefaultColorScheme.css ). To define a custom color scheme, copy the default color scheme to assets/css/colorschemes.css , add an appropriate class name to the :root selector, and modify the colors as desided. Two additional examples ( highcontrast and dark ) are provided by default in assets/css/colorschemes.css . You can then modify the color scheme which is applied by default by setting defaultColorScheme in config.json to an appropriate class name (i.e. highcontrast or dark ). To change the color scheme at runtime in QWC, make sure the Settings plugin is enabled, and in the Settings plugin configuration block in config.json list the color schemes below colorSchemes . Refer to the sample config.json . Note : When changing the color scheme via Settings dialog in QWC, the picked color scheme is stored in the browser local storage, and this setting will override the defaultColorScheme setting from config.json . Specifying the style URL-parameter (see URL parameters ) will take precedence over all other settings. Note: Make sure that assets/css/colorschemes.css is included in index.html .","title":"Customizing the color scheme"},{"location":"configuration/ViewerConfiguration/#overriding-component-styles","text":"Occasionally, it may be desired to customize the styling on the QWC components. The recommended approach is to add the corresponding style overrides to assets/css/qwc2.css . Note: Make sure that assets/css/qwc2.css is included in index.html .","title":"Overriding component styles"},{"location":"configuration/ViewerConfiguration/#customizing-the-application-logo","text":"The application logo in its various shapes and sizes are located below assets/img/ . In particular, the logo.svg and logo-mobile.svg images are displayed as in the top left corner of QWC in desktop and mobile mode respectively. If you'd like to use another format than SVG (while keeping logo and logo-mobile as base name), you can change logoFormat in the TopBar configuration block in config.json .","title":"Customizing the application logo"},{"location":"configuration/ViewerConfiguration/#providing-custom-map-thumbnails","text":"By default, when generating the themes configuration (see theme configuration ), a default map thumbnail is generating via WMS GetMap , and placed below assets/img/genmapthumbs . You can provide your own thumbnail images instead by placing the corresponding images below assets/img/mapthumbs and referencing these as thumbnail in you theme configuration block in themesConig.json .","title":"Providing custom map thumbnails"},{"location":"configuration/ViewerConfiguration/#personalizing-the-help-dialog","text":"You can personalize the help dialog by providing a plain HTML document fragment in static/assets/help.html and configuring the Help plugin accordingly in config.json : { \"name\": \"Help\", \"cfg\": { \"bodyContentsFragmentUrl\": \"assets/help.html\" } } Note: $VERSION$ can be used in the HTML document fragment as a placeholder for the application build date.","title":"Personalizing the help dialog "},{"location":"configuration/ViewerConfiguration/#personalizing-the-legend-print-template","text":"The legend print template assets/templates/legendprint.html is used when printing the map legend from the layer tree. The only requirement for this template is that is must contain a <div id=\"legendcontainer\"></div> element.","title":"Personalizing the legend print template"},{"location":"configuration/ViewerConfiguration/#building-a-custom-viewer","text":"The QWC stock application, hosted at https://github.com/qgis/qwc2/ , can serve as a base for building a custom application, and is published as an NPM package . The LTS branch is published on NPM as qwc2-lts . An example of a custom application is hosted at https://github.com/qgis/qwc2-demo-app . To build a custom viewer, the first step is cloning the demo application: git clone https://github.com/qgis/qwc2-demo-app.git qwc-app The typical layout of a QWC app source tree is as follows: Path Description \u251c\u2500 static/ \u2502 \u251c\u2500 assets/ See Viewer assets \u2502 \u251c\u2500 translations/ Translation files. \u2502 \u251c\u2500 config.json Runtime configuration file. \u251c\u2500 themesConfig.json Themes configuration, edited manually. \u2502 \u2514\u2500 themes.json Generated theme configuration, autogenerated from themesConfig.json . \u251c\u2500 js/ \u2502 \u251c\u2500 app.jsx Entry point of the ReactJS application. \u2502 \u251c\u2500 appConfig.js Build-time configuration file. \u2502 \u251c\u2500 Help.jsx Built-in component of custom Help dialog, see Help dialog . \u2502 \u2514\u2500 SearchProviders.js Built-in custom search providers, see Search providers . \u251c\u2500 icons/ Application icons. \u251c\u2500 index.html Entry point. \u251c\u2500 package.json NodeJS configuration file. \u2514\u2500 webpack.config.js Webpack configuration.","title":"Building a custom viewer "},{"location":"configuration/ViewerConfiguration/#application-build-time-configuration","text":"The js/appConfig.js is the the principal build-time configuation file, and defines: The default application locale, built into the application. This locale is used if no available locale matches the browser locale. Which plugins are built into the application. Plugins left out here will be completely omitted when compiling the application bundle, and will hence also reduce the size of the bundle. Various hook functions, as documented in the sample sample js/appConfig.js . Refer to the sample appConfig.js for a concrete example.","title":"Application build-time configuration"},{"location":"configuration/ViewerConfiguration/#overriding-icons","text":"The common application icons are located in qwc2/icons . They can be overridden by creating an icon with the same filename in the application specific icons folder. Note : The icons in the icons folder are compiled into an icon font. The icons need to be black content on transparent background, and all drawings (including texts) must be converted to paths for the icons to render correctly.","title":"Overriding icons"},{"location":"configuration/ViewerConfiguration/#compiling-an-application-bundle","text":"After tweaking the source files as desired, compile a deployable application bundle for production running yarn run prod When using qwc-docker , copy the contents of the qwc-app/prod folder to qwc-docker/volumes/qwc2 and edit the qwc-docker/docker-compose.yml to use qwc-map-viewer-base with your custom build: qwc-map-viewer: image: sourcepole/qwc-map-viewer-base:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qwc2:/qwc2:ro","title":"Compiling an application bundle"},{"location":"configuration/ViewerConfiguration/#keeping-the-qwc-application-up-to-date","text":"To update the base QWC components, just update the version of the qwc2 dependency in package.json . The QWC Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Keeping the QWC application up to date"},{"location":"references/","text":"References \u00b6 QWC2 Client Plugin reference qwc-base-db README qwc-qgs-cache-preseed README qwc-config-generator README Configuration schema reference qwc-admin-gui README Configuration schema reference qwc-data-service README Configuration schema reference qwc-db-auth README Configuration schema reference qwc-document-service README Configuration schema reference qwc-elevation-service README Configuration schema reference qwc-ext-service README Configuration schema reference qwc-feature-info-service README Configuration schema reference qwc-ldap-auth README Configuration schema reference qwc-legend-service README Configuration schema reference qwc-mapinfo-service README Configuration schema reference qwc-map-viewer README Configuration schema reference qwc-ogc-service README Configuration schema reference qwc-oidc-auth README Configuration schema reference qwc-permalink-service README Configuration schema reference qwc-services-permissions README Configuration schema reference qwc-print-service README Configuration schema reference qwc-search-service README Configuration schema reference qwc-3d-tile-info-service README Configuration schema reference","title":"References"},{"location":"references/#references","text":"QWC2 Client Plugin reference qwc-base-db README qwc-qgs-cache-preseed README qwc-config-generator README Configuration schema reference qwc-admin-gui README Configuration schema reference qwc-data-service README Configuration schema reference qwc-db-auth README Configuration schema reference qwc-document-service README Configuration schema reference qwc-elevation-service README Configuration schema reference qwc-ext-service README Configuration schema reference qwc-feature-info-service README Configuration schema reference qwc-ldap-auth README Configuration schema reference qwc-legend-service README Configuration schema reference qwc-mapinfo-service README Configuration schema reference qwc-map-viewer README Configuration schema reference qwc-ogc-service README Configuration schema reference qwc-oidc-auth README Configuration schema reference qwc-permalink-service README Configuration schema reference qwc-services-permissions README Configuration schema reference qwc-print-service README Configuration schema reference qwc-search-service README Configuration schema reference qwc-3d-tile-info-service README Configuration schema reference","title":"References"},{"location":"references/qwc-3d-tile-info-service/","text":"<title>QWC Mapinfo Service</title> QWC Mapinfo Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-3d-tile-info-service/master/schemas/qwc-3d-tile-info-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"tileinfo\" config Required root config Config options Type: object info_datasets root config info_datasets Type: object A dictionary of dataset configurations, keyed by dataset name. Additional Properties Each additional property must conform to the following schema root config info_datasets additionalProperties Type: object Dataset configuration. dataset root config info_datasets additionalProperties dataset Type: string Dataset resource URI (path to file dataset, DB url for postgres, ...) layername root config info_datasets additionalProperties layername Type: string Layername in dataset (for postgres, \"schema.tablename\") idfield root config info_datasets additionalProperties idfield Type: string ID field name in dataset layer type root config info_datasets additionalProperties type Type: string Dataset type - currently 'gpkg' and 'postgres' are supported attribute_aliases root config info_datasets additionalProperties attribute_aliases Type: object A dictionary of fieldname aliases, keyed by the field name Additional Properties Each additional property must conform to the following schema root config info_datasets additionalProperties attribute_aliases additionalProperties Type: string Field alias attribute_blacklist root config info_datasets additionalProperties attribute_blacklist Type: array of string List of fieldnames to omit from the info response No Additional Items Each item of this array must be: root config info_datasets additionalProperties attribute_blacklist attribute_blacklist items Type: string Field name styles root config info_datasets additionalProperties styles Type: object Styles, keyed by style name Additional Properties Each additional property must conform to the following schema root config info_datasets additionalProperties styles additionalProperties Type: object Style configuration query root config info_datasets additionalProperties styles additionalProperties query Type: string Query to use to read the SLD style from the postgres or gpkg datasets filename root config info_datasets additionalProperties styles additionalProperties filename Type: string Path to a file storing the SLD style Generated using json-schema-for-humans on 2025-10-09 at 10:46:25 +0000","title":"Qwc 3d tile info service"},{"location":"references/qwc-3d-tile-info-service_readme/","text":"QWC 3D Tile Info Service \u00b6 Provides additional data for 3D tiles tilesets, sourced from a GeoPackage or Postgres dataset: Object info, via /objinfo?tileset=<tileset_name>&objectid=<object_id> 3D tiles stylesheets, generated from 2D SLD styles, via /stylesheet?tileset=<tileset_name>&stylename=<stylename> This service implements a backend which can be referenced as tileInfoServiceUrl in the QWC View3D plugin configuration, tileset_name being the name of the tileset as configured in the tiles3d dataset entries in the themes configuration, see View3D configuration . Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . TileInfo Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/tileinfoConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-3d-tile-info-service/master/schemas/qwc-3d-tile-info-service.json\", \"service\": \"mapinfo\", \"config\": { \"info_datasets\": { \"<tileset_name>\" : { \"dataset\": \"<dataset path or DB URL>\", \"type\": \"<gpkg|postgres>\", \"layername\": \"<layer name in dataset>\", \"idfield\": \"<id field name in dataset>\", \"attribute_aliases\": { \"<fieldname>\": \"<displayname>\", ... }, \"attribute_blacklist\": [ \"<fieldname>\" ], \"styles\": { \"<stylename>\": { \"query\": \"SELECT styleSLD FROM layer_styles WHERE f_table_name = '<layer name>'\", // or \"filename\": \"<sld path>\" } } } } } } Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Usage \u00b6 Run as python src/server.py API documentation: http://localhost:5016/api/ Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Qwc 3d tile info service readme"},{"location":"references/qwc-3d-tile-info-service_readme/#qwc-3d-tile-info-service","text":"Provides additional data for 3D tiles tilesets, sourced from a GeoPackage or Postgres dataset: Object info, via /objinfo?tileset=<tileset_name>&objectid=<object_id> 3D tiles stylesheets, generated from 2D SLD styles, via /stylesheet?tileset=<tileset_name>&stylename=<stylename> This service implements a backend which can be referenced as tileInfoServiceUrl in the QWC View3D plugin configuration, tileset_name being the name of the tileset as configured in the tiles3d dataset entries in the themes configuration, see View3D configuration .","title":"QWC 3D Tile Info Service"},{"location":"references/qwc-3d-tile-info-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-3d-tile-info-service_readme/#tileinfo-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/tileinfoConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-3d-tile-info-service/master/schemas/qwc-3d-tile-info-service.json\", \"service\": \"mapinfo\", \"config\": { \"info_datasets\": { \"<tileset_name>\" : { \"dataset\": \"<dataset path or DB URL>\", \"type\": \"<gpkg|postgres>\", \"layername\": \"<layer name in dataset>\", \"idfield\": \"<id field name in dataset>\", \"attribute_aliases\": { \"<fieldname>\": \"<displayname>\", ... }, \"attribute_blacklist\": [ \"<fieldname>\" ], \"styles\": { \"<stylename>\": { \"query\": \"SELECT styleSLD FROM layer_styles WHERE f_table_name = '<layer name>'\", // or \"filename\": \"<sld path>\" } } } } } }","title":"TileInfo Service config"},{"location":"references/qwc-3d-tile-info-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables.","title":"Environment variables"},{"location":"references/qwc-3d-tile-info-service_readme/#usage","text":"Run as python src/server.py API documentation: http://localhost:5016/api/","title":"Usage"},{"location":"references/qwc-3d-tile-info-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-3d-tile-info-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-admin-gui/","text":"<title>QWC Admin GUI</title> QWC Admin GUI Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-admin-gui/master/schemas/qwc-admin-gui.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"admin-gui\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config config_generator_service_url Required root config config_generator_service_url Type: string Config generator URL auth_service_url root config auth_service_url Type: string URL to auth service, used for login redirects. Default: /auth/ totp_enabled Required root config totp_enabled Type: boolean Show TOTP fields for two factor authentication user_info_fields root config user_info_fields Type: array of object Additional user fields No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: object proxy_url_whitelist root config proxy_url_whitelist Type: array of object List of RegExes for whitelisted URLs No Additional Items Each item of this array must be: root config proxy_url_whitelist proxy_url_whitelist items Type: object proxy_timeout root config proxy_timeout Type: integer Timeout in seconds for proxy requests admin_gui_title root config admin_gui_title Type: string Title displayed in Admin Gui home page admin_gui_subtitle root config admin_gui_subtitle Type: string Subtitle displayed in Admin Gui home page solr_service_url root config solr_service_url Type: string Solr Service base URL for collection solr_tenant_dih root config solr_tenant_dih Type: string Solr DataImportHandler for tenant solr_tenant_dih_config_file root config solr_tenant_dih_config_file Type: string Path to source DataImportHandler config file for tenant solr_config_path root config solr_config_path Type: string Path to Solr configs solr_update_check_wait root config solr_update_check_wait Type: number Wait time in seconds for checks during Solr index update solr_update_check_max_retries root config solr_update_check_max_retries Type: integer Max number of retries for checks during Solr index update favicon root config favicon Type: string URL to favicon plugins root config plugins Type: array of string List of plugins to load No Additional Items Each item of this array must be: root config plugins plugins items Type: string input_config_path root config input_config_path Type: string The path to the input configs. Required for 'themes' and 'config_editor' plugin. qwc2_path root config qwc2_path Type: string The path to QWC2 files. Required for 'themes' and 'alkis' plugins. qgs_resources_path root config qgs_resources_path Type: string The path to the QGIS projects. Required for 'themes' plugin. info_templates_path root config info_templates_path Type: string The path to the html info templates. Required for 'themes' plugin. ows_prefix root config ows_prefix Type: string The OGC service URL path prefix, i.e. /ows. Required for 'themes' plugin. qgis_project_extension root config qgis_project_extension Type: string The QGIS project file extension to look for. Default: '.qgs' default_qgis_server_url root config default_qgis_server_url Type: string The default Qgis server URL. Required for 'themes' plugin. application_name root config application_name Type: string The application name to display in the invite emails. Default: 'QWC' application_url root config application_url Type: string The application URL to display in the invite emails. Default: computed from the Admin GUI URL' resource_blacklist root resource_blacklist Type: array of string List of resource types to blacklist. No Additional Items Each item of this array must be: root resource_blacklist resource_blacklist items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:06 +0000","title":"Qwc admin gui"},{"location":"references/qwc-admin-gui_readme/","text":"QWC Admin GUI \u00b6 GUI for administration of QWC Services. manage users, groups and roles define QWC resources and assign permissions define registrable groups and manage group registration requests Note: requires a QWC ConfigDB Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Admin Gui Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/adminGuiConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-admin-gui/master/schemas/qwc-admin-gui.json\", \"service\": \"admin-gui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\", \"totp_enabled\": false, \"user_info_fields\": [], \"proxy_url_whitelist\": [], \"proxy_timeout\": 60 } } To connect with the demo database, the following ~/.pg_service.conf entry is expected: [qwc_configdb] host=localhost port=5439 dbname=qwc_demo user=qwc_admin password=qwc_admin sslmode=disable Set the GROUP_REGISTRATION_ENABLED environment variable to False to disable registrable groups and group registration requests, if not using the Registration GUI (default: True ). To automatically logout from the admin gui after a period of inactivity, set the IDLE_TIMEOUT environment variable to the desired period, in seconds (default: 0 , i.e. disabled). Set totp_enabled to true to show the TOTP fields in the user form, if two factor authentication is enabled in the DB-Auth service (default: false ). Additional user fields \u00b6 Additional user fields are saved in the table qwc_config.user_infos with a a one-to-one relation to qwc_config.users via the user_id foreign key. To add custom user fields, add new columns to your qwc_config.user_infos table and set your user_info_fields to a JSON with the following structure: [ { \"title\": \"<field title>\", \"name\": \"<column name>\", \"type\": \"<field type (text|textarea|integer|list, default: text)>\", \"values\": \"<field values in dropdown list ([(value1, label1), (value2, label2), ...]|[value1, value2, ...])>\", \"required\" \"<whether field is required (true|false, default: false)>\" } ] These fields are then added to the user form. Example: -- add custom columns ALTER TABLE qwc_config.user_infos ADD COLUMN surname character varying NOT NULL; ALTER TABLE qwc_config.user_infos ADD COLUMN first_name character varying NOT NULL; # set user info fields config \"user_info_fields\": [{\"title\": \"Surname\", \"name\": \"surname\", \"type\": \"text\", \"required\": true}, {\"title\": \"First name\", \"name\": \"first_name\", \"type\": \"text\", \"required\": true}] Mailer \u00b6 Flask-Mail is used for sending mails like user notifications. These are the available options: * MAIL_SERVER : default \u2018localhost\u2019 * MAIL_PORT : default 25 * MAIL_USE_TLS : default False * MAIL_USE_SSL : default False * MAIL_DEBUG : default app.debug * MAIL_USERNAME : default None * MAIL_PASSWORD : default None * MAIL_DEFAULT_SENDER : default None * MAIL_MAX_EMAILS : default None * MAIL_SUPPRESS_SEND : default app.testing * MAIL_ASCII_ATTACHMENTS : default False In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests. Proxy to internal services \u00b6 The route /proxy?url=http://example.com/path?a=1 serves as a proxy for calling whitelisted internal services. This can be used e.g. to call other internal services from custom pages in the Admin GUI, without having to expose those services externally. Set proxy_url_whitelist to a list of RegExes for whitelisted URLs (default: [] ), e.g. [\"<RegEx pattern for full URL from proxy request>\", \"^http://example.com/path\\\\?.*$\"] Set proxy_timeout to the timeout in seconds for proxy requests (default: 60 s). Translations \u00b6 Translation strings are stored in a JSON file for each locale in translations/<locale>.json (e.g. en.json ). Add any new languages as new JSON files. Set the DEFAULT_LOCALE environment variable to choose the locale for the user notification mails (default: en ). Solr search index update \u00b6 If using a Solr search service, the Solr search index of a tenant may be updated via a button on the main page. This can be activated by adding the following configuration options to the Admin GUI service config: { \"config\": { \"solr_service_url\": \"http://qwc-solr:8983/solr/gdi/\", \"solr_tenant_dih\": \"dih_geodata\", \"solr_tenant_dih_config_file\": \"/solr/config-in/dih_geodata_config.xml\", \"solr_config_path\": \"/solr/config-out\", \"solr_update_check_wait\": 5, \"solr_update_check_max_retries\": 10 } } solr_service_url : Solr Service base URL for collection solr_tenant_dih : Solr DataImportHandler for the tenant solr_tenant_dih_config_file (optional): Path to source DataImportHandler config file for the tenant solr_config_path (optional): Path to Solr configs ( Note: requires write permissions for DataImportHandler config files) solr_update_check_wait (optional): Wait time in seconds for checks during Solr index update (default: 5 s) solr_update_check_max_retries (optional): Max number of retries for checks during Solr index update (default: 10 ) If both solr_tenant_dih_config_file and solr_config_path are set, the tenant config file is first copied to the Solr configs dir before updating the Solr search index. Example volumes for qwc-docker environment and above service config: services: qwc-admin-gui: # ... volumes: # ... # Solr configs - ./volumes/solr/configsets/gdi/conf:/solr/config-in:ro - ./volumes/solr/data/gdi/conf:/solr/config-out Plugins \u00b6 The admin gui is extendable through plugins, which reside in the plugins folder. To enable them, list them in plugins in the admin gui configuration. See the JSON schema for details, and for configuration parameters which may be required by plugins shipped by default with qwc-admin-gui . Usage \u00b6 Base URL: http://localhost:5031/ Default login \u00b6 username: admin password: admin Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install requirements: uv sync Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Update translation files: uv run ./updateTranslations.py Start local service: uv run src/server.py","title":"Qwc admin gui readme"},{"location":"references/qwc-admin-gui_readme/#qwc-admin-gui","text":"GUI for administration of QWC Services. manage users, groups and roles define QWC resources and assign permissions define registrable groups and manage group registration requests Note: requires a QWC ConfigDB","title":"QWC Admin GUI"},{"location":"references/qwc-admin-gui_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-admin-gui_readme/#admin-gui-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/adminGuiConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-admin-gui/master/schemas/qwc-admin-gui.json\", \"service\": \"admin-gui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\", \"totp_enabled\": false, \"user_info_fields\": [], \"proxy_url_whitelist\": [], \"proxy_timeout\": 60 } } To connect with the demo database, the following ~/.pg_service.conf entry is expected: [qwc_configdb] host=localhost port=5439 dbname=qwc_demo user=qwc_admin password=qwc_admin sslmode=disable Set the GROUP_REGISTRATION_ENABLED environment variable to False to disable registrable groups and group registration requests, if not using the Registration GUI (default: True ). To automatically logout from the admin gui after a period of inactivity, set the IDLE_TIMEOUT environment variable to the desired period, in seconds (default: 0 , i.e. disabled). Set totp_enabled to true to show the TOTP fields in the user form, if two factor authentication is enabled in the DB-Auth service (default: false ).","title":"Admin Gui Service config"},{"location":"references/qwc-admin-gui_readme/#additional-user-fields","text":"Additional user fields are saved in the table qwc_config.user_infos with a a one-to-one relation to qwc_config.users via the user_id foreign key. To add custom user fields, add new columns to your qwc_config.user_infos table and set your user_info_fields to a JSON with the following structure: [ { \"title\": \"<field title>\", \"name\": \"<column name>\", \"type\": \"<field type (text|textarea|integer|list, default: text)>\", \"values\": \"<field values in dropdown list ([(value1, label1), (value2, label2), ...]|[value1, value2, ...])>\", \"required\" \"<whether field is required (true|false, default: false)>\" } ] These fields are then added to the user form. Example: -- add custom columns ALTER TABLE qwc_config.user_infos ADD COLUMN surname character varying NOT NULL; ALTER TABLE qwc_config.user_infos ADD COLUMN first_name character varying NOT NULL; # set user info fields config \"user_info_fields\": [{\"title\": \"Surname\", \"name\": \"surname\", \"type\": \"text\", \"required\": true}, {\"title\": \"First name\", \"name\": \"first_name\", \"type\": \"text\", \"required\": true}]","title":"Additional user fields"},{"location":"references/qwc-admin-gui_readme/#mailer","text":"Flask-Mail is used for sending mails like user notifications. These are the available options: * MAIL_SERVER : default \u2018localhost\u2019 * MAIL_PORT : default 25 * MAIL_USE_TLS : default False * MAIL_USE_SSL : default False * MAIL_DEBUG : default app.debug * MAIL_USERNAME : default None * MAIL_PASSWORD : default None * MAIL_DEFAULT_SENDER : default None * MAIL_MAX_EMAILS : default None * MAIL_SUPPRESS_SEND : default app.testing * MAIL_ASCII_ATTACHMENTS : default False In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests.","title":"Mailer"},{"location":"references/qwc-admin-gui_readme/#proxy-to-internal-services","text":"The route /proxy?url=http://example.com/path?a=1 serves as a proxy for calling whitelisted internal services. This can be used e.g. to call other internal services from custom pages in the Admin GUI, without having to expose those services externally. Set proxy_url_whitelist to a list of RegExes for whitelisted URLs (default: [] ), e.g. [\"<RegEx pattern for full URL from proxy request>\", \"^http://example.com/path\\\\?.*$\"] Set proxy_timeout to the timeout in seconds for proxy requests (default: 60 s).","title":"Proxy to internal services"},{"location":"references/qwc-admin-gui_readme/#translations","text":"Translation strings are stored in a JSON file for each locale in translations/<locale>.json (e.g. en.json ). Add any new languages as new JSON files. Set the DEFAULT_LOCALE environment variable to choose the locale for the user notification mails (default: en ).","title":"Translations"},{"location":"references/qwc-admin-gui_readme/#solr-search-index-update","text":"If using a Solr search service, the Solr search index of a tenant may be updated via a button on the main page. This can be activated by adding the following configuration options to the Admin GUI service config: { \"config\": { \"solr_service_url\": \"http://qwc-solr:8983/solr/gdi/\", \"solr_tenant_dih\": \"dih_geodata\", \"solr_tenant_dih_config_file\": \"/solr/config-in/dih_geodata_config.xml\", \"solr_config_path\": \"/solr/config-out\", \"solr_update_check_wait\": 5, \"solr_update_check_max_retries\": 10 } } solr_service_url : Solr Service base URL for collection solr_tenant_dih : Solr DataImportHandler for the tenant solr_tenant_dih_config_file (optional): Path to source DataImportHandler config file for the tenant solr_config_path (optional): Path to Solr configs ( Note: requires write permissions for DataImportHandler config files) solr_update_check_wait (optional): Wait time in seconds for checks during Solr index update (default: 5 s) solr_update_check_max_retries (optional): Max number of retries for checks during Solr index update (default: 10 ) If both solr_tenant_dih_config_file and solr_config_path are set, the tenant config file is first copied to the Solr configs dir before updating the Solr search index. Example volumes for qwc-docker environment and above service config: services: qwc-admin-gui: # ... volumes: # ... # Solr configs - ./volumes/solr/configsets/gdi/conf:/solr/config-in:ro - ./volumes/solr/data/gdi/conf:/solr/config-out","title":"Solr search index update"},{"location":"references/qwc-admin-gui_readme/#plugins","text":"The admin gui is extendable through plugins, which reside in the plugins folder. To enable them, list them in plugins in the admin gui configuration. See the JSON schema for details, and for configuration parameters which may be required by plugins shipped by default with qwc-admin-gui .","title":"Plugins"},{"location":"references/qwc-admin-gui_readme/#usage","text":"Base URL: http://localhost:5031/","title":"Usage"},{"location":"references/qwc-admin-gui_readme/#default-login","text":"username: admin password: admin","title":"Default login"},{"location":"references/qwc-admin-gui_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-admin-gui_readme/#development","text":"Install requirements: uv sync Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Update translation files: uv run ./updateTranslations.py Start local service: uv run src/server.py","title":"Development"},{"location":"references/qwc-base-db_readme/","text":"QWC Base DB \u00b6 This repository creates two Docker images: qwc-base-db : Image with a postgis server and the minimal schemas and roles for the QWC Config DB qwc-base-db-migrate : Image containing alembic and the migrations to update the QWC Config DB to the latest schema These images are designed to be configured in a docker-compose.yml as follows (minimal configuration): qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro Note: You need to set a non-empty POSTGRES_PASSWORD ENV variable . You can set passwords for roles in qwc_services database with ENV variables: QGIS_SERVER_PASSWORD , QWC_ADMIN_PASSWORD , QWC_SERVICE_PASSWORD , QWC_SERVICE_WRITE_PASSWORD . These variables have default values ( qgis_server , qwc_admin , qwc_service , qwc_service_write ). For persistent storage, mount folder volume to /var/lib/postgresql/docker . The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) When the qwc-postgis image is run, then it checks whether /var/lib/postgresql/docker is empty. If that's the case then it will proceed with setting up the qwc_configdb DB. The qwc-config-db-migrate image will run qwc-postgis is up, and will apply all available migrations to the Config DB. Keeping the Config DB up-to-date \u00b6 To keep the Config DB up to date, it is sufficient to update the qwc-base-db-migrate image version to the latest available version. Configure the qwc-config-db-migrate image mounting the pg_service.conf containing the connection information to your database: qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro Migrations will be applied automatically, if necessary, whenever the Docker application is started. To upgrade to a migration different than head , set the ALEMBIC_VERSION ENV variable. By default, the DB specified by the qwc_configdb connection will be upgraded. You can specify a different connection by setting the PGSERVICE ENV variable. Managing an external Config DB \u00b6 You can use an external DB instead of the qwc-base-db dockerized DB. To set up the external DB, set passwords for roles with ENV variables ( QGIS_SERVER_PASSWORD , QWC_ADMIN_PASSWORD , QWC_SERVICE_PASSWORD , QWC_SERVICE_WRITE_PASSWORD ) and run the SQL commands in setup-roles-and-db.sh on your external DB. To apply the migrations, both as part as the initial setup and subsequently to keep the Config DB up-to-date: Modify the qwc_configdb connection in pg_service.conf with the connection information to your external DB Configure the qwc-config-db-migrate image mounting the modified pg_service.conf : qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro Extra initialization \u00b6 You can mount additional scripts to perform initial DB setup to /tmp/extra-init.d . These scripts will only be executed after the initial DB migration (i.e. if alembic current was empty). DB Schema overview \u00b6","title":"Qwc base db readme"},{"location":"references/qwc-base-db_readme/#qwc-base-db","text":"This repository creates two Docker images: qwc-base-db : Image with a postgis server and the minimal schemas and roles for the QWC Config DB qwc-base-db-migrate : Image containing alembic and the migrations to update the QWC Config DB to the latest schema These images are designed to be configured in a docker-compose.yml as follows (minimal configuration): qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro Note: You need to set a non-empty POSTGRES_PASSWORD ENV variable . You can set passwords for roles in qwc_services database with ENV variables: QGIS_SERVER_PASSWORD , QWC_ADMIN_PASSWORD , QWC_SERVICE_PASSWORD , QWC_SERVICE_WRITE_PASSWORD . These variables have default values ( qgis_server , qwc_admin , qwc_service , qwc_service_write ). For persistent storage, mount folder volume to /var/lib/postgresql/docker . The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) When the qwc-postgis image is run, then it checks whether /var/lib/postgresql/docker is empty. If that's the case then it will proceed with setting up the qwc_configdb DB. The qwc-config-db-migrate image will run qwc-postgis is up, and will apply all available migrations to the Config DB.","title":"QWC Base DB"},{"location":"references/qwc-base-db_readme/#keeping-the-config-db-up-to-date","text":"To keep the Config DB up to date, it is sufficient to update the qwc-base-db-migrate image version to the latest available version. Configure the qwc-config-db-migrate image mounting the pg_service.conf containing the connection information to your database: qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro Migrations will be applied automatically, if necessary, whenever the Docker application is started. To upgrade to a migration different than head , set the ALEMBIC_VERSION ENV variable. By default, the DB specified by the qwc_configdb connection will be upgraded. You can specify a different connection by setting the PGSERVICE ENV variable.","title":"Keeping the Config DB up-to-date"},{"location":"references/qwc-base-db_readme/#managing-an-external-config-db","text":"You can use an external DB instead of the qwc-base-db dockerized DB. To set up the external DB, set passwords for roles with ENV variables ( QGIS_SERVER_PASSWORD , QWC_ADMIN_PASSWORD , QWC_SERVICE_PASSWORD , QWC_SERVICE_WRITE_PASSWORD ) and run the SQL commands in setup-roles-and-db.sh on your external DB. To apply the migrations, both as part as the initial setup and subsequently to keep the Config DB up-to-date: Modify the qwc_configdb connection in pg_service.conf with the connection information to your external DB Configure the qwc-config-db-migrate image mounting the modified pg_service.conf : qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro","title":"Managing an external Config DB"},{"location":"references/qwc-base-db_readme/#extra-initialization","text":"You can mount additional scripts to perform initial DB setup to /tmp/extra-init.d . These scripts will only be executed after the initial DB migration (i.e. if alembic current was empty).","title":"Extra initialization"},{"location":"references/qwc-base-db_readme/#db-schema-overview","text":"","title":"DB Schema overview"},{"location":"references/qwc-config-generator/","text":"<title>QWC Config generator</title> QWC Config generator Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\" Reference to JSON schema of this config template root template Optional, path to a tenantConfig template. If specified, the contents of the file is merged with the contents of tenantConfig.json. Any occurence of $tenant$ in the template will be replaced with the current tenant name. Type: string themesConfig Required root themesConfig QWC2 themes configuration One of Option 1 Option 2 root themesConfig oneOf item 0 Type: object Corresponds to contents of standalone QWC2 themesConfig.json themes Required root themesConfig oneOf item 0 themes Type: object root themesConfig oneOf item 1 Type: string Path to themesConfig.json config Required root config Config options for Config generator Type: object tenant Required root config tenant Type: string Tenant name. Example: default config_db_url Required root config config_db_url Type: string Format: uri Connection URL for configuration database. Example: postgresql:///?service=qwc_configdb qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config default_qgis_server_url Required root config default_qgis_server_url Type: string Format: uri Default QGIS Server URL for OGC requests. Example: http://qwc-qgis-server/ows/ qgis_project_extension root config qgis_project_extension Type: string The QGIS project file extension to look for. Default: .qgs qgis_projects_base_dir Required root config qgis_projects_base_dir Type: string Base path for QGIS projects. Example: /data qgis_print_layouts_dir root config qgis_print_layouts_dir Type: string Directory containing print layouts. Default: /layouts qgis_print_layouts_tenant_subdir root config qgis_print_layouts_tenant_subdir Type: string Subdirectory path relative to qgis_print_layouts_dir . If specified, only layouts within this subdir will be processed. Useful to specify separate print layouts per tenant. Default: `` document_templates_dir root config document_templates_dir Type: string Directory containing the jasper report templates (*.jrxml). Default: /reports qgis_projects_scan_base_dir root config qgis_projects_scan_base_dir Type: string Path for QGIS projects, which should be automatically detected. Must be a subdir qgis_projects_base_dir . Example: /data/scan group_scanned_projects_by_dir root config group_scanned_projects_by_dir Type: boolean Option to group scanned projects by directory in themes configuration. Default: false save_scanned_projects_in_config root config save_scanned_projects_in_config Type: boolean Option to save scanned projects and groups in themes configuration. Requires write access to $INPUT_CONFIG_PATH for config generator service. Default: false permissions_default_allow root config permissions_default_allow Type: boolean Set whether resources are permitted or restricted by default. Example: true inherit_info_permissions root config inherit_info_permissions Type: boolean Whether info service/layer/attribute permissions should be inherited from the corresponding map/layer/attribute. Only useful if permissions_default_allow=false . Default: false validate_schema root config validate_schema Type: boolean Validate configuration against schema. Example: true config_path root config config_path Type: string Target path for generated service configs and permissions, if not set by $OUTPUT_CONFIG_PATH . Default: /tmp skip_print_layer_groups root config skip_print_layer_groups Type: boolean Skip group layers containing print layers. Default: false layer_opacities root config layer_opacities Type: object Layer opacity values for QGIS <= 3.10. Default: {} project_settings_read_timeout root config project_settings_read_timeout Type: number Timeout for GetProjectSettings, GetCapabilities and DescribeFeatureType requests, in seconds. Default: 60 autogen_keyvaltable_datasets root config autogen_keyvaltable_datasets Type: boolean Whether to automatically generate data service datasets used for key-value relationships without requiring corresponding data resources to be created. Warning: this will expose the key and value fields of the key-value table as world readable. Default: false generate_nested_nrel_forms root config generate_nested_nrel_forms Type: boolean Whether to generate nested nrelation forms instead of a tabluar view. Default: false use_default_map_thumbnail root config use_default_map_thumbnail Type: object Whether to use the default mapthumb ( mapthumbs/default.jpg ) instead of generating the thumbnail via GetMap if no custom thumbnail is provided. Default: false generate_thumbnail_timeout root config generate_thumbnail_timeout Type: number Timeout for GetMap request when generating thumbnail, in seconds. Default: 10 ignore_errors root config ignore_errors Type: boolean Ignore errors during generation to allow creating configuration files despite some errors. Default: false strip_scan_prefix_from_theme_names root config strip_scan_prefix_from_theme_names Type: boolean Whether to strip the scan dir prefix from the generated theme names. Avoids the 'scan/<name>' prefix in the theme ids which appear in the t parameter in the viewer URL. Default: false services Required root services Service configs Type: array Service specific config options for generating their service configs No Additional Items Each item of this array must be: root services services items Generator config for a service Any of common_service mapViewer ogc root services services items anyOf common_service Type: object Generator config for a QWC service name Required root services services items anyOf item 0 name Type: string Service name config Required root services services items anyOf item 0 config Type: object QWC service config options (cf. its JSON schema). This is copied unmodified to the service config. root services services items anyOf mapViewer Type: object Generator config for Map Viewer name Required root services services items anyOf item 1 name Type: const Service name Specific value: \"mapViewer\" generator_config Required root services services items anyOf item 1 generator_config Type: object Additional config for generating MapViewer resources qwc2_config Required root services services items anyOf item 1 generator_config qwc2_config Type: object Additional config for QWC2 application configuration qwc2_config_file Required root services services items anyOf item 1 generator_config qwc2_config qwc2_config_file Type: string Path to QWC2 config.json file. Example: /qwc2/config.json qwc2_index_file Required root services services items anyOf item 1 generator_config qwc2_config qwc2_index_file Type: string Path to QWC2 index.html file. Example: /qwc2/index.html config Required root services services items anyOf item 1 config Type: object Map Viewer config options (cf. JSON schema qwc-map-viewer.json). This is copied unmodified to the service config. root services services items anyOf ogc Type: object Generator config for OGC service name Required root services services items anyOf item 2 name Type: const Service name Specific value: \"ogc\" generator_config root services services items anyOf item 2 generator_config Type: object Additional config for generating OGC service resources wms_services root services services items anyOf item 2 generator_config wms_services Type: object Additional config for WMS services online_resources root services services items anyOf item 2 generator_config wms_services online_resources Type: object Custom OnlineResources shown in GetCapabilities service root services services items anyOf item 2 generator_config wms_services online_resources service Type: string Format: uri Default public base URL for OnlineResources feature_info root services services items anyOf item 2 generator_config wms_services online_resources feature_info Type: string Format: uri Public base URL for FeatureInfo OnlineResources legend root services services items anyOf item 2 generator_config wms_services online_resources legend Type: string Format: uri Public base URL for Legend OnlineResources config Required root services services items anyOf item 2 config Type: object OGC service config options (cf. JSON schema qwc-ogc-service.json). This is copied unmodified to the service config. Generated using json-schema-for-humans on 2025-10-09 at 10:46:05 +0000","title":"Qwc config generator"},{"location":"references/qwc-config-generator_readme/","text":"QWC ConfigGenerator \u00b6 Generates JSON files for service configs and permissions from WMS GetCapabilities, QGS projects and QWC ConfigDB. This service is integrated into qwc-docker , consult qwc-services.github.io for the general qwc-services documentation. Setup \u00b6 Create a ConfigGenerator config file tenantConfig.json below INPUT_CONFIG_PATH (see below) for each tenant. Configuration \u00b6 JSON schema Example tenantConfig.json NOTE: the Search service configuration takes its resources directly from the ConfigGenerator configuration. Its Permissions are collected from the ConfigDB ( solr_facet resources), unless they are defined in the ConfigGenerator configuration. Schema validation \u00b6 By default, the ConfigGenerator will validate the service configurations in tenantConfig.json against the schema definition of the service. The JSON Schemas are loaded from local files in JSON_SCHEMAS_PATH , or else downloaded from https://github.com/qwc-services/ if no schema files are present. You can disable the schema validation by setting \"validate_schema\": false in the ConfigGenerator's config block in tenantConfig.json . Custom resource types \u00b6 If you want to define custom resource types for a custom service, you can add a record for the resource type to the configdb INSERT INTO qwc_config.resource_types(name, description, list_order) values ('<resource_name>', '<resource_description>', <list_order>); and then add it to the custom_resource_types setting. Additional services \u00b6 For any additional service (without specific resources), ConfigGenerator generates the configuration in OUTPUT_CONFIG_PATH directory. Add the following configuration and adapt it to your service in tenantConfig.json : { \"name\": \"<service_name>\", \"schema_url\": \"<service_schema_url>\", \"config\": {...} } Note : service_name is expected to be camel case (i.e. adminGui ), and the service name in the generated config will lowercase and hyphenated (i.e. admin-gui ). Usage \u00b6 Script \u00b6 Show command options: uv run src/config_generator_cli.py --help Generate both service configs and permissions: uv run src/config_generator_cli.py ./tenantConfig.json all Generate service config files: uv run src/config_generator_cli.py ./tenantConfig.json service_configs Generate permissions file: uv run src/config_generator_cli.py ./tenantConfig.json permissions Service \u00b6 Set the INPUT_CONFIG_PATH environment variable to the base directory where for the configuration files are that should be read by the ConfigGenerator (default: config-in/ ). Set the OUTPUT_CONFIG_PATH environment variable to the base directory where the ConfigGenerator should output service configurations and permissions (default: /tmp/ ). Base URL: http://localhost:5010/ Generate both service configs and permissions for default tenant: curl -X POST \"http://localhost:5010/generate_configs?tenant=default\" Update JSON schemas \u00b6 You can change the directory from where the ConfigGenerator reads its schemas via the JSON_SCHEMAS_PATH environment variable (default /tmp/ ). You can change the versions of the schemas that the ConfigGenerator uses for verification inside schema-versions.json . Download JSON schemas: uv run src/download_json_schemas.py master Docker usage \u00b6 See sample docker-compose.yml of qwc-docker .","title":"Qwc config generator readme"},{"location":"references/qwc-config-generator_readme/#qwc-configgenerator","text":"Generates JSON files for service configs and permissions from WMS GetCapabilities, QGS projects and QWC ConfigDB. This service is integrated into qwc-docker , consult qwc-services.github.io for the general qwc-services documentation.","title":"QWC ConfigGenerator"},{"location":"references/qwc-config-generator_readme/#setup","text":"Create a ConfigGenerator config file tenantConfig.json below INPUT_CONFIG_PATH (see below) for each tenant.","title":"Setup"},{"location":"references/qwc-config-generator_readme/#configuration","text":"JSON schema Example tenantConfig.json NOTE: the Search service configuration takes its resources directly from the ConfigGenerator configuration. Its Permissions are collected from the ConfigDB ( solr_facet resources), unless they are defined in the ConfigGenerator configuration.","title":"Configuration"},{"location":"references/qwc-config-generator_readme/#schema-validation","text":"By default, the ConfigGenerator will validate the service configurations in tenantConfig.json against the schema definition of the service. The JSON Schemas are loaded from local files in JSON_SCHEMAS_PATH , or else downloaded from https://github.com/qwc-services/ if no schema files are present. You can disable the schema validation by setting \"validate_schema\": false in the ConfigGenerator's config block in tenantConfig.json .","title":"Schema validation"},{"location":"references/qwc-config-generator_readme/#custom-resource-types","text":"If you want to define custom resource types for a custom service, you can add a record for the resource type to the configdb INSERT INTO qwc_config.resource_types(name, description, list_order) values ('<resource_name>', '<resource_description>', <list_order>); and then add it to the custom_resource_types setting.","title":"Custom resource types"},{"location":"references/qwc-config-generator_readme/#additional-services","text":"For any additional service (without specific resources), ConfigGenerator generates the configuration in OUTPUT_CONFIG_PATH directory. Add the following configuration and adapt it to your service in tenantConfig.json : { \"name\": \"<service_name>\", \"schema_url\": \"<service_schema_url>\", \"config\": {...} } Note : service_name is expected to be camel case (i.e. adminGui ), and the service name in the generated config will lowercase and hyphenated (i.e. admin-gui ).","title":"Additional services"},{"location":"references/qwc-config-generator_readme/#usage","text":"","title":"Usage"},{"location":"references/qwc-config-generator_readme/#script","text":"Show command options: uv run src/config_generator_cli.py --help Generate both service configs and permissions: uv run src/config_generator_cli.py ./tenantConfig.json all Generate service config files: uv run src/config_generator_cli.py ./tenantConfig.json service_configs Generate permissions file: uv run src/config_generator_cli.py ./tenantConfig.json permissions","title":"Script"},{"location":"references/qwc-config-generator_readme/#service","text":"Set the INPUT_CONFIG_PATH environment variable to the base directory where for the configuration files are that should be read by the ConfigGenerator (default: config-in/ ). Set the OUTPUT_CONFIG_PATH environment variable to the base directory where the ConfigGenerator should output service configurations and permissions (default: /tmp/ ). Base URL: http://localhost:5010/ Generate both service configs and permissions for default tenant: curl -X POST \"http://localhost:5010/generate_configs?tenant=default\"","title":"Service"},{"location":"references/qwc-config-generator_readme/#update-json-schemas","text":"You can change the directory from where the ConfigGenerator reads its schemas via the JSON_SCHEMAS_PATH environment variable (default /tmp/ ). You can change the versions of the schemas that the ConfigGenerator uses for verification inside schema-versions.json . Download JSON schemas: uv run src/download_json_schemas.py master","title":"Update JSON schemas"},{"location":"references/qwc-config-generator_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-data-service/","text":"<title>QWC Data Service</title> QWC Data Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-data-service/raw/master/schemas/qwc-data-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"data\" config Required root config Config options Type: object attachments_base_dir root config attachments_base_dir Type: string Base dir where attachments are stored attachments_namespace_dir root config attachments_namespace_dir Type: string The namespace dir, below attachments_base_dir . You can use {tenant}, {map}, {dataset}. Default is '{tenant}/{map}.{dataset}' attachment_store_pattern root config attachment_store_pattern Type: string The path pattern to use when saving attachments to disk. You can use {random}, {filename}, {ext} and {<field>}, where field refers to the value of the field <field> of the committed feature. Default is '{random}/{filename}' allowed_attachment_extensions root config allowed_attachment_extensions Type: string Comma separated list of allowed attachment file extensions, i.e. '.png,.jpg' recaptcha_site_secret_key root config recaptcha_site_secret_key Type: string Captcha site secret key. Set to enable ReCAPTCHA verification for public users max_attachment_file_size root config max_attachment_file_size Type: number Maximum attachment file size in bytes clamd_host root config clamd_host Type: string Hostname of ClamD server listening on TCP port 3310. If set, uploaded files are checked by ClamAV upload_user_field_suffix root config upload_user_field_suffix Type: string Field suffix where to log the username who last changed an upload field, i.e. <fieldname>__<suffix> for the field <fieldname>. If empty, username is not logged. create_timestamp_field root config create_timestamp_field Type: string If specified, the timestamp of the creation of the record will be logged to the <create_timestamp_field> field of the record. edit_timestamp_field root config edit_timestamp_field Type: string If specified, the timestamp of the last mutation to a record will be logged to the <edit_timestamp_field> field of the record. write_utc_timestamps root config write_utc_timestamps Type: boolean Whether to write the create/edit timestamps in UTC, as opposed to local time. Default: false create_user_field root config create_user_field Type: string If specified, the username of the user who created a record with be logged to the <create_user_field> field of the record. edit_user_field root config edit_user_field Type: string If specified, the username of the last user who performed a mutation to a record with be logged to the <edit_user_field> field of the record. geometry_default_allow_null root config geometry_default_allow_null Type: boolean Whether to allow null geometries by default allowed_extensions_per_dataset root config allowed_extensions_per_dataset Type: object Loopup of allowed attachment file extensions per dataset, values as comma separated list, i.e. '.png,.jpg' max_attachment_file_size_per_dataset root config max_attachment_file_size_per_dataset Type: object Lookup of maximum attachment file size in bytes per dataset resources Required root resources Resources Type: object datasets Required root resources datasets Datasets Type: array of object No Additional Items Each item of this array must be: root resources datasets Dataset Dataset Type: object PostgreSQL metadata and field constraints for a dataset name Required root resources datasets Dataset name Type: string Dataset name db_url Required root resources datasets Dataset db_url Type: string DB connection string for read and write access (or read-only access if db write url is present) db_write_url root resources datasets Dataset db_write_url Type: string Optional DB connection string for write access schema Required root resources datasets Dataset schema Type: string table_name Required root resources datasets Dataset table_name Type: string primary_key Required root resources datasets Dataset primary_key Type: string fields Required root resources datasets Dataset fields Type: array of object Dataset fields with optional constraints No Additional Items Each item of this array must be: root resources datasets Dataset fields fields items Type: object name Required root resources datasets Dataset fields fields items name Type: string Field name data_type Required root resources datasets Dataset fields fields items data_type Type: enum (of string) Default: \"text\" Must be one of: \"USER-DEFINED\" \"bigint\" \"boolean\" \"character\" \"character varying\" \"date\" \"double precision\" \"file\" \"integer\" \"json\" \"jsonb\" \"numeric\" \"real\" \"smallint\" \"text\" \"time\" \"timestamp with time zone\" \"timestamp without time zone\" \"uuid\" constraints root resources datasets Dataset fields fields items constraints Type: object maxlength root resources datasets Dataset fields fields items constraints maxlength Type: integer pattern root resources datasets Dataset fields fields items constraints pattern Type: string min root resources datasets Dataset fields fields items constraints min Type: number max root resources datasets Dataset fields fields items constraints max Type: number numeric_precision root resources datasets Dataset fields fields items constraints numeric_precision Type: integer numeric_scale root resources datasets Dataset fields fields items constraints numeric_scale Type: integer step root resources datasets Dataset fields fields items constraints step Type: number values root resources datasets Dataset fields fields items constraints values Type: array of object No Additional Items Each item of this array must be: root resources datasets Dataset fields fields items constraints values values items Type: object label Required root resources datasets Dataset fields fields items constraints values values items label Type: string value Required root resources datasets Dataset fields fields items constraints values values items value Type: string readOnly root resources datasets Dataset fields fields items constraints readOnly Type: boolean required root resources datasets Dataset fields fields items constraints required Type: boolean geometry root resources datasets Dataset geometry PostGIS geometry metadata Type: object geometry_column Required root resources datasets Dataset geometry geometry_column Type: string geometry_type Required root resources datasets Dataset geometry geometry_type Type: enum (of string) Must be one of: \"POINT\" \"POINTZ\" \"LINESTRING\" \"LINESTRINGZ\" \"POLYGON\" \"POLYGONZ\" \"MULTIPOINT\" \"MULTIPOINTZ\" \"MULTILINESTRING\" \"MULTILINESTRINGZ\" \"MULTIPOLYGON\" \"MULTIPOLYGONZ\" \"CURVE\" \"CURVEZ\" \"CIRCULARSTRING\" \"CIRCULARSTRINGZ\" \"COMPOUNDCURVE\" \"COMPOUNDCURVEZ\" \"MULTICURVE\" \"MULTICURVEZ\" \"SURFACE\" \"SURFACEZ\" \"CURVEPOLYGON\" \"CURVEPOLYGONZ\" \"MULTISURFACE\" \"MULTISURFACEZ\" srid Required root resources datasets Dataset geometry srid SRID Type: integer Spatial Reference System Identifier (EPSG code) allow_null root resources datasets Dataset geometry allow_null Allow NULL geometries Type: boolean Default: false Allow setting geometry values to NULL Generated using json-schema-for-humans on 2025-10-09 at 10:46:07 +0000","title":"Qwc data service"},{"location":"references/qwc-data-service_readme/","text":"QWC Data Service \u00b6 Edit spatial and unlocated features of datasets via GeoJSON. This service is integrated into qwc-docker , consult qwc-services.github.io for the general qwc-services documentation. Setup \u00b6 Uses PostgreSQL connection service or connection to a PostGIS database. This connection's user requires read and write access to the configured tables. qwc_demo example \u00b6 Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service_write requires read and write access to the configured tables of the data layers from the QGIS project qwc_demo.qgs . Setup PostgreSQL connection service file ~/.pg_service.conf : [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service_write password=qwc_service_write sslmode=disable Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Data Service config \u00b6 JSON schema Example dataConfig.json Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"data_datasets\": [ { \"name\": \"qwc_demo.edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\" ], \"writable\": true, \"creatable\": true, \"readable\": true, \"updatable\": true, \"deletable\": true } ] } } ] } Usage \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5012/ Service API: http://localhost:5012/api/ Sample requests: curl 'http://localhost:5012/qwc_demo.edit_points/' General Information for all operations \u00b6 Datatypes-Encoding \u00b6 JSON only defines recommendations or has no information concerning the encoding of some quite common used database data types. Following a description on how these are encoded in the data service API. Date: ISO date strings YYYY-MM-DD Datetime: ISO date/time strings YYYY-MM-DDThh:mm:ss UUID: Hex-encoded string format. Example: '6fa459ea-ee8a-3ca4-894e-db77e160355e' Feature-ID \u00b6 For operations like updating or deleting features, records are identified by a feature id . This id refers to the primary key of the database table and is usually kept constant over time. Filter expressions \u00b6 Query operations support passing filter expressions to narrow down the results. This expression is a serialized JSON array of the format: [[\"<name>\", \"<op>\", <value>],\"and|or\",[\"<name>\",\"<op>\",<value>],...] name is the attribute column name. If name begins with ? , the filter is only applied if the column name exists. op can be one of \"=\", \"!=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"LIKE\", \"ILIKE\", \"IS\", \"IS NOT\" The operators are applied on the original database types. If value is null , the operator should be IS or IS NOT . value can be of type string , int , float or null . For string operations, the SQL wildcard character % can be used. Filter examples \u00b6 Find all features in the dataset with a number field smaller 10 and a matching name field: [[\"name\",\"LIKE\",\"example%\"],\"and\",[\"number\",\"<\",10]] Find all features in the dataset with a last change before 1st of January 2020 or having NULL as lastchange value: [[\"lastchange\",\"<\",\"2020-01-01T12:00:00\"],\"or\",[\"lastchange\",\"IS\",null]] Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py Testing \u00b6 Run all tests: python test.py Run single test module: python -m unittest tests.feature_validation_tests Run single test case: python -m unittest tests.feature_validation_tests.FeatureValidationTestCase Run single test method: python -m unittest tests.feature_validation_tests.FeatureValidationTestCase.test_field_constraints","title":"Qwc data service readme"},{"location":"references/qwc-data-service_readme/#qwc-data-service","text":"Edit spatial and unlocated features of datasets via GeoJSON. This service is integrated into qwc-docker , consult qwc-services.github.io for the general qwc-services documentation.","title":"QWC Data Service"},{"location":"references/qwc-data-service_readme/#setup","text":"Uses PostgreSQL connection service or connection to a PostGIS database. This connection's user requires read and write access to the configured tables.","title":"Setup"},{"location":"references/qwc-data-service_readme/#qwc_demo-example","text":"Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service_write requires read and write access to the configured tables of the data layers from the QGIS project qwc_demo.qgs . Setup PostgreSQL connection service file ~/.pg_service.conf : [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service_write password=qwc_service_write sslmode=disable","title":"qwc_demo example"},{"location":"references/qwc-data-service_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-data-service_readme/#data-service-config","text":"JSON schema Example dataConfig.json","title":"Data Service config"},{"location":"references/qwc-data-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"data_datasets\": [ { \"name\": \"qwc_demo.edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\" ], \"writable\": true, \"creatable\": true, \"readable\": true, \"updatable\": true, \"deletable\": true } ] } } ] }","title":"Permissions"},{"location":"references/qwc-data-service_readme/#usage","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5012/ Service API: http://localhost:5012/api/ Sample requests: curl 'http://localhost:5012/qwc_demo.edit_points/'","title":"Usage"},{"location":"references/qwc-data-service_readme/#general-information-for-all-operations","text":"","title":"General Information for all operations"},{"location":"references/qwc-data-service_readme/#datatypes-encoding","text":"JSON only defines recommendations or has no information concerning the encoding of some quite common used database data types. Following a description on how these are encoded in the data service API. Date: ISO date strings YYYY-MM-DD Datetime: ISO date/time strings YYYY-MM-DDThh:mm:ss UUID: Hex-encoded string format. Example: '6fa459ea-ee8a-3ca4-894e-db77e160355e'","title":"Datatypes-Encoding"},{"location":"references/qwc-data-service_readme/#feature-id","text":"For operations like updating or deleting features, records are identified by a feature id . This id refers to the primary key of the database table and is usually kept constant over time.","title":"Feature-ID"},{"location":"references/qwc-data-service_readme/#filter-expressions","text":"Query operations support passing filter expressions to narrow down the results. This expression is a serialized JSON array of the format: [[\"<name>\", \"<op>\", <value>],\"and|or\",[\"<name>\",\"<op>\",<value>],...] name is the attribute column name. If name begins with ? , the filter is only applied if the column name exists. op can be one of \"=\", \"!=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"LIKE\", \"ILIKE\", \"IS\", \"IS NOT\" The operators are applied on the original database types. If value is null , the operator should be IS or IS NOT . value can be of type string , int , float or null . For string operations, the SQL wildcard character % can be used.","title":"Filter expressions"},{"location":"references/qwc-data-service_readme/#filter-examples","text":"Find all features in the dataset with a number field smaller 10 and a matching name field: [[\"name\",\"LIKE\",\"example%\"],\"and\",[\"number\",\"<\",10]] Find all features in the dataset with a last change before 1st of January 2020 or having NULL as lastchange value: [[\"lastchange\",\"<\",\"2020-01-01T12:00:00\"],\"or\",[\"lastchange\",\"IS\",null]]","title":"Filter examples"},{"location":"references/qwc-data-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-data-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-data-service_readme/#testing","text":"Run all tests: python test.py Run single test module: python -m unittest tests.feature_validation_tests Run single test case: python -m unittest tests.feature_validation_tests.FeatureValidationTestCase Run single test method: python -m unittest tests.feature_validation_tests.FeatureValidationTestCase.test_field_constraints","title":"Testing"},{"location":"references/qwc-db-auth/","text":"<title>QWC DB authentication service</title> QWC DB authentication service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"db-auth\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config password_min_length root config password_min_length Type: integer Min password length. Default: 8 password_max_length root config password_max_length Type: integer Max password length, or -1 to disable. Default: -1 password_constraints root config password_constraints Type: array of string List of RegExes for additional password constraints. Default: [] No Additional Items Each item of this array must be: root config password_constraints password_constraints items Type: string password_min_constraints root config password_min_constraints Type: integer Min number of password_constraints to match for password to be valid. Default: 0 password_constraints_message root config password_constraints_message Type: string Validation message if password constraints are not met. Default: Password does not match constraints password_expiry root config password_expiry Type: integer Number of days until password expires, or -1 to disable. Default: -1 password_expiry_notice root config password_expiry_notice Type: integer Show an expiry notice within this number of days before a password expires, or -1 to disable. Default: -1 password_update_interval root config password_update_interval Type: integer Min number of seconds before password may be changed again, or -1 to disable. Default: -1 password_allow_reuse root config password_allow_reuse Type: boolean Set whether previous passwords may be reused or not. Default: true user_info_fields root config user_info_fields Type: array of string List of user info fields to include in JWT identity. Default: [] No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: string logo_image_url root config logo_image_url Type: string URL to a logo image to show in the login form. Default: null background_image_url root config background_image_url Type: string URL to a background image for the login page. Default: null customstylesheet root config customstylesheet Type: string URL of custom stylesheet. Default: null terms_url root config terms_url Type: string URL to terms of use. Default: null login_hint root config login_hint Login hint text, shown above login form fields. Either a string, or dictionary {\"<lang>\": \"<text>\"} . When providing a dictionary, the entry matching the current locale will be searched, with fallback to en if no entry for the current locale exists, and fallback to an empty string if no en entry exists. Default: null One of Option 1 Option 2 root config login_hint oneOf item 0 Type: string root config login_hint oneOf item 1 Type: object ^[a-z]{2}$ Pattern Property Pattern Property All properties whose name matches the following regular expression must respect the following conditions Property name regular expression: ^[a-z]{2}$ root config login_hint oneOf item 1 ^[a-z]{2}$ Type: string post_param_login root config post_param_login Type: boolean Whether 'username' and 'password', and possibly additional parameters, are passed as POST parameters. Additional parameters are appended to the target url query. Default: false max_login_attempts root config max_login_attempts Type: integer Maximum login attempts before login is blocked. Default: 20 totp_enabled root config totp_enabled Type: boolean Enable two factor authentication using TOTP. Default: false totp_enabled_for_admin root config totp_enabled_for_admin Type: boolean Whether to enable two-factor authentication using TOTP for admin. Default: false totp_issuer_name root config totp_issuer_name Type: string Issuer name for QR code URI. Default: QWC Services ip_blacklist_duration root config ip_blacklist_duration Type: integer How many seconds an IP will remain in the blacklist. See also ip_blacklist_max_attempt_count . Default: 300 ip_blacklist_max_attempt_count root config ip_blacklist_max_attempt_count Type: integer After how many failed login attempts an IP will be blacklisted. Should be less than max_login_attempts . See also ip_blacklist_duration . Default: 10 force_password_change_first_login root config force_password_change_first_login Type: boolean Whether to force users to change the password on first login (regardless of user force password change setting). Default: false required_restore_input root config required_restore_input Type: array of string Input required in password restore form. Can be one or both of username and email . Default: ['username', 'email'] No Additional Items Each item of this array must be: root config required_restore_input required_restore_input items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:08 +0000","title":"Qwc db auth"},{"location":"references/qwc-db-auth_readme/","text":"Authentication with User DB \u00b6 Authentication service with local user database. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . DB Auth Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/dbAuthConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json\", \"service\": \"db-auth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\" } } Set the MAX_LOGIN_ATTEMPTS environment variable to set the maximum number of failed login attempts before sign in is blocked (default: 20 ). A minimum password length of 8 with no other constraints is set by default. Optional password complexity constraints can be set using the following config options: \"config\": { \"password_min_length\": 8, \"password_max_length\": 128, \"password_constraints\": [ \"[A-Z]\", \"[a-z]\", \"\\\\d\", \"[ !\\\"#$%&'()*+,\\\\-./\\\\\\\\:;<=>?@\\\\[\\\\]^_`{|}~]\" ], \"password_min_constraints\": 3, \"password_constraints_message\": \"Password must contain at least three of these character types: uppercase letters, lowercase letters, numbers, special characters\" } password_min_length and password_max_length can be set independently. password_constraints is a list of regular expression of which at least password_min_constraints have to match for the password to be valid, otherwise the password_constraints_message is shown. Note that the regular expression have to be JSON escaped and allow only patterns supported by Python's re module. If the qwc_config.password_histories table is present, additional optional password constraints may be set: \"config\": { \"password_expiry\": 365, \"password_expiry_notice\": 10, \"password_update_interval\": 600, \"password_allow_reuse\": false } password_expiry (default: -1 ): Number of days until a password expires, or -1 to disable. Forces a password change once expired. password_expiry_notice (default: -1 ): Show an expiry notice within this number of days before a password expires, or -1 to disable password_update_interval (default: -1 ): Min number of seconds before a password may be changed again, or -1 to disable password_allow_reuse (default: true ): Set whether a user may reuse previous passwords or not Besides the form based DB login, an (insecure) plain POST login is supported. This method can be activated by setting POST_PARAM_LOGIN=True . User and password are passed as POST parameters username and password . Usage example: curl -d 'username=demo&password=demo' http://localhost:5017/login . Additional user info fields from qwc_config.user_infos may be added to the JWT identity by setting user_info_fields : \"config\": { \"user_info_fields\": [\"surname\", \"first_name\"] } Flask-Mail is used for sending mails like password resets. These are the available options: MAIL_SERVER : default \u2018localhost\u2019 MAIL_PORT : default 25 MAIL_USE_TLS : default False MAIL_USE_SSL : default False MAIL_DEBUG : default app.debug MAIL_USERNAME : default None MAIL_PASSWORD : default None MAIL_DEFAULT_SENDER : default None MAIL_MAX_EMAILS : default None MAIL_SUPPRESS_SEND : default app.testing MAIL_ASCII_ATTACHMENTS : default False In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests. Two factor authentication \u00b6 Two factor authentication using TOTP can be enabled by setting the environment variable TOTP_ENABLED=True . This will require an additional verification token after sign in, based on the user's TOTP secret. A personal QR code for setting up the two factor authentication is shown to the user on first sign in (or if the TOTP secret is empty). The TOTP issuer name for your application can be set using the environment variable TOTP_ISSUER_NAME=\"QWC Services\" . An user's TOTP secret can be reset by clearing it in the Admin GUI user form. Customization \u00b6 You can add a custom logo and a custom background image by setting the following config options: \"config\": { \"background_image_url\": \"<url>\", \"logo_image_url\": \"<url>\" } The specified URLs can be absolute or relative. For relative URLs, you can write i.e. \"config\": { \"background_image_url\": \"/auth/static/background.jpg\", \"logo_image_url\": \"/auth/static/logo.jpg\" } where /auth is the service mountpoint and place your custom images inside the static subfolder of the auth-service, or, if using docker and docker-compose, mount them accordingly: qwc-auth-service: [...] volumes: - ./volumes/assets/Background.jpg:/srv/qwc_service/static/background.jpg - ./volumes/assets/logo.png:/srv/qwc_service/static/logo.jpg If you want to override some styles, you can set the customstylesheet config option to the name of a file below the static subfolder of the auth-service, and it will get included into the base template. Usage \u00b6 Run standalone application: python src/server.py Endpoints: http://localhost:5017/login http://localhost:5017/logout Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies: uv sync Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure development environment: echo FLASK_ENV=development >.flaskenv export MAIL_SUPPRESS_SEND=True export MAIL_DEFAULT_SENDER=from@example.com Start local service: uv run src/server.py","title":"Qwc db auth readme"},{"location":"references/qwc-db-auth_readme/#authentication-with-user-db","text":"Authentication service with local user database.","title":"Authentication with User DB"},{"location":"references/qwc-db-auth_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-db-auth_readme/#db-auth-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/dbAuthConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json\", \"service\": \"db-auth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\" } } Set the MAX_LOGIN_ATTEMPTS environment variable to set the maximum number of failed login attempts before sign in is blocked (default: 20 ). A minimum password length of 8 with no other constraints is set by default. Optional password complexity constraints can be set using the following config options: \"config\": { \"password_min_length\": 8, \"password_max_length\": 128, \"password_constraints\": [ \"[A-Z]\", \"[a-z]\", \"\\\\d\", \"[ !\\\"#$%&'()*+,\\\\-./\\\\\\\\:;<=>?@\\\\[\\\\]^_`{|}~]\" ], \"password_min_constraints\": 3, \"password_constraints_message\": \"Password must contain at least three of these character types: uppercase letters, lowercase letters, numbers, special characters\" } password_min_length and password_max_length can be set independently. password_constraints is a list of regular expression of which at least password_min_constraints have to match for the password to be valid, otherwise the password_constraints_message is shown. Note that the regular expression have to be JSON escaped and allow only patterns supported by Python's re module. If the qwc_config.password_histories table is present, additional optional password constraints may be set: \"config\": { \"password_expiry\": 365, \"password_expiry_notice\": 10, \"password_update_interval\": 600, \"password_allow_reuse\": false } password_expiry (default: -1 ): Number of days until a password expires, or -1 to disable. Forces a password change once expired. password_expiry_notice (default: -1 ): Show an expiry notice within this number of days before a password expires, or -1 to disable password_update_interval (default: -1 ): Min number of seconds before a password may be changed again, or -1 to disable password_allow_reuse (default: true ): Set whether a user may reuse previous passwords or not Besides the form based DB login, an (insecure) plain POST login is supported. This method can be activated by setting POST_PARAM_LOGIN=True . User and password are passed as POST parameters username and password . Usage example: curl -d 'username=demo&password=demo' http://localhost:5017/login . Additional user info fields from qwc_config.user_infos may be added to the JWT identity by setting user_info_fields : \"config\": { \"user_info_fields\": [\"surname\", \"first_name\"] } Flask-Mail is used for sending mails like password resets. These are the available options: MAIL_SERVER : default \u2018localhost\u2019 MAIL_PORT : default 25 MAIL_USE_TLS : default False MAIL_USE_SSL : default False MAIL_DEBUG : default app.debug MAIL_USERNAME : default None MAIL_PASSWORD : default None MAIL_DEFAULT_SENDER : default None MAIL_MAX_EMAILS : default None MAIL_SUPPRESS_SEND : default app.testing MAIL_ASCII_ATTACHMENTS : default False In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests.","title":"DB Auth Service config"},{"location":"references/qwc-db-auth_readme/#two-factor-authentication","text":"Two factor authentication using TOTP can be enabled by setting the environment variable TOTP_ENABLED=True . This will require an additional verification token after sign in, based on the user's TOTP secret. A personal QR code for setting up the two factor authentication is shown to the user on first sign in (or if the TOTP secret is empty). The TOTP issuer name for your application can be set using the environment variable TOTP_ISSUER_NAME=\"QWC Services\" . An user's TOTP secret can be reset by clearing it in the Admin GUI user form.","title":"Two factor authentication"},{"location":"references/qwc-db-auth_readme/#customization","text":"You can add a custom logo and a custom background image by setting the following config options: \"config\": { \"background_image_url\": \"<url>\", \"logo_image_url\": \"<url>\" } The specified URLs can be absolute or relative. For relative URLs, you can write i.e. \"config\": { \"background_image_url\": \"/auth/static/background.jpg\", \"logo_image_url\": \"/auth/static/logo.jpg\" } where /auth is the service mountpoint and place your custom images inside the static subfolder of the auth-service, or, if using docker and docker-compose, mount them accordingly: qwc-auth-service: [...] volumes: - ./volumes/assets/Background.jpg:/srv/qwc_service/static/background.jpg - ./volumes/assets/logo.png:/srv/qwc_service/static/logo.jpg If you want to override some styles, you can set the customstylesheet config option to the name of a file below the static subfolder of the auth-service, and it will get included into the base template.","title":"Customization"},{"location":"references/qwc-db-auth_readme/#usage","text":"Run standalone application: python src/server.py Endpoints: http://localhost:5017/login http://localhost:5017/logout","title":"Usage"},{"location":"references/qwc-db-auth_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-db-auth_readme/#development","text":"Install dependencies: uv sync Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure development environment: echo FLASK_ENV=development >.flaskenv export MAIL_SUPPRESS_SEND=True export MAIL_DEFAULT_SENDER=from@example.com Start local service: uv run src/server.py","title":"Development"},{"location":"references/qwc-document-service/","text":"<title>QWC Document Service</title> QWC Document Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"document\" config Required root config Config options Type: object basic_auth_login_url root config basic_auth_login_url Type: array of string Login verification URL for requests with basic auth. Example: http://qwc-auth-service:9090/verify_login No Additional Items Each item of this array must be: root config basic_auth_login_url basic_auth_login_url items Type: string report_dir root config report_dir Type: string Default: \"/reports\" Directory which contains reports. permit_subreports root config permit_subreports Type: boolean Default: false Whether to automatically permit subreports included from a permitted parent report max_memory root config max_memory Type: string Default: \"1024M\" Maximum Java heap size for compiling like 1024M or 2G. locale root config locale Type: string Default: \"en_US\" The JVM locale, as a <lang>_<COUNTRY> string. virtualizer root config virtualizer JRSwapFileVirtualizer Type: object If configuration is set, a JRSwapFileVirtualizer is used for report generation. swapfile_blocksize root config virtualizer swapfile_blocksize Type: integer Default: 4096 The size of the blocks allocated by the swap file. swapfile_mingrowcount root config virtualizer swapfile_mingrowcount Type: integer Default: 100 The minimum number of blocks by which the swap file grows when full. virtualizer_maxsize root config virtualizer virtualizer_maxsize Type: integer Default: 5 The maximum size (in JRVirtualizable objects) of the paged in cache. resources Required root resources Resources Type: object document_templates Required root resources document_templates Type: array of object No Additional Items Each item of this array must be: root resources document_templates document_templates items Type: object template Required root resources document_templates document_templates items template Type: string datasource root resources document_templates document_templates items datasource Type: string table root resources document_templates document_templates items table Type: string primary_key root resources document_templates document_templates items primary_key Type: string parameter_name root resources document_templates document_templates items parameter_name Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:09 +0000","title":"Qwc document service"},{"location":"references/qwc-document-service_readme/","text":"Document service \u00b6 The document service delivers reports from the Jasper reporting service with permission control. Report source files ( *.jrxml ) must be placed below the report_dir (see config below). The reports are then referenced by their template name, which corresponds to their path below report_dir , without extension. For instance report_dir is /path/to/report/dir , then the template name for /path/to/report/dir/topic/myreport.jrxml is topic/myreport . The request format is http://localhost:5018/<template>.<ext>?<key>=<value>&... where ext is a supported report format ( pdf , html , csv , docx , ods , odt , pptx , rtf , xlsx , xml ). If not specified, pdf is assumed. Query KVPs are passed to the Jasper as report parameters. Example request: http://localhost:5018/topic/myreport.pdf?FEATURE_ID=1 If your report uses a PostgresSQL data adapter, use the name of the desired PG service connection as data adapter name in the report, and the connection will be automatically looked up from the pg_service.conf file. Alternatively, you can set the name of the desired PG service connection as datasource of in the service resource configuration, see below. You can generically pass the generic feature query parameter, which will be resolved to the report feature parameter configured in the report query string. You can pass: A single or a comma-separated list of feature ids, i.e. http://localhost:5018/topic/myreport.pdf?feature=1,3,6,9 * to specify all features of the report datasource, i.e. http://localhost:5018/topic/myreport.pdf?feature=* If multiple feature ids are specified, an aggregated report for all specified features will be returned. Alternatively, provided FEATURE_ID is defined as a list in your report, you can pass single_report=true , and the entire list of feature ids will be passed to the report, which can i.e. render them in a table. To map feature to the report feature parameter, and to resolve feature=* , the table name, primary key column and report feature parameter will be extracted, if possible, from the report query string, which is expected to be of the form SELECT <...> FROM <table_name> WHERE <pk_column> = $P{<FEATURE_PARAM_NAME>} For more complex queries, you'll need to define table , primary_key and parameter_name in the report resource configuration, see below. Note that the value(s) of the feature query parameters are expected to be primary keys of the records of the table specified in the report query string. If your report includes external resources (i.e. images), place these below the report_dir and, add a REPORT_DIR parameter of type java.lang.String in the .jrxml and use $P{REPORT_DIR} in the resource location expression, for example: $P{REPORT_DIR} + \"mysubfolder/myimage.png\" If you may have a very large amount of input data, the report generation might result in a very large output file. This can lead to an Out-of-memory exception. To handle this, a \"Virtualizer\" could be used, which will cut the report into different files and save them on the hard drive during the generation process. The result generally makes the generation of the report a bit slower but it will solve the memory exception. To use a \"JRSwapFileVirtualizer\" for report generation, the virtualizer configuration has to be set (see example below). If your report requires extra fonts, place the *.ttfs below the src/fonts directory (when running locally) resp. mount them inside the /srv/qwc_service/fonts/ when running as docker container. Font names must respect the following naming convention: Regular: <FontName>.ttf or <FontName>-Regular.ttf Bold: <FontName>-Bold.ttf Italic: <FontName>-Italic.ttf BoldItalic: <FontName>-BoldItalic.ttf Set FLASK_DEBUG=1 to get additional logging output. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . JSON config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/documentConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json\", \"service\": \"document\", \"config\": { \"report_dir\": \"/path/to/report/dir\", \"max_memory\": \"1024M\", \"virtualizer\": { \"swapfile_blocksize\": 4096, \"swapfile_mingrowcount\" : 100, \"virtualizer_maxsize\": 1 } }, \"resources\": { \"document_templates\": [ { \"template\": \"demo\", \"datasource\": \"<pgservice_name>\", \"table\": \"<table_name>\", \"primary_key\": \"<primary_key_column_name>\", \"parameter_name\": \"<report_parameter_name>\" } ] } } Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"document_templates\": [ \"demo\", \"another demo\" ] } }, { \"role\": \"demo\", \"permissions\": { \"document_templates\": [] } } ] } Usage \u00b6 API documentation: http://localhost:5018/api/ Request format: http://localhost:5018/<template>?<key>=<value>&... Example: http://localhost:5018/BelasteteStandorte.pdf Arbitrary parameters can be appended to the request: http://localhost:5018/BelasteteStandorte.pdf?feature=123 The format of the report is extracted from the template name, i.e. http://localhost:5018/BelasteteStandorte.xls?feature=123 If no extension is present in the template name, PDF is used as format. Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install requirements: uv sync wget -P src/libs -i libs.txt Start local service: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py Testing \u00b6 Run all tests: FLASK_DEBUG=1 PYTHONPATH=$PWD/src FONT_DIR=$PWD/tests/fonts CONFIG_PATH=$PWD/tests/config/ uv run test.py","title":"Qwc document service readme"},{"location":"references/qwc-document-service_readme/#document-service","text":"The document service delivers reports from the Jasper reporting service with permission control. Report source files ( *.jrxml ) must be placed below the report_dir (see config below). The reports are then referenced by their template name, which corresponds to their path below report_dir , without extension. For instance report_dir is /path/to/report/dir , then the template name for /path/to/report/dir/topic/myreport.jrxml is topic/myreport . The request format is http://localhost:5018/<template>.<ext>?<key>=<value>&... where ext is a supported report format ( pdf , html , csv , docx , ods , odt , pptx , rtf , xlsx , xml ). If not specified, pdf is assumed. Query KVPs are passed to the Jasper as report parameters. Example request: http://localhost:5018/topic/myreport.pdf?FEATURE_ID=1 If your report uses a PostgresSQL data adapter, use the name of the desired PG service connection as data adapter name in the report, and the connection will be automatically looked up from the pg_service.conf file. Alternatively, you can set the name of the desired PG service connection as datasource of in the service resource configuration, see below. You can generically pass the generic feature query parameter, which will be resolved to the report feature parameter configured in the report query string. You can pass: A single or a comma-separated list of feature ids, i.e. http://localhost:5018/topic/myreport.pdf?feature=1,3,6,9 * to specify all features of the report datasource, i.e. http://localhost:5018/topic/myreport.pdf?feature=* If multiple feature ids are specified, an aggregated report for all specified features will be returned. Alternatively, provided FEATURE_ID is defined as a list in your report, you can pass single_report=true , and the entire list of feature ids will be passed to the report, which can i.e. render them in a table. To map feature to the report feature parameter, and to resolve feature=* , the table name, primary key column and report feature parameter will be extracted, if possible, from the report query string, which is expected to be of the form SELECT <...> FROM <table_name> WHERE <pk_column> = $P{<FEATURE_PARAM_NAME>} For more complex queries, you'll need to define table , primary_key and parameter_name in the report resource configuration, see below. Note that the value(s) of the feature query parameters are expected to be primary keys of the records of the table specified in the report query string. If your report includes external resources (i.e. images), place these below the report_dir and, add a REPORT_DIR parameter of type java.lang.String in the .jrxml and use $P{REPORT_DIR} in the resource location expression, for example: $P{REPORT_DIR} + \"mysubfolder/myimage.png\" If you may have a very large amount of input data, the report generation might result in a very large output file. This can lead to an Out-of-memory exception. To handle this, a \"Virtualizer\" could be used, which will cut the report into different files and save them on the hard drive during the generation process. The result generally makes the generation of the report a bit slower but it will solve the memory exception. To use a \"JRSwapFileVirtualizer\" for report generation, the virtualizer configuration has to be set (see example below). If your report requires extra fonts, place the *.ttfs below the src/fonts directory (when running locally) resp. mount them inside the /srv/qwc_service/fonts/ when running as docker container. Font names must respect the following naming convention: Regular: <FontName>.ttf or <FontName>-Regular.ttf Bold: <FontName>-Bold.ttf Italic: <FontName>-Italic.ttf BoldItalic: <FontName>-BoldItalic.ttf Set FLASK_DEBUG=1 to get additional logging output.","title":"Document service"},{"location":"references/qwc-document-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-document-service_readme/#json-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/documentConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json\", \"service\": \"document\", \"config\": { \"report_dir\": \"/path/to/report/dir\", \"max_memory\": \"1024M\", \"virtualizer\": { \"swapfile_blocksize\": 4096, \"swapfile_mingrowcount\" : 100, \"virtualizer_maxsize\": 1 } }, \"resources\": { \"document_templates\": [ { \"template\": \"demo\", \"datasource\": \"<pgservice_name>\", \"table\": \"<table_name>\", \"primary_key\": \"<primary_key_column_name>\", \"parameter_name\": \"<report_parameter_name>\" } ] } }","title":"JSON config"},{"location":"references/qwc-document-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables.","title":"Environment variables"},{"location":"references/qwc-document-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"document_templates\": [ \"demo\", \"another demo\" ] } }, { \"role\": \"demo\", \"permissions\": { \"document_templates\": [] } } ] }","title":"Permissions"},{"location":"references/qwc-document-service_readme/#usage","text":"API documentation: http://localhost:5018/api/ Request format: http://localhost:5018/<template>?<key>=<value>&... Example: http://localhost:5018/BelasteteStandorte.pdf Arbitrary parameters can be appended to the request: http://localhost:5018/BelasteteStandorte.pdf?feature=123 The format of the report is extracted from the template name, i.e. http://localhost:5018/BelasteteStandorte.xls?feature=123 If no extension is present in the template name, PDF is used as format.","title":"Usage"},{"location":"references/qwc-document-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-document-service_readme/#development","text":"Install requirements: uv sync wget -P src/libs -i libs.txt Start local service: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-document-service_readme/#testing","text":"Run all tests: FLASK_DEBUG=1 PYTHONPATH=$PWD/src FONT_DIR=$PWD/tests/fonts CONFIG_PATH=$PWD/tests/config/ uv run test.py","title":"Testing"},{"location":"references/qwc-elevation-service/","text":"<title>QWC Elevation Service</title> QWC Elevation Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"elevation\" config Required root config Config options Type: object elevation_dataset root config elevation_dataset Type: string Elevation dataset (file or URL). Example: https://data.sourcepole.com/srtm 1km 3857.tif elevation_datasets root config elevation_datasets Type: array of object List of elevation datasets to use for elevation queries. No Additional Items Each item of this array must be: root config elevation_datasets elevation_datasets items Type: object name root config elevation_datasets elevation_datasets items name Type: string Name of the elevation dataset. dataset_path root config elevation_datasets elevation_datasets items dataset_path Type: string Elevation dataset (file or URL). Example: https://data.sourcepole.com/srtm 1km 3857.tif Generated using json-schema-for-humans on 2025-10-09 at 10:46:10 +0000","title":"Qwc elevation service"},{"location":"references/qwc-elevation-service_readme/","text":"QWC Elevation Service \u00b6 Returns elevations. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Elevation Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/elevationConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\", \"service\": \"elevation\", \"config\": { \"elevation_dataset\": \"/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif\" } } Example with multiple datasets: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\", \"service\": \"elevation\", \"config\": { \"elevation_datasets\": [ { \"name\": \"SRTM\", \"dataset_path\": \"/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif\" }, { \"name\": \"Local\", \"dataset_path\": \"/dtm_local.tif\" } ] } } Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description ELEVATION_DATASET path/to/dtm.tif Usage \u00b6 Install GDAL Python bindings. python-gdal or python3-gdal packages on Debian/Ubuntu. Run with uv: uv venv --system-site-packages ELEVATION_DATASET=/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif uv run src/server.py API: * Runs by default on http://localhost:5002 * GET: /getelevation?pos=<pos>&crs=<crs> - pos : the query position, as x,y - crs : the crs of the query position - output : a json document with the elevation in meters: {elevation: h} - Example: http://localhost:5002/getelevation?pos=45.976,7.658&crs=EPSG:4326 * POST: /getheightprofile - payload : a json document as follows: { coordinates: [[x1,y1],[x2,y2],...], distances: [<dist_p1_p2>, <dist_p2_p3>, ...], projection: <EPSG:XXXX, projection of coordinates>, samples: <number of height samples to return> } output : a json document with heights in meters: {elevations: [h1, h2, ...]} Docker usage \u00b6 See sample docker-compose.yml of qwc-docker .","title":"Qwc elevation service readme"},{"location":"references/qwc-elevation-service_readme/#qwc-elevation-service","text":"Returns elevations.","title":"QWC Elevation Service"},{"location":"references/qwc-elevation-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-elevation-service_readme/#elevation-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/elevationConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\", \"service\": \"elevation\", \"config\": { \"elevation_dataset\": \"/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif\" } } Example with multiple datasets: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\", \"service\": \"elevation\", \"config\": { \"elevation_datasets\": [ { \"name\": \"SRTM\", \"dataset_path\": \"/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif\" }, { \"name\": \"Local\", \"dataset_path\": \"/dtm_local.tif\" } ] } }","title":"Elevation Service config"},{"location":"references/qwc-elevation-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description ELEVATION_DATASET path/to/dtm.tif","title":"Environment variables"},{"location":"references/qwc-elevation-service_readme/#usage","text":"Install GDAL Python bindings. python-gdal or python3-gdal packages on Debian/Ubuntu. Run with uv: uv venv --system-site-packages ELEVATION_DATASET=/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif uv run src/server.py API: * Runs by default on http://localhost:5002 * GET: /getelevation?pos=<pos>&crs=<crs> - pos : the query position, as x,y - crs : the crs of the query position - output : a json document with the elevation in meters: {elevation: h} - Example: http://localhost:5002/getelevation?pos=45.976,7.658&crs=EPSG:4326 * POST: /getheightprofile - payload : a json document as follows: { coordinates: [[x1,y1],[x2,y2],...], distances: [<dist_p1_p2>, <dist_p2_p3>, ...], projection: <EPSG:XXXX, projection of coordinates>, samples: <number of height samples to return> } output : a json document with heights in meters: {elevations: [h1, h2, ...]}","title":"Usage"},{"location":"references/qwc-elevation-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-ext-service/","text":"<title>QWC External Link Service</title> QWC External Link Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-ext-service/raw/master/schemas/qwc-ext-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"ext\" config Required root config Config options Type: object get_link_timeout root config get_link_timeout Type: number Timeout for get link requests, in seconds. Default: 10. post_link_timeout root config post_link_timeout Type: number Timeout for post link requests, in seconds. Default: 30. resources Required root resources Resources Type: object external_links Required root resources external_links Type: array of object No Additional Items Each item of this array must be: root resources external_links external_links items Type: object name Required root resources external_links external_links items name Type: string url Required root resources external_links external_links items url Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:11 +0000","title":"Qwc ext service"},{"location":"references/qwc-ext-service_readme/","text":"QWC external link service \u00b6 API documentation: http://localhost:5023/api/ Setup \u00b6 Declare the resource type in the config database: INSERT INTO qwc_config.resource_types(name, description, list_order) values ('external_links', 'External link name', <list_order>); Pick <list_order> according to the desired ordering position in the resource selection menu in the QWC Admin GUI. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . JSON config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/extConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-ext-service/master/schemas/qwc-ext-service.json\", \"service\": \"ext\", \"config\": { \"program_map\": { \"prog1\": \"http://my.secret.site/path/?tenant=$tenant$&user=$username$\", } }, \"resources\": { \"external_program_names\": [ \"prog1\" ] } } Development \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Qwc ext service readme"},{"location":"references/qwc-ext-service_readme/#qwc-external-link-service","text":"API documentation: http://localhost:5023/api/","title":"QWC external link service"},{"location":"references/qwc-ext-service_readme/#setup","text":"Declare the resource type in the config database: INSERT INTO qwc_config.resource_types(name, description, list_order) values ('external_links', 'External link name', <list_order>); Pick <list_order> according to the desired ordering position in the resource selection menu in the QWC Admin GUI.","title":"Setup"},{"location":"references/qwc-ext-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-ext-service_readme/#json-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/extConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-ext-service/master/schemas/qwc-ext-service.json\", \"service\": \"ext\", \"config\": { \"program_map\": { \"prog1\": \"http://my.secret.site/path/?tenant=$tenant$&user=$username$\", } }, \"resources\": { \"external_program_names\": [ \"prog1\" ] } }","title":"JSON config"},{"location":"references/qwc-ext-service_readme/#development","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Development"},{"location":"references/qwc-feature-info-service/","text":"<title>QWC FeatureInfo Service</title> QWC FeatureInfo Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-feature-info-service/master/schemas/qwc-feature-info-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"feature-info\" config Required root config Config options Type: object default_info_template root config default_info_template Type: string Default HTML info template. Default: null basic_auth_login_url root config basic_auth_login_url Type: array of string Login verification URL for requests with basic auth. Example: http://qwc-auth-service:9090/verify_login . Default: null No Additional Items Each item of this array must be: root config basic_auth_login_url basic_auth_login_url items Type: string default_info_template_path root config default_info_template_path Type: string Path to the default HTML info template. Default: null default_info_template_base64 root config default_info_template_base64 Type: string Default HTML info template in Base64 encoding. Default: null info_templates_path root config info_templates_path Type: string Path where custom info templates are store. Default: /info_templates/ default_qgis_server_url root config default_qgis_server_url Type: string Default URL for WMS GetFeatureInfo queries. Default: http://localhost:8001/ows/ network_timeout root config network_timeout Type: number Network timeout for requests forwarded to the QGIS Server, in seconds. Default: 30 qgis_server_url_tenant_suffix root config qgis_server_url_tenant_suffix Type: string If qgs_resources are placed in tenant specific subdirs, set this property to the respective subdir path portion. Default: <empty> data_service_url root config data_service_url Type: string Data service URL (external) for constructing attachment urls. Default: /api/v1/data/ transform_image_urls root config transform_image_urls Type: boolean Whether to transform image URLs to inline images. Default: true skip_empty_attributes root config skip_empty_attributes Type: boolean Whether to skip empty feature attributes in WMS GetFeatureInfo responses. Default: false use_permission_attribute_order root config use_permission_attribute_order Type: boolean Whether to order the attributes according to order of the permitted attribute names in WMS GetFeatureInfo responses, rather than the order returned by WMS GetFeatureInfo. Default: false resources Required root resources Resources Type: object wms_services root resources wms_services WMS service Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS WMS Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS name Type: string WMS service name root_layer Required root resources wms_services WMS root_layer Root layer of WMS (layer or group layer) One of Layer Group Layer Option 3 root resources wms_services WMS root_layer oneOf Layer Layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS root_layer oneOf Layer name Type: string WMS layer name type root resources wms_services WMS root_layer oneOf Layer type Type: const Layer type Specific value: \"layer\" title root resources wms_services WMS root_layer oneOf Layer title Type: string Layer title attributes root resources wms_services WMS root_layer oneOf Layer attributes Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Layer attributes attributes items Type: object name Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items name Type: string Attribute name alias root resources wms_services WMS root_layer oneOf Layer attributes attributes items alias Type: string format root resources wms_services WMS root_layer oneOf Layer attributes attributes items format Type: string Formatting expression for converting attribute values format_base64 root resources wms_services WMS root_layer oneOf Layer attributes attributes items format_base64 Type: string Formatting expression for converting attribute values, in Base64 encoding json_attribute_aliases root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases JSON attribute aliases Type: array of object Aliases for attributes in JSON values of type list No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items Type: object name Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items name Type: string Attribute name in JSON value alias Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items alias Type: string Alias for attribute in JSON value info_template root resources wms_services WMS root_layer oneOf Layer info_template Info template One of wms_info_template sql_info_template module_info_template root resources wms_services WMS root_layer oneOf Layer info_template oneOf wms_info_template Type: object Info template for WMS GetFeatureInfo No Additional Properties type Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 type Type: const Specific value: \"wms\" wms_url root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 wms_url Type: string Custom WMS URL if different from default_qgis_server_url template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template_path Type: string Path to HTML template for info result template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template_base64 Type: string HTML template for info result, in Base64 encoding root resources wms_services WMS root_layer oneOf Layer info_template oneOf sql_info_template Type: object Info template for DB Query No Additional Properties One of Option 1 Option 2 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 oneOf item 0 Type: object The following properties are required: type db_url sql root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 oneOf item 1 Type: object The following properties are required: type db_url sql_base64 type root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 type Type: const Specific value: \"sql\" db_url root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 db_url Type: string Database connection string sql root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 sql Type: string Query SQL sql_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 sql_base64 Type: string Query SQL in Base64 encoding template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template_path Type: string Path to HTML template for info result template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template_base64 Type: string HTML template for info result, in Base64 encoding root resources wms_services WMS root_layer oneOf Layer info_template oneOf module_info_template Type: object Info template using WMS GetFeatureInfo No Additional Properties type Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 type Type: const Specific value: \"module\" module Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 module Type: string Custom info module name template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template_path Type: string Path to HTML template for info result. template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template_base64 Type: string HTML template for info result, in Base64 encoding display_field root resources wms_services WMS root_layer oneOf Layer display_field Display field Type: string Show value of this attribute in feature result header feature_report root resources wms_services WMS root_layer oneOf Layer feature_report Feature report Type: string Name of corresponding feature report root resources wms_services WMS root_layer oneOf Group Layer Group Layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS root_layer oneOf Group Layer name Type: string WMS group layer name type root resources wms_services WMS root_layer oneOf Group Layer type Type: const Layer type Specific value: \"layergroup\" title root resources wms_services WMS root_layer oneOf Group Layer title Type: string Group title layers Required root resources wms_services WMS root_layer oneOf Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Group Layer layers layers items One of Layer Group Layer root resources wms_services WMS root_layer oneOf Group Layer layers layers items oneOf Layer Layer Type: object Single layer Same definition as Layer root resources wms_services WMS root_layer oneOf Group Layer layers layers items oneOf Group Layer Group Layer Type: object Group layer with nested sublayers Same definition as Group Layer hide_sublayers root resources wms_services WMS root_layer oneOf Group Layer hide_sublayers Hide sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) root resources wms_services WMS root_layer oneOf item 2 Type: null Generated using json-schema-for-humans on 2025-10-09 at 10:46:13 +0000","title":"Qwc feature info service"},{"location":"references/qwc-feature-info-service_readme/","text":"QWC FeatureInfo Service \u00b6 Query layers at a geographic position using an API based on WMS GetFeatureInfo. The query is handled for each layer by its layer info provider configured in the config file. Layer info providers: WMS GetFeatureInfo (default): forward info request to the QGIS Server DB Query: execute custom query SQL Custom info module: custom Python modules returning layer info The info results are each rendered into customizable HTML templates and returned as a GetFeatureInfoResponse XML. Setup \u00b6 The DB query uses a PostgreSQL connection service or connection to a PostGIS database. This connection's user requires read access to the configured tables. qwc_demo example \u00b6 Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service requires read access to the configured tables of the data layers from the QGIS project qwc_demo.qgs . Setup PostgreSQL connection service file ~/.pg_service.conf : [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . FeatureInfo Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/featureInfoConfig.json Note: Use the qwc-config-generator to automatically generate the resource configuration. Manually provided configuration is merged into the automatically generated configuration by service and layer name. I.e. the configuration for countries in the example below just specifies the info template, attributes configuration will completed by the config generator. Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-feature-info-service/master/schemas/qwc-feature-info-service.json\", \"service\": \"feature-info\", \"config\": { \"default_qgis_server_url\": \"http://localhost:8001/ows/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"title\": \"Edit Demo\", \"layers\": [ { \"name\": \"edit_points\", \"title\": \"Edit Points\", \"attributes\": [ { \"name\": \"id\" }, { \"name\": \"name\" }, { \"name\": \"description\" }, { \"name\": \"num\" }, { \"name\": \"value\" }, { \"name\": \"type\" }, { \"name\": \"amount\" }, { \"name\": \"validated\", \"format\": \"{\\\"t\\\": \\\"Yes\\\", \\\"f\\\": \\\"No\\\"}\" }, { \"name\": \"datetime\" }, { \"name\": \"geometry\" }, { \"name\": \"maptip\" } ] } ] }, { \"name\": \"countries\", \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } } ] } } ] } } Example info_template for WMS GetFeatureInfo: \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template for WMS GetFeatureInfo with template path: \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template_path\": \"/info_templates/template.html\" } Example info_template for DB query: \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) . Example info_template for Custom info module: \"info_template\": { \"type\": \"module\", \"module\": \"example\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Base64 encoded properties \u00b6 The following config properties may also be set as Base64 encoded values instead: Default HTML info template: default_info_template_base64 Formatting expression for converting attribute values: format_base64 HTML template for info result: template_base64 Query SQL for DB query: sql_base64 Any plain text properties take precedence over their corresponding Base64 encoded property (e.g. template_base64 is only used if template is not set). Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"ows_type\": \"WMS\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"countries\", \"attributes\": [\"name\", \"formal_en\", \"pop_est\", \"subregion\", \"geometry\"], \"info_template\": true } ] } ] } } ] } Basic Auth \u00b6 The feature info service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] }, HTML template \u00b6 A HTML template can be provided for a layer in the config file. The template must only contain the body content (without head , script , body ). The HTML can be styled using inline CSS, otherwise the CSS from the QWC viewer is used. This template can contain attribute value placeholders, in the form {{ feature.attr }} which are replaced with the respective values when the template is rendered (using Jinja2 ). The following values are available in the template: x , y , crs : Coordinates and CRS of info query feature : Feature with attributes from info result as properties, e.g. feature.name fid : Feature ID (if present) bbox : Feature bounding box as [<minx>, <miny>, <maxx>, <maxy>] (if present) geometry : Feature geometry as WKT (if present) layer : Layer name To automatically detect hyperlinks in values and replace them as HTML links the following helper can be used in the template: render_value(value) Example: <div>Result at coordinates {{ x }}, {{ y }}</div> <table> <tr> <td>Name:</td> <td>{{ feature.name }}</td> </tr> <tr> <td>Description:</td> <td>{{ feature.description }}</td> </tr> </table> Default info template \u00b6 Layers with no assigned info templates use WMS GetFeatureInfo with a default info template. The default template can also optionally be configured as default_info_template in the config file. The InfoFeature feature available in the template also provides a list of its attributes: feature._attributes = [ 'name': <attribute name>, 'value': <attribute value>, 'alias': <attribute alias>, 'type': <attribute value data type as string>, 'json_aliases': <JSON attribute aliases as {'json_key': 'value'}> ] If an attribute value starts with { or [ the service tries to parse it as JSON before rendering it in the template. Default info template: <table class=\"attribute-list\"> <tbody> {% for attr in feature._attributes -%} {% if attr['type'] == 'list' -%} {# attribute is a list #} <tr> <td class=\"identify-attr-title wrap\"><i>{{ attr['alias'] }}</i></td> <td> <table class=\"identify-attr-subtable\"> <tbody> {%- for item in attr['value'] %} {%- if item is mapping -%} {# item is a dict #} {% for key in item -%} {% if not attr['json_aliases'] %} {% set alias = key %} {% elif key in attr['json_aliases'] %} {% set alias = attr['json_aliases'][key] %} {% endif %} {% if alias %} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ alias }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(item[key]) }} </td> </tr> {% endif %} {%- endfor %} {%- else -%} <tr> <td class=\"identify-attr-value identify-attr-single-value wrap\" colspan=\"2\"> {{ render_value(item) }} </td> </tr> {%- endif %} <tr> <td class=\"identify-attr-spacer\" colspan=\"2\"></td> </tr> {%- endfor %} </tbody> </table> </td> </tr> {%- elif attr['type'] in ['dict', 'OrderedDict'] -%} {# attribute is a dict #} <tr> <td class=\"identify-attr-title wrap\"><i>{{ attr['alias'] }}</i></td> <td> <table class=\"identify-attr-subtable\"> <tbody> {% for key in attr['value'] -%} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ key }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(attr['value'][key]) }} </td> </tr> {%- endfor %} </tbody> </table> </td> </tr> {%- else -%} {# other attributes #} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ attr['alias'] }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(attr['value']) }} </td> </tr> {%- endif %} {%- endfor %} </tbody> </table> DB Query \u00b6 In a DB Query the following values are replaced in the SQL: :x : X coordinate of query :y : Y coordinate of query :srid : SRID of query coordinates :resolution : Resolution in map units per pixel :FI_POINT_TOLERANCE : Tolerance for picking points, in pixels (default=16) :FI_LINE_TOLERANCE : Tolerance for picking lines, in pixels (default=8) :FI_POLYGON_TOLERANCE : Tolerance for picking polygons, in pixels (default=4) :i : X ordinate of query point on map, in pixels :j : Y ordinate of query point on map, in pixels :height : Height of map output, in pixels :width : Width of map output, in pixels :bbox : 'Bounding box for map extent as minx,miny,maxx,maxy' :crs : 'CRS for map extent' :feature_count : Max feature count :with_geometry : Whether to return geometries in response (default=1) :with_maptip : Whether to return maptip in response (default=1) The query may return the feature ID as _fid_ and the WKT geometry as wkt_geom . All other selected columns are used as feature attributes. Sample queries: SELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects(wkb_geometry, ST_GeomFromText('POINT(:x :y)', :srid)) LIMIT :feature_count; SELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects( wkb_geometry, ST_Buffer( ST_GeomFromText('POINT(:x :y)', :srid), :resolution * :FI_POLYGON_TOLERANCE ) ) LIMIT :feature_count; Custom info modules \u00b6 Custom info modules can be placed in ./info_modules/custom/<module name>/ and must provide the following method: def layer_info(layer, x, y, crs, params, identity) Input parameters: layer (str): Layer name x (float): X coordinate of query y (float): Y coordinate of query crs (str): CRS of query coordinates params (obj): FeatureInfo service params { 'i': <X ordinate of query point on map, in pixels>, 'j': <Y ordinate of query point on map, in pixels>, 'height': <Height of map output, in pixels>, 'width': <Width of map output, in pixels>, 'bbox': '<Bounding box for map extent as minx,miny,maxx,maxy>', 'crs': '<CRS for map extent>', 'feature_count': <Max feature count>, 'with_geometry': <Whether to return geometries in response (default=1)>, 'with_maptip': <Whether to return maptip in response (default=1)>, 'FI_POINT_TOLERANCE': <Tolerance for picking points, in pixels (default=16)>, 'FI_LINE_TOLERANCE': <Tolerance for picking lines, in pixels (default=8)>, 'FI_POLYGON_TOLERANCE': <Tolerance for picking polygons, in pixels (default=4)>, 'resolution': <Resolution in map units per pixel> } identity (str): User name or Identity dict Return info result as a dict: { 'features': [ { 'id': <feature ID>, # optional 'attributes': [ { 'name': '<attribute name>', 'value': <attribute value> } ], 'bbox': [<minx>, <miny>, <maxx>, <maxy>], # optional 'geometry': '<WKT geometry>' # optional } ] } See ./info_modules/custom/example/ for a sample implementation of a custom layer info module. The custom info module can then be referenced in the info_template by its name (= directory name) in the service config. Usage \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5015/ Service API: http://localhost:5015/api/ Sample request: curl 'http://localhost:5015/qwc_demo?layers=countries,edit_points&i=51&j=51&height=101&width=101&bbox=671639%2C5694018%2C1244689%2C6267068&crs=EPSG%3A3857' Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Qwc feature info service readme"},{"location":"references/qwc-feature-info-service_readme/#qwc-featureinfo-service","text":"Query layers at a geographic position using an API based on WMS GetFeatureInfo. The query is handled for each layer by its layer info provider configured in the config file. Layer info providers: WMS GetFeatureInfo (default): forward info request to the QGIS Server DB Query: execute custom query SQL Custom info module: custom Python modules returning layer info The info results are each rendered into customizable HTML templates and returned as a GetFeatureInfoResponse XML.","title":"QWC FeatureInfo Service"},{"location":"references/qwc-feature-info-service_readme/#setup","text":"The DB query uses a PostgreSQL connection service or connection to a PostGIS database. This connection's user requires read access to the configured tables.","title":"Setup"},{"location":"references/qwc-feature-info-service_readme/#qwc_demo-example","text":"Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service requires read access to the configured tables of the data layers from the QGIS project qwc_demo.qgs . Setup PostgreSQL connection service file ~/.pg_service.conf : [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable","title":"qwc_demo example"},{"location":"references/qwc-feature-info-service_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-feature-info-service_readme/#featureinfo-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/featureInfoConfig.json Note: Use the qwc-config-generator to automatically generate the resource configuration. Manually provided configuration is merged into the automatically generated configuration by service and layer name. I.e. the configuration for countries in the example below just specifies the info template, attributes configuration will completed by the config generator. Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-feature-info-service/master/schemas/qwc-feature-info-service.json\", \"service\": \"feature-info\", \"config\": { \"default_qgis_server_url\": \"http://localhost:8001/ows/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"title\": \"Edit Demo\", \"layers\": [ { \"name\": \"edit_points\", \"title\": \"Edit Points\", \"attributes\": [ { \"name\": \"id\" }, { \"name\": \"name\" }, { \"name\": \"description\" }, { \"name\": \"num\" }, { \"name\": \"value\" }, { \"name\": \"type\" }, { \"name\": \"amount\" }, { \"name\": \"validated\", \"format\": \"{\\\"t\\\": \\\"Yes\\\", \\\"f\\\": \\\"No\\\"}\" }, { \"name\": \"datetime\" }, { \"name\": \"geometry\" }, { \"name\": \"maptip\" } ] } ] }, { \"name\": \"countries\", \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } } ] } } ] } } Example info_template for WMS GetFeatureInfo: \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template for WMS GetFeatureInfo with template path: \"info_template\": { \"type\": \"wms\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"template_path\": \"/info_templates/template.html\" } Example info_template for DB query: \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) . Example info_template for Custom info module: \"info_template\": { \"type\": \"module\", \"module\": \"example\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" }","title":"FeatureInfo Service config"},{"location":"references/qwc-feature-info-service_readme/#base64-encoded-properties","text":"The following config properties may also be set as Base64 encoded values instead: Default HTML info template: default_info_template_base64 Formatting expression for converting attribute values: format_base64 HTML template for info result: template_base64 Query SQL for DB query: sql_base64 Any plain text properties take precedence over their corresponding Base64 encoded property (e.g. template_base64 is only used if template is not set).","title":"Base64 encoded properties"},{"location":"references/qwc-feature-info-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"ows_type\": \"WMS\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"countries\", \"attributes\": [\"name\", \"formal_en\", \"pop_est\", \"subregion\", \"geometry\"], \"info_template\": true } ] } ] } } ] }","title":"Permissions"},{"location":"references/qwc-feature-info-service_readme/#basic-auth","text":"The feature info service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] },","title":"Basic Auth"},{"location":"references/qwc-feature-info-service_readme/#html-template","text":"A HTML template can be provided for a layer in the config file. The template must only contain the body content (without head , script , body ). The HTML can be styled using inline CSS, otherwise the CSS from the QWC viewer is used. This template can contain attribute value placeholders, in the form {{ feature.attr }} which are replaced with the respective values when the template is rendered (using Jinja2 ). The following values are available in the template: x , y , crs : Coordinates and CRS of info query feature : Feature with attributes from info result as properties, e.g. feature.name fid : Feature ID (if present) bbox : Feature bounding box as [<minx>, <miny>, <maxx>, <maxy>] (if present) geometry : Feature geometry as WKT (if present) layer : Layer name To automatically detect hyperlinks in values and replace them as HTML links the following helper can be used in the template: render_value(value) Example: <div>Result at coordinates {{ x }}, {{ y }}</div> <table> <tr> <td>Name:</td> <td>{{ feature.name }}</td> </tr> <tr> <td>Description:</td> <td>{{ feature.description }}</td> </tr> </table>","title":"HTML template"},{"location":"references/qwc-feature-info-service_readme/#default-info-template","text":"Layers with no assigned info templates use WMS GetFeatureInfo with a default info template. The default template can also optionally be configured as default_info_template in the config file. The InfoFeature feature available in the template also provides a list of its attributes: feature._attributes = [ 'name': <attribute name>, 'value': <attribute value>, 'alias': <attribute alias>, 'type': <attribute value data type as string>, 'json_aliases': <JSON attribute aliases as {'json_key': 'value'}> ] If an attribute value starts with { or [ the service tries to parse it as JSON before rendering it in the template. Default info template: <table class=\"attribute-list\"> <tbody> {% for attr in feature._attributes -%} {% if attr['type'] == 'list' -%} {# attribute is a list #} <tr> <td class=\"identify-attr-title wrap\"><i>{{ attr['alias'] }}</i></td> <td> <table class=\"identify-attr-subtable\"> <tbody> {%- for item in attr['value'] %} {%- if item is mapping -%} {# item is a dict #} {% for key in item -%} {% if not attr['json_aliases'] %} {% set alias = key %} {% elif key in attr['json_aliases'] %} {% set alias = attr['json_aliases'][key] %} {% endif %} {% if alias %} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ alias }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(item[key]) }} </td> </tr> {% endif %} {%- endfor %} {%- else -%} <tr> <td class=\"identify-attr-value identify-attr-single-value wrap\" colspan=\"2\"> {{ render_value(item) }} </td> </tr> {%- endif %} <tr> <td class=\"identify-attr-spacer\" colspan=\"2\"></td> </tr> {%- endfor %} </tbody> </table> </td> </tr> {%- elif attr['type'] in ['dict', 'OrderedDict'] -%} {# attribute is a dict #} <tr> <td class=\"identify-attr-title wrap\"><i>{{ attr['alias'] }}</i></td> <td> <table class=\"identify-attr-subtable\"> <tbody> {% for key in attr['value'] -%} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ key }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(attr['value'][key]) }} </td> </tr> {%- endfor %} </tbody> </table> </td> </tr> {%- else -%} {# other attributes #} <tr> <td class=\"identify-attr-title wrap\"> <i>{{ attr['alias'] }}</i> </td> <td class=\"identify-attr-value wrap\"> {{ render_value(attr['value']) }} </td> </tr> {%- endif %} {%- endfor %} </tbody> </table>","title":"Default info template"},{"location":"references/qwc-feature-info-service_readme/#db-query","text":"In a DB Query the following values are replaced in the SQL: :x : X coordinate of query :y : Y coordinate of query :srid : SRID of query coordinates :resolution : Resolution in map units per pixel :FI_POINT_TOLERANCE : Tolerance for picking points, in pixels (default=16) :FI_LINE_TOLERANCE : Tolerance for picking lines, in pixels (default=8) :FI_POLYGON_TOLERANCE : Tolerance for picking polygons, in pixels (default=4) :i : X ordinate of query point on map, in pixels :j : Y ordinate of query point on map, in pixels :height : Height of map output, in pixels :width : Width of map output, in pixels :bbox : 'Bounding box for map extent as minx,miny,maxx,maxy' :crs : 'CRS for map extent' :feature_count : Max feature count :with_geometry : Whether to return geometries in response (default=1) :with_maptip : Whether to return maptip in response (default=1) The query may return the feature ID as _fid_ and the WKT geometry as wkt_geom . All other selected columns are used as feature attributes. Sample queries: SELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects(wkb_geometry, ST_GeomFromText('POINT(:x :y)', :srid)) LIMIT :feature_count; SELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects( wkb_geometry, ST_Buffer( ST_GeomFromText('POINT(:x :y)', :srid), :resolution * :FI_POLYGON_TOLERANCE ) ) LIMIT :feature_count;","title":"DB Query"},{"location":"references/qwc-feature-info-service_readme/#custom-info-modules","text":"Custom info modules can be placed in ./info_modules/custom/<module name>/ and must provide the following method: def layer_info(layer, x, y, crs, params, identity) Input parameters: layer (str): Layer name x (float): X coordinate of query y (float): Y coordinate of query crs (str): CRS of query coordinates params (obj): FeatureInfo service params { 'i': <X ordinate of query point on map, in pixels>, 'j': <Y ordinate of query point on map, in pixels>, 'height': <Height of map output, in pixels>, 'width': <Width of map output, in pixels>, 'bbox': '<Bounding box for map extent as minx,miny,maxx,maxy>', 'crs': '<CRS for map extent>', 'feature_count': <Max feature count>, 'with_geometry': <Whether to return geometries in response (default=1)>, 'with_maptip': <Whether to return maptip in response (default=1)>, 'FI_POINT_TOLERANCE': <Tolerance for picking points, in pixels (default=16)>, 'FI_LINE_TOLERANCE': <Tolerance for picking lines, in pixels (default=8)>, 'FI_POLYGON_TOLERANCE': <Tolerance for picking polygons, in pixels (default=4)>, 'resolution': <Resolution in map units per pixel> } identity (str): User name or Identity dict Return info result as a dict: { 'features': [ { 'id': <feature ID>, # optional 'attributes': [ { 'name': '<attribute name>', 'value': <attribute value> } ], 'bbox': [<minx>, <miny>, <maxx>, <maxy>], # optional 'geometry': '<WKT geometry>' # optional } ] } See ./info_modules/custom/example/ for a sample implementation of a custom layer info module. The custom info module can then be referenced in the info_template by its name (= directory name) in the service config.","title":"Custom info modules"},{"location":"references/qwc-feature-info-service_readme/#usage","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5015/ Service API: http://localhost:5015/api/ Sample request: curl 'http://localhost:5015/qwc_demo?layers=countries,edit_points&i=51&j=51&height=101&width=101&bbox=671639%2C5694018%2C1244689%2C6267068&crs=EPSG%3A3857'","title":"Usage"},{"location":"references/qwc-feature-info-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-feature-info-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-ldap-auth/","text":"<title>QWC LDAP authentication service</title> QWC LDAP authentication service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-ldap-auth/master/schemas/qwc-ldap-auth.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"ldap-auth\" config Required root config Config options Type: object login_hint root config login_hint Login hint text, shown above login form fields. Either a string, or dictionary {\"<lang>\": \"<text>\"} . When providing a dictionary, the entry matching the current locale will be searched, with fallback to en if no entry for the current locale exists, and fallback to an empty string if no en entry exists. One of Option 1 Option 2 root config login_hint oneOf item 0 Type: string root config login_hint oneOf item 1 Type: object ^[a-z]{2}$ Pattern Property Pattern Property All properties whose name matches the following regular expression must respect the following conditions Property name regular expression: ^[a-z]{2}$ root config login_hint oneOf item 1 ^[a-z]{2}$ Type: string logo_image_url root config logo_image_url Type: string URL to a logo image to show in the login form. Default: null background_image_url root config background_image_url Type: string URL to a background image for the login page. Default: null Generated using json-schema-for-humans on 2025-10-09 at 10:46:14 +0000","title":"Qwc ldap auth"},{"location":"references/qwc-ldap-auth_readme/","text":"Authentication with LDAP/Active Directory \u00b6 Configuration \u00b6 See also flask-ldap3-login ENV default value description JWT_SECRET_KEY ******** secret key for JWT token (same for all services) LDAP_HOST localhost Hostname of your LDAP Server LDAP_PORT 389 The port number of your LDAP server. LDAP_USE_SSL False Set to True if your server uses SSL LDAP_BASE_DN dc=example,dc=org Base DN of your directory LDAP_USER_DN ou=users Users DN to be prepended to the Base DN LDAP_GROUP_DN ou=groups Groups DN to be prepended to the Base DN LDAP_SEARCH_FOR_GROUPS False Search for groups LDAP_GROUP_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific group LDAP_GROUP_OBJECT_FILTER (objectclass=group) Specifies what object filter to apply when searching for groups LDAP_GROUP_MEMBERS_ATTR uniqueMember Specifies the LDAP attribute where group members are declared LDAP_GROUP_NAME_ATTRIBUTE cn Group name attribute in LDAP group response LDAP_GET_GROUP_ATTRIBUTES * (ALL_ATTRIBUTES) Specifies which LDAP attributes to get when searching LDAP for a group/groups LDAP_USER_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific user LDAP_USER_RDN_ATTR cn The RDN attribute for your user schema on LDAP LDAP_USER_LOGIN_ATTR cn The Attribute you want users to authenticate to LDAP with LDAP_BIND_USER_DN None The Username to bind to LDAP with LDAP_BIND_USER_PASSWORD None The Password to bind to LDAP with GROUP_MAPPINGS None Expressions for group name mapping Customization \u00b6 You can add a custom logo and a custom background image by setting the following config options: \"config\": { \"background_image_url\": \"<url>\", \"logo_image_url\": \"<url>\" } The specified URLs can be absolute or relative. For relative URLs, you can write i.e. \"config\": { \"background_image_url\": \"/auth/static/background.jpg\", \"logo_image_url\": \"/auth/static/logo.jpg\" } where /auth is the service mountpoint and place your custom images inside the static subfolder of the auth-service, or, if using docker and docker-compose, mount them accordingly: qwc-auth-service: [...] volumes: - ./volumes/assets/Background.jpg:/srv/qwc_service/static/background.jpg - ./volumes/assets/logo.png:/srv/qwc_service/static/logo.jpg Usage \u00b6 Run standalone application: uv run src/server.py Endpoints: http://localhost:5017/login http://localhost:5017/logout http://localhost:5017/verify_login Development \u00b6 Install dependencies and run service: echo FLASK_ENV=development >.flaskenv Start local service: uv run src/server.py Testing with https://github.com/rroemhild/docker-test-openldap docker run -d -p 10389:10389 -p 10636:10636 rroemhild/test-openldap:2.1 Start service: LDAP_PORT=10389 LDAP_BIND_USER_DN=\"cn=admin,dc=planetexpress,dc=com\" LDAP_BIND_USER_PASSWORD=GoodNewsEveryone LDAP_BASE_DN=\"dc=planetexpress,dc=com\" LDAP_USER_DN=\"ou=people\" LDAP_GROUP_DN=\"ou=people\" LDAP_SEARCH_FOR_GROUPS=True LDAP_GROUP_MEMBERS_ATTR=\"member\" uv run src/server.py User: Philip J. Fry Password: fry Service login test: curl http://localhost:5017/verify_login -d 'username=Philip J. Fry' -d 'password=fry'","title":"Qwc ldap auth readme"},{"location":"references/qwc-ldap-auth_readme/#authentication-with-ldapactive-directory","text":"","title":"Authentication with LDAP/Active Directory"},{"location":"references/qwc-ldap-auth_readme/#configuration","text":"See also flask-ldap3-login ENV default value description JWT_SECRET_KEY ******** secret key for JWT token (same for all services) LDAP_HOST localhost Hostname of your LDAP Server LDAP_PORT 389 The port number of your LDAP server. LDAP_USE_SSL False Set to True if your server uses SSL LDAP_BASE_DN dc=example,dc=org Base DN of your directory LDAP_USER_DN ou=users Users DN to be prepended to the Base DN LDAP_GROUP_DN ou=groups Groups DN to be prepended to the Base DN LDAP_SEARCH_FOR_GROUPS False Search for groups LDAP_GROUP_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific group LDAP_GROUP_OBJECT_FILTER (objectclass=group) Specifies what object filter to apply when searching for groups LDAP_GROUP_MEMBERS_ATTR uniqueMember Specifies the LDAP attribute where group members are declared LDAP_GROUP_NAME_ATTRIBUTE cn Group name attribute in LDAP group response LDAP_GET_GROUP_ATTRIBUTES * (ALL_ATTRIBUTES) Specifies which LDAP attributes to get when searching LDAP for a group/groups LDAP_USER_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific user LDAP_USER_RDN_ATTR cn The RDN attribute for your user schema on LDAP LDAP_USER_LOGIN_ATTR cn The Attribute you want users to authenticate to LDAP with LDAP_BIND_USER_DN None The Username to bind to LDAP with LDAP_BIND_USER_PASSWORD None The Password to bind to LDAP with GROUP_MAPPINGS None Expressions for group name mapping","title":"Configuration"},{"location":"references/qwc-ldap-auth_readme/#customization","text":"You can add a custom logo and a custom background image by setting the following config options: \"config\": { \"background_image_url\": \"<url>\", \"logo_image_url\": \"<url>\" } The specified URLs can be absolute or relative. For relative URLs, you can write i.e. \"config\": { \"background_image_url\": \"/auth/static/background.jpg\", \"logo_image_url\": \"/auth/static/logo.jpg\" } where /auth is the service mountpoint and place your custom images inside the static subfolder of the auth-service, or, if using docker and docker-compose, mount them accordingly: qwc-auth-service: [...] volumes: - ./volumes/assets/Background.jpg:/srv/qwc_service/static/background.jpg - ./volumes/assets/logo.png:/srv/qwc_service/static/logo.jpg","title":"Customization"},{"location":"references/qwc-ldap-auth_readme/#usage","text":"Run standalone application: uv run src/server.py Endpoints: http://localhost:5017/login http://localhost:5017/logout http://localhost:5017/verify_login","title":"Usage"},{"location":"references/qwc-ldap-auth_readme/#development","text":"Install dependencies and run service: echo FLASK_ENV=development >.flaskenv Start local service: uv run src/server.py Testing with https://github.com/rroemhild/docker-test-openldap docker run -d -p 10389:10389 -p 10636:10636 rroemhild/test-openldap:2.1 Start service: LDAP_PORT=10389 LDAP_BIND_USER_DN=\"cn=admin,dc=planetexpress,dc=com\" LDAP_BIND_USER_PASSWORD=GoodNewsEveryone LDAP_BASE_DN=\"dc=planetexpress,dc=com\" LDAP_USER_DN=\"ou=people\" LDAP_GROUP_DN=\"ou=people\" LDAP_SEARCH_FOR_GROUPS=True LDAP_GROUP_MEMBERS_ATTR=\"member\" uv run src/server.py User: Philip J. Fry Password: fry Service login test: curl http://localhost:5017/verify_login -d 'username=Philip J. Fry' -d 'password=fry'","title":"Development"},{"location":"references/qwc-legend-service/","text":"<title>QWC Legend Service</title> QWC Legend Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-legend-service/v2/schemas/qwc-legend-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"legend\" config Required root config Config options Type: object default_qgis_server_url Required root config default_qgis_server_url Type: string Default base URL for forwarding WMS GetLegendGraphics requests. Default: http://localhost:8001/ows/ network_timeout root config network_timeout Type: number Network timeout for requests forwarded to the QGIS Server, in seconds. Default: 30 qgis_server_url_tenant_suffix root config qgis_server_url_tenant_suffix Type: string If qgs_resources are placed in tenant specific subdirs, set this property to the respective subdir path portion. Default: <empty> legend_default_font_size root config legend_default_font_size Type: number Default font size for GetLegendGraphic request. Default: null legend_images_path root config legend_images_path Type: string Path to legend images (required if using legend_image ). Default: /legends/ basic_auth_login_url root config basic_auth_login_url Type: array of string Login verification URL for requests with basic auth. Example: http://qwc-auth-service:9090/verify_login . Default: null No Additional Items Each item of this array must be: root config basic_auth_login_url basic_auth_login_url items Type: string resources Required root resources Resources Type: object wms_services root resources wms_services WMS services Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS service WMS service Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS service name Type: string WMS service name root_layer Required root resources wms_services WMS service root_layer Root layer of WMS (layer or group layer) One of Layer Group Layer root resources wms_services WMS service root_layer oneOf Layer Layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS service root_layer oneOf Layer name Type: string WMS layer name type root resources wms_services WMS service root_layer oneOf Layer type Type: const Layer type Specific value: \"layer\" legend_image root resources wms_services WMS service root_layer oneOf Layer legend_image Type: string Legend image path relative to 'legend images path' legend_image_base64 root resources wms_services WMS service root_layer oneOf Layer legend_image_base64 Type: string Legend image in Base64 encoding root resources wms_services WMS service root_layer oneOf Group Layer Group Layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS service root_layer oneOf Group Layer name Type: string WMS group layer name type root resources wms_services WMS service root_layer oneOf Group Layer type Type: const Layer type Specific value: \"layergroup\" layers Required root resources wms_services WMS service root_layer oneOf Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf Group Layer layers layers items One of Layer Group Layer root resources wms_services WMS service root_layer oneOf Group Layer layers layers items oneOf Layer Layer Type: object Single layer Same definition as Layer root resources wms_services WMS service root_layer oneOf Group Layer layers layers items oneOf Group Layer Group Layer Type: object Group layer with nested sublayers Same definition as Group Layer hide_sublayers root resources wms_services WMS service root_layer oneOf Group Layer hide_sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) legend_image root resources wms_services WMS service root_layer oneOf Group Layer legend_image Type: string Legend image path relative to 'legend images path' (only if hide_sublayers is set) legend_image_base64 root resources wms_services WMS service root_layer oneOf Group Layer legend_image_base64 Type: string Legend image in Base64 encoding (only if hide_sublayers is set) Generated using json-schema-for-humans on 2025-10-09 at 10:46:15 +0000","title":"Qwc legend service"},{"location":"references/qwc-legend-service_readme/","text":"QWC Legend Service \u00b6 Acts as a proxy between the client and QGIS server for GetLegendGraphic request, allowing to return custom legend graphics instead of the ones generated by the WMS server. Note: Requires a QGIS server running on default_qgis_server_url . Usage \u00b6 Configure legend_images_path in the service configuration (see below). Then, legend images will be searched for in this order (the first one found is used): A <legend_images_path>/<service_name>/<layername><suffix>.png file, where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip , see type query-parameter below. A <legend_images_path>/default<suffix>.png file. According to the legend_image paths set in the layer resource configurations of the legend service configuration. Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Legend Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/legendConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-legend-service/v2/schemas/qwc-legend-service.json\", \"service\": \"legend\", \"config\": { // QGIS Server URL \"default_qgis_server_url\": \"http://localhost:8001/ows/\", // base path to legend images (required if using 'legend_image') \"legend_images_path\": \"/PATH/TO/LEGENDS/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"layers\": [ { \"name\": \"edit_points\", // using custom legend image \"legend_image\": \"edit_points.png\" }, { \"name\": \"edit_lines\", // using custom legend image in Base64 encoding \"legend_image_base64\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAIAAABLbSncAAAAHUlEQVQI12NgwAEYGRgY/tdjiDYyMOHSQQ8JnAAAUUoCDCaibn8AAAAASUVORK5CYII=\" }, { // using WMS GetLegendGraphics by default \"name\": \"edit_polygons\" } ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" } ] } } ] } } Note : the legend_image path for custom legend graphics is relative to legend_images_path and may contain subdirectories Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\" }, { \"name\": \"edit_lines\" }, { \"name\": \"edit_polygons\" }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" } ] } ] } } ] } Basic Auth \u00b6 The legend service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] }, Usage \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Set the QWC2_PATH environment variable to the path containing your QWC2 production build. Base URL: http://localhost:5014/ API documentation: http://localhost:5014/api/ Sample request: http://localhost:5014/qwc_demo?SERVICE=WMS&REQUEST=GetLegendGraphic&LAYER=qwc_demo&format=image/png Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Qwc legend service readme"},{"location":"references/qwc-legend-service_readme/#qwc-legend-service","text":"Acts as a proxy between the client and QGIS server for GetLegendGraphic request, allowing to return custom legend graphics instead of the ones generated by the WMS server. Note: Requires a QGIS server running on default_qgis_server_url .","title":"QWC Legend Service"},{"location":"references/qwc-legend-service_readme/#usage","text":"Configure legend_images_path in the service configuration (see below). Then, legend images will be searched for in this order (the first one found is used): A <legend_images_path>/<service_name>/<layername><suffix>.png file, where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip , see type query-parameter below. A <legend_images_path>/default<suffix>.png file. According to the legend_image paths set in the layer resource configurations of the legend service configuration.","title":"Usage"},{"location":"references/qwc-legend-service_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-legend-service_readme/#legend-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/legendConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-legend-service/v2/schemas/qwc-legend-service.json\", \"service\": \"legend\", \"config\": { // QGIS Server URL \"default_qgis_server_url\": \"http://localhost:8001/ows/\", // base path to legend images (required if using 'legend_image') \"legend_images_path\": \"/PATH/TO/LEGENDS/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"layers\": [ { \"name\": \"edit_points\", // using custom legend image \"legend_image\": \"edit_points.png\" }, { \"name\": \"edit_lines\", // using custom legend image in Base64 encoding \"legend_image_base64\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAIAAABLbSncAAAAHUlEQVQI12NgwAEYGRgY/tdjiDYyMOHSQQ8JnAAAUUoCDCaibn8AAAAASUVORK5CYII=\" }, { // using WMS GetLegendGraphics by default \"name\": \"edit_polygons\" } ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" } ] } } ] } } Note : the legend_image path for custom legend graphics is relative to legend_images_path and may contain subdirectories","title":"Legend Service config"},{"location":"references/qwc-legend-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\" }, { \"name\": \"edit_lines\" }, { \"name\": \"edit_polygons\" }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" } ] } ] } } ] }","title":"Permissions"},{"location":"references/qwc-legend-service_readme/#basic-auth","text":"The legend service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] },","title":"Basic Auth"},{"location":"references/qwc-legend-service_readme/#usage_1","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Set the QWC2_PATH environment variable to the path containing your QWC2 production build. Base URL: http://localhost:5014/ API documentation: http://localhost:5014/api/ Sample request: http://localhost:5014/qwc_demo?SERVICE=WMS&REQUEST=GetLegendGraphic&LAYER=qwc_demo&format=image/png","title":"Usage"},{"location":"references/qwc-legend-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-legend-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-map-viewer/","text":"<title>QWC Map Viewer</title> QWC Map Viewer Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-map-viewer/v2/schemas/qwc-map-viewer.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"map-viewer\" config Required root config Config options Type: object db_url root config db_url Type: string DB connection URL (for user info fields). Can be set to an empty string if running without DB. Default: postgresql:///?service=qwc_configdb qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config qwc2_path Required root config qwc2_path Type: string Path to QWC2 files auth_service_url root config auth_service_url Type: string QWC Auth Service URL ccc_config_service_url root config ccc_config_service_url Type: string CCC Service URL data_service_url root config data_service_url Type: string QWC Data Service URL dataproduct_service_url root config dataproduct_service_url Type: string DataProduct Service URL document_service_url root config document_service_url Type: string Document Service URL elevation_service_url root config elevation_service_url Type: string QWC Elevation Service URL info_service_url root config info_service_url Type: string QWC FeatureInfo Service URL landreg_service_url root config landreg_service_url Type: string Land Register Extract Service URL legend_service_url root config legend_service_url Type: string QWC Legend Service URL mapinfo_service_url root config mapinfo_service_url Type: string MapInfo Service URL ogc_service_url Required root config ogc_service_url Type: string QWC OGC Service URL permalink_service_url root config permalink_service_url Type: string QWC Permalink Service URL internal_permalink_service_url root config internal_permalink_service_url Type: string Internal QWC Permalink Service URL plotinfo_service_url root config plotinfo_service_url Type: string PlotInfo Service URL print_service_url root config print_service_url Type: string QWC Print Service URL proxy_service_url root config proxy_service_url Type: string Proxy Service URL search_data_service_url root config search_data_service_url Type: string QWC Search Result Service URL search_service_url root config search_service_url Type: string QWC Search Service URL show_restricted_themes root config show_restricted_themes Type: boolean Whether to insert placeholder items for restricted themes in themes.json show_restricted_themes_whitelist root config show_restricted_themes_whitelist Type: array of string Whitelist of restricted theme names to include in themes.json. If empty, all restricted themes are shown. No Additional Items Each item of this array must be: root config show_restricted_themes_whitelist show_restricted_themes_whitelist items Type: string redirect_restricted_themes_to_auth root config redirect_restricted_themes_to_auth Type: boolean Whether to redirect to login on auth service if requesting a restricted theme in URL params redirect_to_auth_if_no_permitted_themes root config redirect_to_auth_if_no_permitted_themes Type: boolean Whether to redirect to login on auth service if no themes are permitted user_info_fields root config user_info_fields Type: array of string List of user info fields to read from DB (if db_url is set) or from JWT identity No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: string display_user_info_field root config display_user_info_field Type: string User info field to display instead of username auth_required root config auth_required Type: boolean Whether to enforce authentication before processing requests. Default: false public_paths root config public_paths Type: array of string Optional: List of paths that will be accessible without a JWT identity, if auth_required is set. No Additional Items Each item of this array must be: root config public_paths public_paths items Type: string resources Required root resources Resources Type: object qwc2_config Required root resources qwc2_config Type: object restricted_viewer_tasks root resources qwc2_config restricted_viewer_tasks Type: array of string Restricted menu items No Additional Items Each item of this array must be: root resources qwc2_config restricted_viewer_tasks restricted_viewer_tasks items Type: string config Required root resources qwc2_config config Type: object QWC2 application configuration (config.json) qwc2_themes Required root resources qwc2_themes Type: object QWC2 themes configuration (themes.json) themes Required root resources qwc2_themes themes Type: object Generated using json-schema-for-humans on 2025-10-09 at 10:46:17 +0000","title":"Qwc map viewer"},{"location":"references/qwc-map-viewer_readme/","text":"QWC Map Viewer \u00b6 Provide a QWC2 Web Client application using QWC services. Note: Requires a QWC OGC service or QGIS server running on ogc_service_url . Additional QWC Services are optional. Setup \u00b6 Copy your QWC2 files from a production build: SRCDIR=path/to/qwc2/prod/ DSTDIR=$PWD mkdir $DSTDIR/qwc2 && mkdir $DSTDIR/qwc2/dist cd $SRCDIR && \\ cp -r assets $DSTDIR/qwc2 && \\ cp -r translations $DSTDIR/qwc2/translations && \\ cp dist/QWC2App.js $DSTDIR/qwc2/dist/ && \\ cp index.html $DSTDIR/qwc2/ && \\ cp config.json $DSTDIR/qwc2/config.json && \\ cd - Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Note: : Custom viewers have been replaced by tenants in v2. Map Viewer config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/mapViewerConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-map-viewer/v2/schemas/qwc-map-viewer.json\", \"service\": \"map-viewer\", \"config\": { // path to QWC2 files \"qwc2_path\": \"qwc2/\", // QWC OGC service (required) \"ogc_service_url\": \"http://localhost:5013/\", // some optional QWC services \"auth_service_url\": \"http://localhost:5017/\", \"data_service_url\": \"http://localhost:5012/\" }, \"resources\": { \"qwc2_config\": { // restricted menu items \"restricted_viewer_tasks\": [\"RasterExport\"], \"config\": { // contents from QWC2 config.json \"assetsPath\": \"/assets\", // ... } }, \"qwc2_themes\": { // contents from QWC2 themes.json \"themes\": { \"items\": [ { \"name\": \"qwc_demo\", \"title\": \"Demo\", \"url\": \"/ows/qwc_demo\", // ... \"sublayers\": [ // ... ] } ], \"backgroundLayers\": [ // ... ], // ... } } } } All config options may be overridden by setting corresponding upper-case environment variables, e.g. OGC_SERVICE_URL for ogc_service_url . Main optional QWC services: * auth_service_url : QWC Auth Service URL * data_service_url : QWC Data Service URL * elevation_service_url : QWC Elevation Service URL * info_service_url : QWC FeatureInfo Service URL * legend_service_url : QWC Legend Service URL * permalink_service_url : QWC Permalink Service URL * print_service_url : QWC Print Service URL * proxy_service_url : Proxy Service URL * search_service_url : QWC Search Service URL * search_data_service_url : QWC Search Result Service URL Additional user info fields may be read from the JWT identity by setting user_info_fields : \"config\": { \"user_info_fields\": [\"surname\", \"first_name\"] } These will be added as user_infos in the config.json response if present in the current identity. qwc2_config contains the QWC2 application configuration, with config corresponding to the contents of your standalone config.json file (see Documentation ). qwc2_themes contains the full themes configuration, corresponding to the contents of your standalone themes.json collected from themesConfig.json . Add new themes to your themesConfig.json (see Documentation ) and put any theme thumbnails into $QWC2_PATH/assets/img/mapthumbs/ . The themesConfig.json file is used to collect the full themes configuration using GetProjectSettings. Optional settings for restricted themes: \"config\": { \"show_restricted_themes\": false, \"show_restricted_themes_whitelist\": [], \"redirect_restricted_themes_to_auth\": false, \"internal_permalink_service_url\": \"http://qwc-permalink-service:9090\" } show_restricted_themes (optional): Whether to insert placeholder items for restricted themes in themes.json (default: false ) show_restricted_themes_whitelist (optional): Whitelist of restricted theme names to include in themes.json. If empty, all restricted themes are shown. (default: [] ) redirect_restricted_themes_to_auth (optional): Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in (default: false ) internal_permalink_service_url (optional): Internal Permalink service URL for getting the theme from a resolved permalink for redirecting to login (default: http://qwc-permalink-service:9090 ). This is used only if redirect_restricted_themes_to_auth is enabled and permalink_service_url is set. Permissions \u00b6 File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"viewer_tasks\": [], \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\" }, { \"name\": \"edit_lines\" }, { \"name\": \"edit_polygons\" }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" }, { \"name\": \"bluemarble_bg\" }, { \"name\": \"osm_bg\" } ], \"print_templates\": [\"A4 Landscape\"] } ], \"background_layers\": [\"bluemarble\", \"mapnik\"], \"data_datasets\": [ { \"name\": \"qwc_demo.edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\" ] } ] } }, { \"role\": \"demo\", \"permissions\": { \"viewer_tasks\": [\"RasterExport\"] } } ] } viewer_tasks : permitted menu items if any are restricted wms_services : permitted WMS services, layers and print templates background_layers : permitted background layers (use the wildcard string \"*\" to allow all background layers) data_datasets : permitted datasets for editing In this example, the Raster Export map tool will only be visible for users with the role demo . Usage \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5030/ Sample requests: curl 'http://localhost:5030/config.json' curl 'http://localhost:5030/themes.json' Docker images \u00b6 The following Docker images are available: * sourcepole/qwc-map-viewer : Map viewer service with stock qwc2 application * sourcepole/qwc-map-viewer-base : Map viewer service to use with a custom qwc2 application Dependencies: git repos Docker images \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 qwc2 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 config.json \u2502 CI Build \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25ba qwc-map-viewer \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 qwc-map-viewer\u251c\u2500\u2500\u2500\u2524 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u25ba qwc-map-viewer-base \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 qwc-map-viewer \u00b6 This is the stock version used in the docker-compose-example.yml file. With this version, the docker image comes with a preinstalled version of the latest qwc2 stock application build and the python application for the viewer. Use this docker image, if you don't have your own build of the QWC2 app. qwc-map-viewer-base \u00b6 If you want to use your own QWC2 build then this is the docker image that you want to use. This docker image comes with only the python application installed on. Here is an example, on how you can add you own QWC2 build to the docker image. See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Qwc map viewer readme"},{"location":"references/qwc-map-viewer_readme/#qwc-map-viewer","text":"Provide a QWC2 Web Client application using QWC services. Note: Requires a QWC OGC service or QGIS server running on ogc_service_url . Additional QWC Services are optional.","title":"QWC Map Viewer"},{"location":"references/qwc-map-viewer_readme/#setup","text":"Copy your QWC2 files from a production build: SRCDIR=path/to/qwc2/prod/ DSTDIR=$PWD mkdir $DSTDIR/qwc2 && mkdir $DSTDIR/qwc2/dist cd $SRCDIR && \\ cp -r assets $DSTDIR/qwc2 && \\ cp -r translations $DSTDIR/qwc2/translations && \\ cp dist/QWC2App.js $DSTDIR/qwc2/dist/ && \\ cp index.html $DSTDIR/qwc2/ && \\ cp config.json $DSTDIR/qwc2/config.json && \\ cd -","title":"Setup"},{"location":"references/qwc-map-viewer_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Note: : Custom viewers have been replaced by tenants in v2.","title":"Configuration"},{"location":"references/qwc-map-viewer_readme/#map-viewer-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/mapViewerConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-map-viewer/v2/schemas/qwc-map-viewer.json\", \"service\": \"map-viewer\", \"config\": { // path to QWC2 files \"qwc2_path\": \"qwc2/\", // QWC OGC service (required) \"ogc_service_url\": \"http://localhost:5013/\", // some optional QWC services \"auth_service_url\": \"http://localhost:5017/\", \"data_service_url\": \"http://localhost:5012/\" }, \"resources\": { \"qwc2_config\": { // restricted menu items \"restricted_viewer_tasks\": [\"RasterExport\"], \"config\": { // contents from QWC2 config.json \"assetsPath\": \"/assets\", // ... } }, \"qwc2_themes\": { // contents from QWC2 themes.json \"themes\": { \"items\": [ { \"name\": \"qwc_demo\", \"title\": \"Demo\", \"url\": \"/ows/qwc_demo\", // ... \"sublayers\": [ // ... ] } ], \"backgroundLayers\": [ // ... ], // ... } } } } All config options may be overridden by setting corresponding upper-case environment variables, e.g. OGC_SERVICE_URL for ogc_service_url . Main optional QWC services: * auth_service_url : QWC Auth Service URL * data_service_url : QWC Data Service URL * elevation_service_url : QWC Elevation Service URL * info_service_url : QWC FeatureInfo Service URL * legend_service_url : QWC Legend Service URL * permalink_service_url : QWC Permalink Service URL * print_service_url : QWC Print Service URL * proxy_service_url : Proxy Service URL * search_service_url : QWC Search Service URL * search_data_service_url : QWC Search Result Service URL Additional user info fields may be read from the JWT identity by setting user_info_fields : \"config\": { \"user_info_fields\": [\"surname\", \"first_name\"] } These will be added as user_infos in the config.json response if present in the current identity. qwc2_config contains the QWC2 application configuration, with config corresponding to the contents of your standalone config.json file (see Documentation ). qwc2_themes contains the full themes configuration, corresponding to the contents of your standalone themes.json collected from themesConfig.json . Add new themes to your themesConfig.json (see Documentation ) and put any theme thumbnails into $QWC2_PATH/assets/img/mapthumbs/ . The themesConfig.json file is used to collect the full themes configuration using GetProjectSettings. Optional settings for restricted themes: \"config\": { \"show_restricted_themes\": false, \"show_restricted_themes_whitelist\": [], \"redirect_restricted_themes_to_auth\": false, \"internal_permalink_service_url\": \"http://qwc-permalink-service:9090\" } show_restricted_themes (optional): Whether to insert placeholder items for restricted themes in themes.json (default: false ) show_restricted_themes_whitelist (optional): Whitelist of restricted theme names to include in themes.json. If empty, all restricted themes are shown. (default: [] ) redirect_restricted_themes_to_auth (optional): Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in (default: false ) internal_permalink_service_url (optional): Internal Permalink service URL for getting the theme from a resolved permalink for redirecting to login (default: http://qwc-permalink-service:9090 ). This is used only if redirect_restricted_themes_to_auth is enabled and permalink_service_url is set.","title":"Map Viewer config"},{"location":"references/qwc-map-viewer_readme/#permissions","text":"File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"viewer_tasks\": [], \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\" }, { \"name\": \"edit_lines\" }, { \"name\": \"edit_polygons\" }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\" }, { \"name\": \"bluemarble_bg\" }, { \"name\": \"osm_bg\" } ], \"print_templates\": [\"A4 Landscape\"] } ], \"background_layers\": [\"bluemarble\", \"mapnik\"], \"data_datasets\": [ { \"name\": \"qwc_demo.edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\" ] } ] } }, { \"role\": \"demo\", \"permissions\": { \"viewer_tasks\": [\"RasterExport\"] } } ] } viewer_tasks : permitted menu items if any are restricted wms_services : permitted WMS services, layers and print templates background_layers : permitted background layers (use the wildcard string \"*\" to allow all background layers) data_datasets : permitted datasets for editing In this example, the Raster Export map tool will only be visible for users with the role demo .","title":"Permissions"},{"location":"references/qwc-map-viewer_readme/#usage","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Base URL: http://localhost:5030/ Sample requests: curl 'http://localhost:5030/config.json' curl 'http://localhost:5030/themes.json'","title":"Usage"},{"location":"references/qwc-map-viewer_readme/#docker-images","text":"The following Docker images are available: * sourcepole/qwc-map-viewer : Map viewer service with stock qwc2 application * sourcepole/qwc-map-viewer-base : Map viewer service to use with a custom qwc2 application Dependencies: git repos Docker images \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 qwc2 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 config.json \u2502 CI Build \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25ba qwc-map-viewer \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 qwc-map-viewer\u251c\u2500\u2500\u2500\u2524 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u25ba qwc-map-viewer-base \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Docker images"},{"location":"references/qwc-map-viewer_readme/#qwc-map-viewer_1","text":"This is the stock version used in the docker-compose-example.yml file. With this version, the docker image comes with a preinstalled version of the latest qwc2 stock application build and the python application for the viewer. Use this docker image, if you don't have your own build of the QWC2 app.","title":"qwc-map-viewer"},{"location":"references/qwc-map-viewer_readme/#qwc-map-viewer-base","text":"If you want to use your own QWC2 build then this is the docker image that you want to use. This docker image comes with only the python application installed on. Here is an example, on how you can add you own QWC2 build to the docker image. See sample docker-compose.yml of qwc-docker .","title":"qwc-map-viewer-base"},{"location":"references/qwc-map-viewer_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-mapinfo-service/","text":"<title>QWC Mapinfo Service</title> QWC Mapinfo Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"mapinfo\" config Required root config Config options One of Option 1 Option 2 Option 3 root config oneOf item 0 Type: object The following properties are required: db_url info_table info_geom_col info_display_col info_title root config oneOf item 1 Type: object The following properties are required: db_url info_sql info_title root config oneOf item 2 Type: object The following properties are required: queries db_url root config db_url Type: string DB connection for info queries info_table root config info_table Type: string Table to use info_geom_col root config info_geom_col Type: string Geometry column in table info_display_col root config info_display_col Type: string Display text column in table info_title root config info_title Type: string or array of string Display title info_id root config info_id Type: string ID for permission checks info_where root config info_where Type: string Additional WHERE query queries root config queries Info queries Type: array of object No Additional Items Each item of this array must be: root config queries Query Query One of Option 1 Option 2 root config queries Query oneOf item 0 Type: object The following properties are required: db_url info_table info_geom_col info_display_col info_title root config queries Query oneOf item 1 Type: object The following properties are required: db_url info_sql info_title db_url root config queries Query db_url Type: string DB connection for info queries info_table root config queries Query info_table Type: string Table to use info_geom_col root config queries Query info_geom_col Type: string Geometry column in table info_display_col root config queries Query info_display_col Type: string Display text column in table info_title root config queries Query info_title Type: string or array of string Display title info_id root config queries Query info_id Type: string ID for permission checks info_where root config queries Query info_where Type: string Additional WHERE query info_sql root config queries Query info_sql Type: string SQL query text Generated using json-schema-for-humans on 2025-10-09 at 10:46:16 +0000","title":"Qwc mapinfo service"},{"location":"references/qwc-mapinfo-service_readme/","text":"QWC MapInfo Service \u00b6 Additional information at a geographic position displayed with right mouse click on map. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . MapInfo Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/mapinfoConfig.json Examples: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\" } } { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\", \"info_where\": \"pop_est > 600000\" } } { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\", \"info_id\": \"type\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT abbrev, postal, subregion FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": [\"Abbreviation\", \"Postal Code\", \"Subregion\"], \"info_id\": \"region\" } ] } } Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description INFO_TABLE Table to use INFO_GEOM_COL Geometry column in table INFO_DISPLAY_COL Display text column in table INFO_TITLE Display title Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"mapinfo_query\": [ \"country\", \"type\", \"region\" ] } }, { \"role\": \"demo\", \"permissions\": { \"mapinfo_query\": [] } } ] } Usage \u00b6 Run as python src/server.py API documentation: http://localhost:5016/api/ Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py Testing \u00b6 Run all tests: python test.py","title":"Qwc mapinfo service readme"},{"location":"references/qwc-mapinfo-service_readme/#qwc-mapinfo-service","text":"Additional information at a geographic position displayed with right mouse click on map.","title":"QWC MapInfo Service"},{"location":"references/qwc-mapinfo-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-mapinfo-service_readme/#mapinfo-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/mapinfoConfig.json Examples: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\" } } { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\", \"info_where\": \"pop_est > 600000\" } } { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\", \"service\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_title\": \"Country\", \"info_id\": \"country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\", \"info_id\": \"type\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT abbrev, postal, subregion FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": [\"Abbreviation\", \"Postal Code\", \"Subregion\"], \"info_id\": \"region\" } ] } }","title":"MapInfo Service config"},{"location":"references/qwc-mapinfo-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description INFO_TABLE Table to use INFO_GEOM_COL Geometry column in table INFO_DISPLAY_COL Display text column in table INFO_TITLE Display title","title":"Environment variables"},{"location":"references/qwc-mapinfo-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"mapinfo_query\": [ \"country\", \"type\", \"region\" ] } }, { \"role\": \"demo\", \"permissions\": { \"mapinfo_query\": [] } } ] }","title":"Permissions"},{"location":"references/qwc-mapinfo-service_readme/#usage","text":"Run as python src/server.py API documentation: http://localhost:5016/api/","title":"Usage"},{"location":"references/qwc-mapinfo-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-mapinfo-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-mapinfo-service_readme/#testing","text":"Run all tests: python test.py","title":"Testing"},{"location":"references/qwc-ogc-service/","text":"<title>QWC OGC Service</title> QWC OGC Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/master/schemas/qwc-ogc-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"ogc\" config Required root config Config options Type: object default_qgis_server_url root config default_qgis_server_url Type: string Default base URL for WMS/WFS requests. Default: http://localhost:8001/ows oapi_qgis_server_url root config oapi_qgis_server_url Type: string Default base URL for OGC API requests. Default: http://localhost:8001/wfs3 qgis_server_url_tenant_suffix root config qgis_server_url_tenant_suffix Type: string If qgs_resources are placed in tenant specific subdirs, set this property to the respective subdir path portion. Default: <empty> basic_auth_login_url root config basic_auth_login_url Type: array of string Login verification URL for requests with basic auth. Example: http://qwc-auth-service:9090/verify_login . Default: null No Additional Items Each item of this array must be: root config basic_auth_login_url basic_auth_login_url items Type: string auth_service_url root config auth_service_url Type: string URL to auth service, used for login redirects. Default: /auth/ network_timeout root config network_timeout Type: number Network timeout for requests forwarded to the QGIS Server, in seconds. Default: 30 qgis_server_identity_parameter root config qgis_server_identity_parameter Type: string Name of the active user parameter for the QGIS Server. Will be set to the name of the logged in user in qwc2. auth_required root config auth_required Type: boolean Whether to enforce authentication before processing requests. Default: false public_paths root config public_paths Type: array of string Optional: List of paths that will be accessible without a JWT identity, if auth_required is set. Default: [] No Additional Items Each item of this array must be: root config public_paths public_paths items Type: string oapif_max_limit root config oapif_max_limit Type: number The maximum limit for OGC API Features requests. Default: 10000 marker_params root config marker_params Type: object Optional: Marker parameter definitions default root config marker_params default Type: string Default value type root config marker_params type Type: string Parameter type (number, color, string) resources Required root resources Resources Type: object wms_services root resources wms_services WMS services Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS service WMS service Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS service name Type: string WMS service name wms_url root resources wms_services WMS service wms_url Type: string Custom WMS URL if different from default_qgis_server_url online_resources root resources wms_services WMS service online_resources Type: object Custom OnlineResources shown in GetCapabilities service root resources wms_services WMS service online_resources service Type: string Default public base URL for OnlineResources feature_info root resources wms_services WMS service online_resources feature_info Type: string Public base URL for FeatureInfo OnlineResources legend root resources wms_services WMS service online_resources legend Type: string Public base URL for Legend OnlineResources root_layer Required root resources wms_services WMS service root_layer Root layer of WMS (layer or group layer) One of WMS Layer WMS Group Layer root resources wms_services WMS service root_layer oneOf WMS Layer WMS Layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS service root_layer oneOf WMS Layer name Type: string WMS layer name type root resources wms_services WMS service root_layer oneOf WMS Layer type Type: const Layer type Specific value: \"layer\" title root resources wms_services WMS service root_layer oneOf WMS Layer title Type: string Layer title attributes root resources wms_services WMS service root_layer oneOf WMS Layer attributes Attributes for GetFeatureInfo, as a list of attribute names or a attrib name:attrib alias lookup Any of Option 1 Option 2 root resources wms_services WMS service root_layer oneOf WMS Layer attributes anyOf item 0 Type: object Additional Properties Each additional property must conform to the following schema root resources wms_services WMS service root_layer oneOf WMS Layer attributes anyOf item 0 additionalProperties Type: string Field alias root resources wms_services WMS service root_layer oneOf WMS Layer attributes anyOf item 1 Type: array of string No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf WMS Layer attributes anyOf item 1 item 1 items Type: string queryable root resources wms_services WMS service root_layer oneOf WMS Layer queryable Type: boolean Whether this layer is queryable opacity root resources wms_services WMS service root_layer oneOf WMS Layer opacity Type: integer Custom base opacity from 0-100 (Hidden sublayers only) root resources wms_services WMS service root_layer oneOf WMS Group Layer WMS Group Layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS service root_layer oneOf WMS Group Layer name Type: string WMS group layer name type root resources wms_services WMS service root_layer oneOf WMS Group Layer type Type: const Layer type Specific value: \"layergroup\" title root resources wms_services WMS service root_layer oneOf WMS Group Layer title Type: string Group title layers Required root resources wms_services WMS service root_layer oneOf WMS Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items One of WMS Layer WMS Group Layer root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items oneOf WMS Layer WMS Layer Type: object Single layer Same definition as WMS Layer root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items oneOf WMS Group Layer WMS Group Layer Type: object Group layer with nested sublayers Same definition as WMS Group Layer hide_sublayers root resources wms_services WMS service root_layer oneOf WMS Group Layer hide_sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) print_url root resources wms_services WMS service print_url Type: string Custom WMS URL for printing, e.g. if using a separate QGIS project. print_templates root resources wms_services WMS service print_templates Type: array of string Available print templates No Additional Items Each item of this array must be: root resources wms_services WMS service print_templates print_templates items Type: string legend_default_font_size root resources wms_services WMS service legend_default_font_size Type: number Default font size for GetLegendGraphic request internal_print_layers root resources wms_services WMS service internal_print_layers Type: array of string Internal layer names used for printing and raster export of background and external layers No Additional Items Each item of this array must be: root resources wms_services WMS service internal_print_layers internal_print_layers items Type: string wfs_services root resources wfs_services WFS services Type: array of object No Additional Items Each item of this array must be: root resources wfs_services WFS service WFS service Type: object WFS service with list of layers name Required root resources wfs_services WFS service name Type: string WFS service name wfs_url root resources wfs_services WFS service wfs_url Type: string Custom WFS URL if different from default_qgis_server_url online_resource root resources wfs_services WFS service online_resource Type: string Custom OnlineResource shown in GetCapabilities layers Required root resources wfs_services WFS service layers Type: array List of WFS layers No Additional Items Each item of this array must be: root resources wfs_services WFS service layers WFS Layer WFS Layer Type: object Single layer name Required root resources wfs_services WFS service layers WFS Layer name Type: string WFS layer name attributes root resources wfs_services WFS service layers WFS Layer attributes Attributes for GetFeatureInfo, as a list of attribute names or a attrib name:attrib alias lookup Any of Option 1 Option 2 root resources wfs_services WFS service layers WFS Layer attributes anyOf item 0 Type: object Additional Properties Each additional property must conform to the following schema root resources wfs_services WFS service layers WFS Layer attributes anyOf item 0 additionalProperties Type: string Field alias root resources wfs_services WFS service layers WFS Layer attributes anyOf item 1 Type: array of string No Additional Items Each item of this array must be: root resources wfs_services WFS service layers WFS Layer attributes anyOf item 1 item 1 items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:18 +0000","title":"Qwc ogc service"},{"location":"references/qwc-ogc-service_readme/","text":"QWC OGC Service \u00b6 Provide OGC services with permission filters as a proxy to a QGIS server. It suppports proxying WMS, WFS, WFS-T and OGC API Features. Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/ogcConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/v2/schemas/qwc-ogc-service.json\", \"service\": \"ogc\", \"config\": { \"default_qgis_server_url\": \"http://localhost:8001/ows/\", \"oapi_qgis_server_url\": \"http://localhost:8001/wfs3/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"online_resources\": { \"service\": \"http://localhost:5013/qwc_demo\", \"feature_info\": \"http://localhost:5013/qwc_demo\", \"legend\": \"http://localhost:5013/qwc_demo\" }, \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"layers\": [ { \"name\": \"edit_points\", \"title\": \"Edit Points\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true }, { \"name\": \"edit_lines\", \"title\": \"Edit Lines\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true }, { \"name\": \"edit_polygons\", \"title\": \"Edit Polygons\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true } ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\", \"title\": \"Countries\", \"attributes\": { \"name\": \"name\", \"formal_en\": \"formal_en\", \"pop_est\": \"pop_est\", \"subregion\": \"subregion\", \"geometry\": \"geometry\" }, \"queryable\": true } ] }, \"print_url\": \"http://localhost:5013/qwc_demo\", \"print_templates\": [\"A4 Landscape\"], \"internal_print_layers\": [\"bluemarble_bg\", \"osm_bg\"] } ], \"wfs_services\": [ { \"name\": \"qwc_demo\", \"wfs_url\": \"http://localhost:8001/ows/qwc_demo_wfs\", \"online_resource\": \"http://localhost:5013/qwc_demo\", \"layers\": [ { \"name\": \"edit_points\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\" } }, { \"name\": \"edit_lines\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\" } } ] } ] } } Note : wfs_services example for a separate QGIS project qwc_demo_wfs with WFS enabled. Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"edit_lines\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"edit_polygons\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\", \"attributes\": [ \"name\", \"formal_en\", \"pop_est\", \"subregion\", \"geometry\" ] }, { \"name\": \"bluemarble_bg\" }, { \"name\": \"osm_bg\" } ], \"print_templates\": [\"A4 Landscape\"] } ] }, \"wfs_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\" ] }, { \"name\": \"edit_lines\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\" ] } ] } ] } ] } Note : layers in wms_services is a flat list of all permitted layers, group layers and internal print layers. Basic Auth \u00b6 The OGC service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] }, Marker params \u00b6 The OGC service supports specifying marker parameters to insert a SLD styled marker into GetMap requests via QGIS Server HIGHLIGHT_SYMBOL and HIGHLIGHT_GEOM . To use this feature, provide a SLD template and parameter definitions in the ogc service config, for example: \"marker_template\": \"<StyledLayerDescriptor><UserStyle><se:Name>Marker</se:Name><se:FeatureTypeStyle><se:Rule><se:Name>Single symbol</se:Name><se:PointSymbolizer><se:Graphic><se:Mark><se:WellKnownName>circle</se:WellKnownName><se:Fill><se:SvgParameter name=\\\"fill\\\">$FILL$</se:SvgParameter></se:Fill><se:Stroke><se:SvgParameter name=\\\"stroke\\\">$STROKE$</se:SvgParameter><se:SvgParameter name=\\\"stroke-width\\\">$STROKE_WIDTH$</se:SvgParameter></se:Stroke></se:Mark><se:Size>$SIZE$</se:Size></se:Graphic></se:PointSymbolizer></se:Rule></se:FeatureTypeStyle></UserStyle></StyledLayerDescriptor>\", \"marker_params\": { \"size\": { \"default\": 10, \"type\": \"number\" }, \"fill\": { \"default\": \"FFFFFF\", \"type\": \"color\" }, \"stroke\": { \"default\": \"FF0000\", \"type\": \"color\" }, \"stroke_width\": { \"default\": 5, \"type\": \"number\" } Note: Use $<PARAM_NAME>$ as parameter placeholders in the SLD template. You can selectively override the default values via environment variables by setting MARKER_<PARAM_NAME> (i.e. MARKER_SIZE ) to the desired values. You can then specify the MARKER URL query parameter in GetMap requests to inject a marker as follows: ...?SERVICE=WMS&REQUEST=GetMap&...&MARKER=X->123456|Y->123456|STROKE->000FFA... X and Y are compulsory and specify the marker position in map CRS, any other additional parameters are optional and will override the default values if provided. All parameters have to written in uppercase. Usage \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Set the DEFAULT_QGIS_SERVER_URL environment variable to the QGIS server URL when starting this service. (default: http://localhost:8001/ows/ on qwc-qgis-server container) Base URL: http://localhost:5013/ Service API: http://localhost:5013/api/ Sample requests: curl 'http://localhost:5013/qwc_demo?VERSION=1.1.1&SERVICE=WMS&REQUEST=GetCapabilities' Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Qwc ogc service readme"},{"location":"references/qwc-ogc-service_readme/#qwc-ogc-service","text":"Provide OGC services with permission filters as a proxy to a QGIS server. It suppports proxying WMS, WFS, WFS-T and OGC API Features.","title":"QWC OGC Service"},{"location":"references/qwc-ogc-service_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-ogc-service_readme/#service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/ogcConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/v2/schemas/qwc-ogc-service.json\", \"service\": \"ogc\", \"config\": { \"default_qgis_server_url\": \"http://localhost:8001/ows/\", \"oapi_qgis_server_url\": \"http://localhost:8001/wfs3/\" }, \"resources\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"wms_url\": \"http://localhost:8001/ows/qwc_demo\", \"online_resources\": { \"service\": \"http://localhost:5013/qwc_demo\", \"feature_info\": \"http://localhost:5013/qwc_demo\", \"legend\": \"http://localhost:5013/qwc_demo\" }, \"root_layer\": { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_demo\", \"layers\": [ { \"name\": \"edit_points\", \"title\": \"Edit Points\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true }, { \"name\": \"edit_lines\", \"title\": \"Edit Lines\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true }, { \"name\": \"edit_polygons\", \"title\": \"Edit Polygons\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\", \"maptip\": \"maptip\" }, \"queryable\": true } ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\", \"title\": \"Countries\", \"attributes\": { \"name\": \"name\", \"formal_en\": \"formal_en\", \"pop_est\": \"pop_est\", \"subregion\": \"subregion\", \"geometry\": \"geometry\" }, \"queryable\": true } ] }, \"print_url\": \"http://localhost:5013/qwc_demo\", \"print_templates\": [\"A4 Landscape\"], \"internal_print_layers\": [\"bluemarble_bg\", \"osm_bg\"] } ], \"wfs_services\": [ { \"name\": \"qwc_demo\", \"wfs_url\": \"http://localhost:8001/ows/qwc_demo_wfs\", \"online_resource\": \"http://localhost:5013/qwc_demo\", \"layers\": [ { \"name\": \"edit_points\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\" } }, { \"name\": \"edit_lines\", \"attributes\": { \"id\": \"id\", \"name\": \"Name\", \"description\": \"Description\", \"num\": \"Number\", \"value\": \"value\", \"type\": \"Type\", \"amount\": \"amount\", \"validated\": \"Validated\", \"datetime\": \"Date\", \"geometry\": \"geometry\" } } ] } ] } } Note : wfs_services example for a separate QGIS project qwc_demo_wfs with WFS enabled.","title":"Service config"},{"location":"references/qwc-ogc-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"wms_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"qwc_demo\" }, { \"name\": \"edit_demo\" }, { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"edit_lines\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"edit_polygons\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\", \"maptip\" ] }, { \"name\": \"geographic_lines\" }, { \"name\": \"country_names\" }, { \"name\": \"states_provinces\" }, { \"name\": \"countries\", \"attributes\": [ \"name\", \"formal_en\", \"pop_est\", \"subregion\", \"geometry\" ] }, { \"name\": \"bluemarble_bg\" }, { \"name\": \"osm_bg\" } ], \"print_templates\": [\"A4 Landscape\"] } ] }, \"wfs_services\": [ { \"name\": \"qwc_demo\", \"layers\": [ { \"name\": \"edit_points\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\" ] }, { \"name\": \"edit_lines\", \"attributes\": [ \"id\", \"name\", \"description\", \"num\", \"value\", \"type\", \"amount\", \"validated\", \"datetime\", \"geometry\" ] } ] } ] } ] } Note : layers in wms_services is a flat list of all permitted layers, group layers and internal print layers.","title":"Permissions"},{"location":"references/qwc-ogc-service_readme/#basic-auth","text":"The OGC service be configured to accept password authentication using Basic authentication. Example: \"config\": { \"basic_auth_login_url\": [\"http://qwc-auth-service:9090/verify_login\"] },","title":"Basic Auth"},{"location":"references/qwc-ogc-service_readme/#marker-params","text":"The OGC service supports specifying marker parameters to insert a SLD styled marker into GetMap requests via QGIS Server HIGHLIGHT_SYMBOL and HIGHLIGHT_GEOM . To use this feature, provide a SLD template and parameter definitions in the ogc service config, for example: \"marker_template\": \"<StyledLayerDescriptor><UserStyle><se:Name>Marker</se:Name><se:FeatureTypeStyle><se:Rule><se:Name>Single symbol</se:Name><se:PointSymbolizer><se:Graphic><se:Mark><se:WellKnownName>circle</se:WellKnownName><se:Fill><se:SvgParameter name=\\\"fill\\\">$FILL$</se:SvgParameter></se:Fill><se:Stroke><se:SvgParameter name=\\\"stroke\\\">$STROKE$</se:SvgParameter><se:SvgParameter name=\\\"stroke-width\\\">$STROKE_WIDTH$</se:SvgParameter></se:Stroke></se:Mark><se:Size>$SIZE$</se:Size></se:Graphic></se:PointSymbolizer></se:Rule></se:FeatureTypeStyle></UserStyle></StyledLayerDescriptor>\", \"marker_params\": { \"size\": { \"default\": 10, \"type\": \"number\" }, \"fill\": { \"default\": \"FFFFFF\", \"type\": \"color\" }, \"stroke\": { \"default\": \"FF0000\", \"type\": \"color\" }, \"stroke_width\": { \"default\": 5, \"type\": \"number\" } Note: Use $<PARAM_NAME>$ as parameter placeholders in the SLD template. You can selectively override the default values via environment variables by setting MARKER_<PARAM_NAME> (i.e. MARKER_SIZE ) to the desired values. You can then specify the MARKER URL query parameter in GetMap requests to inject a marker as follows: ...?SERVICE=WMS&REQUEST=GetMap&...&MARKER=X->123456|Y->123456|STROKE->000FFA... X and Y are compulsory and specify the marker position in map CRS, any other additional parameters are optional and will override the default values if provided. All parameters have to written in uppercase.","title":"Marker params"},{"location":"references/qwc-ogc-service_readme/#usage","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). Set the DEFAULT_QGIS_SERVER_URL environment variable to the QGIS server URL when starting this service. (default: http://localhost:8001/ows/ on qwc-qgis-server container) Base URL: http://localhost:5013/ Service API: http://localhost:5013/api/ Sample requests: curl 'http://localhost:5013/qwc_demo?VERSION=1.1.1&SERVICE=WMS&REQUEST=GetCapabilities'","title":"Usage"},{"location":"references/qwc-ogc-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-ogc-service_readme/#development","text":"Install dependencies and run service: uv run src/server.py With config path: CONFIG_PATH=/PATH/TO/CONFIGS/ uv run src/server.py","title":"Development"},{"location":"references/qwc-oidc-auth/","text":"<title>QWC OIDC authentication service</title> QWC OIDC authentication service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-oidc-auth/raw/main/schemas/qwc-oidc-auth.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"oidc-auth\" config Required root config Config options Type: object issuer_url Required root config issuer_url Type: string Format: uri OpenID Connect Issuer URL client_id Required root config client_id Type: string Client ID client_secret Required root config client_secret Type: string Client secret openid_scopes root config openid_scopes Type: string Default: \"openid email profile\" Scopes redirect_uri root config redirect_uri Type: string Custom redirect URI after calling authorization endpoint username root config username Type: string Attribute for user name groupinfo root config groupinfo Type: string Attribute name of group memberships authorized_api_token root config authorized_api_token Type: array of object List of api token authorized to use tokenlogin endpoint No Additional Items Each item of this array must be: root config authorized_api_token authorized_api_token items Type: object keys_url root config authorized_api_token authorized_api_token items keys_url Type: string Public keys URL to decode token claims_options root config authorized_api_token authorized_api_token items claims_options Type: object Token validation parameters following authlib specs : https://docs.authlib.org/en/latest/jose/jwt.html#jwt-payload-claims-validation db_url root config db_url Type: string DB connection URL (to sync users and user info fields). Can be set to an empty string if sync is not needed. Default: postgresql:///?service=qwc_configdb qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config user_info_fields root config user_info_fields Type: array of string List of user info fields to get from IdP and to include in JWT identity and DB (if db_url is set). Default: [] No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:19 +0000","title":"Qwc oidc auth"},{"location":"references/qwc-oidc-auth_readme/","text":"OpenID Connect Authentication \u00b6 Authentication service with OpenID Connect. Dependencies \u00b6 Authlib Flask-JWT-Extended Configuration \u00b6 Environment variables (single tenant): Variable Description Default value ISSUER_URL OpenID Connect Issuer URL - CLIENT_ID Client ID - CLIENT_SECRET Client secret - Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/oidcAuthConfig.json Example: { \"$schema\": \"https://github.com/qwc-services/qwc-oidc-auth/raw/main/schemas/qwc-oidc-auth.json\", \"service\": \"oidc-auth\", \"config\": { \"issuer_url\": \"https://qwc2-dev.onelogin.com/oidc/2\", \"client_id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxxxx\", \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } } The service expects authentication service information at $ISSUER_URL/.well-known/openid-configuration See JSON schema for optional configuration options. Configure Access Token endpoint \u00b6 It is possible to authorize connection with a external Access Token in the Authorization Header (endpoint /tokenlogin ). For each token a configuration needs to be add in authorized_api_token . Example: { \"$schema\": \"https://github.com/qwc-services/qwc-oidc-auth/raw/main/schemas/qwc-oidc-auth.json\", \"service\": \"oidc-auth\", \"config\": { \"issuer_url\": \"https://qwc2-dev.onelogin.com/oidc/2\", \"client_id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxxxx\", \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"authorized_api_token\": [{ \"keys_url\": \"https://public_keys_url_to_decode_token\", \"claims_options\":{ \"iss\": { \"essential\": true, \"values\": [\"https://example.com\", \"https://example.org\"] }, \"sub\": { \"essential\": true, \"value\": \"xxxxxxxxxxxxx\" }, \"aud\": { \"essential\": true, \"value\": \"api://xxxx-xxxxxxxxx-xxxxx\" } } }] } } claims_options are the token validation parameters which allow fine control over the content of the payload. See https://docs.authlib.org/en/latest/jose/jwt.html#jwt-payload-claims-validation. Identity provider configuration \u00b6 CLIENT_ID and CLIENT_SECRET are defined on identity provider side. The Redirect URI is the public base URL with the endpoint /callback (Example: https://qwc2.sourcepole.ch/oauth/callback). This redirect URI can be manually configured with redirect_uri . Usage/Development \u00b6 Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py Login: http://127.0.0.1:5017/login","title":"Qwc oidc auth readme"},{"location":"references/qwc-oidc-auth_readme/#openid-connect-authentication","text":"Authentication service with OpenID Connect.","title":"OpenID Connect Authentication"},{"location":"references/qwc-oidc-auth_readme/#dependencies","text":"Authlib Flask-JWT-Extended","title":"Dependencies"},{"location":"references/qwc-oidc-auth_readme/#configuration","text":"Environment variables (single tenant): Variable Description Default value ISSUER_URL OpenID Connect Issuer URL - CLIENT_ID Client ID - CLIENT_SECRET Client secret -","title":"Configuration"},{"location":"references/qwc-oidc-auth_readme/#service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/oidcAuthConfig.json Example: { \"$schema\": \"https://github.com/qwc-services/qwc-oidc-auth/raw/main/schemas/qwc-oidc-auth.json\", \"service\": \"oidc-auth\", \"config\": { \"issuer_url\": \"https://qwc2-dev.onelogin.com/oidc/2\", \"client_id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxxxx\", \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } } The service expects authentication service information at $ISSUER_URL/.well-known/openid-configuration See JSON schema for optional configuration options.","title":"Service config"},{"location":"references/qwc-oidc-auth_readme/#configure-access-token-endpoint","text":"It is possible to authorize connection with a external Access Token in the Authorization Header (endpoint /tokenlogin ). For each token a configuration needs to be add in authorized_api_token . Example: { \"$schema\": \"https://github.com/qwc-services/qwc-oidc-auth/raw/main/schemas/qwc-oidc-auth.json\", \"service\": \"oidc-auth\", \"config\": { \"issuer_url\": \"https://qwc2-dev.onelogin.com/oidc/2\", \"client_id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxxxx\", \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"authorized_api_token\": [{ \"keys_url\": \"https://public_keys_url_to_decode_token\", \"claims_options\":{ \"iss\": { \"essential\": true, \"values\": [\"https://example.com\", \"https://example.org\"] }, \"sub\": { \"essential\": true, \"value\": \"xxxxxxxxxxxxx\" }, \"aud\": { \"essential\": true, \"value\": \"api://xxxx-xxxxxxxxx-xxxxx\" } } }] } } claims_options are the token validation parameters which allow fine control over the content of the payload. See https://docs.authlib.org/en/latest/jose/jwt.html#jwt-payload-claims-validation.","title":"Configure Access Token endpoint"},{"location":"references/qwc-oidc-auth_readme/#identity-provider-configuration","text":"CLIENT_ID and CLIENT_SECRET are defined on identity provider side. The Redirect URI is the public base URL with the endpoint /callback (Example: https://qwc2.sourcepole.ch/oauth/callback). This redirect URI can be manually configured with redirect_uri .","title":"Identity provider configuration"},{"location":"references/qwc-oidc-auth_readme/#usagedevelopment","text":"Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py Login: http://127.0.0.1:5017/login","title":"Usage/Development"},{"location":"references/qwc-permalink-service/","text":"<title>QWC Permalink Service</title> QWC Permalink Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"permalink\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL. Defaults to postgresql:///?service=qwc_configdb. qwc_config_schema root config qwc_config_schema Type: string The name of the DB schema which stores the qwc config. Default: qwc_config permalinks_table Required root config permalinks_table Type: string Permalink table. Defaults to qwc_config.permalinks. user_permalink_table root config user_permalink_table Type: string User permalink table. Defaults to qwc config.user permalinks. user_bookmark_table root config user_bookmark_table Type: string User bookmarks table. Defaults to qwc config.user bookmarks. bookmarks_sort_order root config bookmarks_sort_order Type: string Bookmarks sort order, defaults to \"date, description\". default_expiry_period root config default_expiry_period Type: number Default expiry period for permalinks, in days. Default: null (no expiry) store_bookmarks_by_userid root config store_bookmarks_by_userid Type: boolean Whether to store bookmarks by userid instead of username. Default: true Generated using json-schema-for-humans on 2025-10-09 at 10:46:21 +0000","title":"Qwc permalink service"},{"location":"references/qwc-permalink-service_readme/","text":"QWC Permalink Service \u00b6 Stores and resolves compact permalinks for the Web Client. Permalinks are stored in a database table. Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . JSON config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permalinkConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json\", \"service\": \"permalink\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"permalinks_table\": \"qwc_config.permalinks\", \"user_bookmark_table\": \"qwc_config.user_bookmarks\" } } Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Default value Description DB_URL postgresql:///?service=qwc_configdb DB connection URL [1] PERMALINKS_TABLE qwc_config.permalinks Permalink table USER_BOOKMARK_TABLE qwc_config.user_bookmarks User bookmarks table [1] https://docs.sqlalchemy.org/en/13/core/engines.html#postgresql If you don't use qwc-config-db you have to create the tables first. Example: CREATE TABLE permalinks ( key character(10) NOT NULL PRIMARY KEY, data text, date date, expires date ); CREATE TABLE user_bookmarks ( username character varying NOT NULL PRIMARY KEY, data text, key varchar(10), date date, description text ); Usage \u00b6 Base URL: http://localhost:5018/ API documentation: http://localhost:5018/api/ Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Qwc permalink service readme"},{"location":"references/qwc-permalink-service_readme/#qwc-permalink-service","text":"Stores and resolves compact permalinks for the Web Client. Permalinks are stored in a database table.","title":"QWC Permalink Service"},{"location":"references/qwc-permalink-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-permalink-service_readme/#json-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permalinkConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json\", \"service\": \"permalink\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"permalinks_table\": \"qwc_config.permalinks\", \"user_bookmark_table\": \"qwc_config.user_bookmarks\" } }","title":"JSON config"},{"location":"references/qwc-permalink-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Default value Description DB_URL postgresql:///?service=qwc_configdb DB connection URL [1] PERMALINKS_TABLE qwc_config.permalinks Permalink table USER_BOOKMARK_TABLE qwc_config.user_bookmarks User bookmarks table [1] https://docs.sqlalchemy.org/en/13/core/engines.html#postgresql If you don't use qwc-config-db you have to create the tables first. Example: CREATE TABLE permalinks ( key character(10) NOT NULL PRIMARY KEY, data text, date date, expires date ); CREATE TABLE user_bookmarks ( username character varying NOT NULL PRIMARY KEY, data text, key varchar(10), date date, description text );","title":"Environment variables"},{"location":"references/qwc-permalink-service_readme/#usage","text":"Base URL: http://localhost:5018/ API documentation: http://localhost:5018/api/","title":"Usage"},{"location":"references/qwc-permalink-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-permalink-service_readme/#development","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Development"},{"location":"references/qwc-print-service/","text":"<title>QWC Print Service</title> QWC Print Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"print\" config Required root config Config options Type: object ogc_service_url Required root config ogc_service_url Type: string Internal OGC service url. Default: http://qwc-ogc-service:9090/ qgs_postfix root config qgs_postfix Type: string Optional QGIS project name postfix, to use a different project when printing. Default: `` label_values root config label_values Type: array of object No Additional Items Each item of this array must be: root config label_values label_values items Type: object field Required root config label_values label_values items field Type: string Name of field to inject into print params. value Required root config label_values label_values items value Type: string Value of field to inject into print params. May contain $username$ , which will be replaced with the current user name. label_queries root config label_queries Type: array of object No Additional Items Each item of this array must be: root config label_queries label_queries items Type: object db_url Required root config label_queries label_queries items db_url Type: string DB url query Required root config label_queries label_queries items query Type: string SQL Query. May contain $username$ , which will be replaced with the current user name. params Required root config label_queries label_queries items params Type: array of string Names of params to inject into the print params, in order of the values returned by the query. No Additional Items Each item of this array must be: root config label_queries label_queries items params params items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:23 +0000","title":"Qwc print service"},{"location":"references/qwc-print-service_readme/","text":"QWC Print service \u00b6 Forwards a print request to the OGC service, allowing injecting additional GetPrint WMS parameters (i.e. layout user labels). API documentation: http://localhost:5019/api/ Configuration \u00b6 The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . JSON config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/printConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json\", \"service\": \"print\", \"config\": { \"ogc_service_url\": \"http://localhost:5013/ows/\", \"print_pdf_filename\": \"qwc.pdf\", \"label_queries\": [ { \"db_url\": \"postgresql:///?service=fachdaten\", \"query\": \"SELECT 'Bearbeiter/in: ' || vorname || ' ' || nachname FROM benutzer WHERE username = $username$\", \"params\": [ \"NAME\" ] } ], \"label_values\": [ { \"field\": \"USERNAME\", \"value\": \"$username$\" } ] } } label_queries allows configuring additional parameters to inject into the WMS GetPrint request, which will be computed from a DB query The format is as follows: \"label_queries\": [ { \"db_url\": \"<db_url>\", \"query\": \"<query>\", \"params\": [\"<ParamName1>\", ...] },{ ... } ] where: query is an arbitrary query, returning exactly one row. The $username$ placeholder can be used to inject the current username. params is an array of parameter names to inject. The same number of parameters as number of returned values by the query must be specified. Similarly, label_values allows configuring additional static parameters to inject into the WMS GetPrint request. The format is as follows: \"label_values\": [ { \"field\": \"<ParamName1>\", \"value\": \"<value>\" },{ ... } ] Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description OGC_SERVICE_URL OGC Service URL QGIS_SERVER_VERSION QGIS Server version (e.g. 2.18.19 , 3.4.1 ) Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Development \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Qwc print service readme"},{"location":"references/qwc-print-service_readme/#qwc-print-service","text":"Forwards a print request to the OGC service, allowing injecting additional GetPrint WMS parameters (i.e. layout user labels). API documentation: http://localhost:5019/api/","title":"QWC Print service"},{"location":"references/qwc-print-service_readme/#configuration","text":"The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-print-service_readme/#json-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/printConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json\", \"service\": \"print\", \"config\": { \"ogc_service_url\": \"http://localhost:5013/ows/\", \"print_pdf_filename\": \"qwc.pdf\", \"label_queries\": [ { \"db_url\": \"postgresql:///?service=fachdaten\", \"query\": \"SELECT 'Bearbeiter/in: ' || vorname || ' ' || nachname FROM benutzer WHERE username = $username$\", \"params\": [ \"NAME\" ] } ], \"label_values\": [ { \"field\": \"USERNAME\", \"value\": \"$username$\" } ] } } label_queries allows configuring additional parameters to inject into the WMS GetPrint request, which will be computed from a DB query The format is as follows: \"label_queries\": [ { \"db_url\": \"<db_url>\", \"query\": \"<query>\", \"params\": [\"<ParamName1>\", ...] },{ ... } ] where: query is an arbitrary query, returning exactly one row. The $username$ placeholder can be used to inject the current username. params is an array of parameter names to inject. The same number of parameters as number of returned values by the query must be specified. Similarly, label_values allows configuring additional static parameters to inject into the WMS GetPrint request. The format is as follows: \"label_values\": [ { \"field\": \"<ParamName1>\", \"value\": \"<value>\" },{ ... } ]","title":"JSON config"},{"location":"references/qwc-print-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description OGC_SERVICE_URL OGC Service URL QGIS_SERVER_VERSION QGIS Server version (e.g. 2.18.19 , 3.4.1 )","title":"Environment variables"},{"location":"references/qwc-print-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-print-service_readme/#development","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and run service: uv run src/server.py","title":"Development"},{"location":"references/qwc-qgs-cache-preseed_readme/","text":"QWC QGS Cache Pre-Seed \u00b6 Docker image for pre-seeding the QGIS Server QGS project cache. This image will periodically query the capabilities for all/selected QGS projects below the projects directory to ensure that the projects are cached in the QGIS Server project cache, helping to avoid slow server responses which occur when a project is not in cache. Setup \u00b6 Add the qwc-qgs-cache-preseed container configuration to your QWC docker-compose.yml : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<tag> environment: FCGI_MIN_PROCESSES: 10 FCGI_MAX_PROCESSES: 10 ... volumes: - ./volumes/qgs-resources:/data:ro ... qwc-qgs-cache-preseed: image: docker.io/sourcepole/qwc-qgs-cache-preseed:<tag> environment: EXECUTE_ON_STARTUP: 1 CRON_SCHEDULE: \"0 3 * * *\" QGS_EXT: \".qgs\" FCGI_INSTANCES: 10 volumes: - ./volumes/preseed_services.txt:/preseed_services.txt:ro # OR # - ./volumes/qgs-resources:/data:ro # OR # - ./pg_service.conf:/srv/pg_service.conf:ro Configuration \u00b6 To control which QGS projects will be processed, you can: Mount a file to /preseed_services.txt which contains the services names, one per line. For example: subdir/projectname for a QGS file located in qgs-resources/subdir/projectname.qgs pg/schema/projectname for a QGS project located in a DB in schema schema and named projectname Mount the qgs-resources dir (or whichever directory is mounted to /data for qwc-qgis-server ) to /data , which will be then searches for projects (ending with $QGS_EXT ). Mount a postgres service configuration file to /srv/pg_service.conf . The service file should contain a [qgisprojects] service definition. It would consider all projects located in the service DB in a specific schema. The ENV PG_DB_SCHEMA can be used to set the schema name (defaults to qwc_config ). The following environment variables can be set: Name Default Description CRON_SCHEDULE 0 3 * * * Interval at which the pre-seeding script is run. Default: every day at 03:00. EXECUTE_ON_STARTUP 0 Whether to run the script when the container starts. QGS_EXT .qgs The QGS project extension to look for ( .qgs or .qgz ). FCGI_INSTANCES 10 The number of FCGI instances (i.e. the number if simultaneous requests to send). SLEEP_INTERVAL 1 The sleep interval in seconds between sending requests. DEFAULT_QGIS_SERVER_URL http://qwc-qgis-server/ows/ The default URL of the QGIS server to send requests to. PG_DB_SCHEMA qwc_config The name of the DB schema which stores QGIS projects in a table qgis_projects . Note : You should set FCGI_MIN_PROCESSES equals to FCGI_MAX_PROCESSES in the qwc-qgis-server container configuration and FCGI_INSTANCES to the same number in the qwc-qgs-cache-preseed container configuration.","title":"Qwc qgs cache preseed readme"},{"location":"references/qwc-qgs-cache-preseed_readme/#qwc-qgs-cache-pre-seed","text":"Docker image for pre-seeding the QGIS Server QGS project cache. This image will periodically query the capabilities for all/selected QGS projects below the projects directory to ensure that the projects are cached in the QGIS Server project cache, helping to avoid slow server responses which occur when a project is not in cache.","title":"QWC QGS Cache Pre-Seed"},{"location":"references/qwc-qgs-cache-preseed_readme/#setup","text":"Add the qwc-qgs-cache-preseed container configuration to your QWC docker-compose.yml : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<tag> environment: FCGI_MIN_PROCESSES: 10 FCGI_MAX_PROCESSES: 10 ... volumes: - ./volumes/qgs-resources:/data:ro ... qwc-qgs-cache-preseed: image: docker.io/sourcepole/qwc-qgs-cache-preseed:<tag> environment: EXECUTE_ON_STARTUP: 1 CRON_SCHEDULE: \"0 3 * * *\" QGS_EXT: \".qgs\" FCGI_INSTANCES: 10 volumes: - ./volumes/preseed_services.txt:/preseed_services.txt:ro # OR # - ./volumes/qgs-resources:/data:ro # OR # - ./pg_service.conf:/srv/pg_service.conf:ro","title":"Setup"},{"location":"references/qwc-qgs-cache-preseed_readme/#configuration","text":"To control which QGS projects will be processed, you can: Mount a file to /preseed_services.txt which contains the services names, one per line. For example: subdir/projectname for a QGS file located in qgs-resources/subdir/projectname.qgs pg/schema/projectname for a QGS project located in a DB in schema schema and named projectname Mount the qgs-resources dir (or whichever directory is mounted to /data for qwc-qgis-server ) to /data , which will be then searches for projects (ending with $QGS_EXT ). Mount a postgres service configuration file to /srv/pg_service.conf . The service file should contain a [qgisprojects] service definition. It would consider all projects located in the service DB in a specific schema. The ENV PG_DB_SCHEMA can be used to set the schema name (defaults to qwc_config ). The following environment variables can be set: Name Default Description CRON_SCHEDULE 0 3 * * * Interval at which the pre-seeding script is run. Default: every day at 03:00. EXECUTE_ON_STARTUP 0 Whether to run the script when the container starts. QGS_EXT .qgs The QGS project extension to look for ( .qgs or .qgz ). FCGI_INSTANCES 10 The number of FCGI instances (i.e. the number if simultaneous requests to send). SLEEP_INTERVAL 1 The sleep interval in seconds between sending requests. DEFAULT_QGIS_SERVER_URL http://qwc-qgis-server/ows/ The default URL of the QGIS server to send requests to. PG_DB_SCHEMA qwc_config The name of the DB schema which stores QGIS projects in a table qgis_projects . Note : You should set FCGI_MIN_PROCESSES equals to FCGI_MAX_PROCESSES in the qwc-qgis-server container configuration and FCGI_INSTANCES to the same number in the qwc-qgs-cache-preseed container configuration.","title":"Configuration"},{"location":"references/qwc-search-service/","text":"<title>QWC Fulltext Search Service</title> QWC Fulltext Search Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"search\" config Required root config Config options Type: object search_backend root config search_backend Type: string Search backend: solr or trgm. Default: solr. solr_service_url root config solr_service_url Type: string SOLR service URL solr_service_auth root config solr_service_auth Type: object SOLR service basic authentication. Default: None username root config solr_service_auth username Type: string Username for SOLR service authentication password root config solr_service_auth password Type: string Password for SOLR service authentication search_result_sort root config search_result_sort Type: string Search result ordering for solr search results. Default: search result sort trgm_feature_query_template root config trgm_feature_query_template Type: string Jinja template string to generate the feature query SQL. The following variables are passed to the template: searchtext (the full search text, as a string), words (the single words of the search text, as an array), facets (the permitted search facets, as an array) and facetlimit (maximum number of results per facet). The generated SQL can accept the same placeholder parameters and must return the columns as documented in trgm_feature_query . trgm_feature_query root config trgm_feature_query Type: string Trigram feature query SQL. You can use the placeholder parameters :term (full search string), :terms (list of words of the search string), :thres (similarity threshold), :facets (the permitted search facets, as a list) and :facetlimit (maximum number of results per facet). The query must return the columns display, facet id, id field name, feature id, bbox (as a [xmin,ymin,xmax,ymax] string), srid. trgm_layer_query_template root config trgm_layer_query_template Type: string Jinja template string to generate the layer query SQL. The following variables are passed to the template: searchtext (the full search text, as a string), words (the single words of the search text, as an array) and facets (the permitted search facets, as an array). The generated SQL can accept the same placeholder parameters and must return the columns as documented in trgm_layer_query . trgm_layer_query root config trgm_layer_query Type: string Trigram layer query SQL. You can use the placeholder parameters :term (full search string), :terms (list of words of the search string), :thres (similarity threshold) and :facets (the permitted search facets, as a list). The query must return the columns display, dataproduct id, dset info, sublayers, stacktype. trgm_similarity_threshold root config trgm_similarity_threshold Type: number Trigram similarity treshold. Default: 0.3 trgm_facet_search_limit root config trgm_facet_search_limit Type: number Default: 50 Trigram search result limit per facet. Controls the facetlimit parameter passed to the trgm_feature_query . Note: trgm_facet_search_limit + 1 will be passed to the query, and the results will be limited to trgm_facet_search_limit in the backed, in order to discover where more than trgm_facet_search_limit results exist, in which case the backend will return count: -1 in the facet result counts. word_split_re root config word_split_re Type: string Default: \"[\\\\s,.:;\\\"]+\" Word split Regex search_result_limit root config search_result_limit Type: integer Default: 50 Result count limit per search db_url root config db_url Type: string Default DB connection for geometry result query resources Required root resources Resources Type: object facets Required root resources facets Search facets Type: array of object No Additional Items Each item of this array must be: root resources facets Facet Facet Type: object name Required root resources facets Facet name Type: string Facet name filter_word Required root resources facets Facet filter_word Type: string table_name root resources facets Facet table_name Type: string Default: \"search_v\" Table/View for search result geometries geometry_column root resources facets Facet geometry_column Type: string Default: \"geom\" Geometry column in search result table facet_column root resources facets Facet facet_column Type: string Default: \"subclass\" Facet name column in search result table db_url root resources facets Facet db_url Type: string DB connection for geometry result query Generated using json-schema-for-humans on 2025-10-09 at 10:46:24 +0000","title":"Qwc search service"},{"location":"references/qwc-search-service_readme/","text":"QWC Fulltext Search Service \u00b6 Faceted fulltext search and geometry retrieval for search results, with two backend options: Apache Solr Postgresql with Trigram extension Configuration \u00b6 The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default . Search Service config \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/searchConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json\", \"service\": \"search\", \"config\": { \"search_backend\": \"solr\", \"solr_service_url\": \"http://localhost:8983/solr/gdi/select\", \"solr_service_auth\": { \"username\": \"solr\", \"password\": \"SolrRocks\" }, \"search_result_sort\": \"score desc, sort asc\", \"word_split_re\": \"[\\\\s,.:;\\\"]+\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\" }, \"resources\": { \"facets\": [ { \"name\": \"background\", \"filter_word\": \"Background\" }, { \"name\": \"foreground\", \"filter_word\": \"Map\" }, { \"name\": \"ne_10m_admin_0_countries\", \"filter_word\": \"Country\", \"table_name\": \"qwc_geodb.ne_10m_admin_0_countries\", \"geometry_column\": \"geom\", \"facet_column\": \"subclass\" } ] } } Permissions \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"dataproducts\": [ \"qwc_demo\" ], \"solr_facets\": [ \"foreground\", \"ne_10m_admin_0_countries\" ] } }, { \"role\": \"demo\", \"permissions\": { \"dataproducts\": [], \"solr_facets\": [] } } ] } Solr backend \u00b6 You can choose the solr backend by setting \"search_backend\": \"solr\" in the search service config. Solr Administration User Interface: http://localhost:8983/solr/ Core overview: http://localhost:8983/solr/#/gdi/core-overview Solr Ref guide: https://lucene.apache.org/solr/guide/8_0/ Indexing: https://lucene.apache.org/solr/guide/8_0/uploading-structured-data-store-data-with-the-data-import-handler.html#dataimporthandler-commands solr-precreate creates core in /var/solr/data/gdi . After a configuration change remove the content of /var/solr/data e.g. with sudo rm -rf volumes/solr/data/* curl 'http://localhost:8983/solr/gdi/dih_geodata?command=full-import' curl 'http://localhost:8983/solr/gdi/dih_geodata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:austr*' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=full-import&clean=false' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:qwc_demo' If you encounter permission problems with the solr service then try the following command: chown 8983:8983 volumes/solr/data Trgm backend \u00b6 You can choose the trgm backend by setting \"search_backend\": \"trgm\" and setting the trgm_feature_query , trgm_layer_query , trgm_similarity_threshold variables. See also the Search chapter in the qwc-services documentation . Environment variables \u00b6 Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description Default value SEARCH_BACKEND Search backend solr SOLR_SERVICE_URL SOLR service URL http://localhost:8983/solr/gdi/select WORD_SPLIT_RE Word split Regex [\\s,.:;\"]+ SEARCH_RESULT_LIMIT Result count limit per search 50 SEARCH_RESULT_SORT Sorting of search results (solr backend) score desc, sort asc DB_URL DB connection for search geometries view TRGM_FEATURE_QUERY Feature query SQL (trigram backend) TRGM_FEATURE_QUERY_TEMPLATE Feature query SQL Jinja template (trigram backend) TRGM_LAYER_QUERY_TEMPLATE Layer query SQL Jinja template (trigram backend) TRGM_SIMILARITY_THRESHOLD Trigram similarity treshold (trigram backend) 0.3 Usage/Development \u00b6 Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Overide configurations, if necessary: export SOLR_SERVICE_URL=http://localhost:8983/solr/gdi/select Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and start service: uv run src/server.py Search base URL: http://localhost:5011/ Search API: http://localhost:5011/api/ Examples: curl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries&searchtext=austr' curl 'http://localhost:5011/fts/?searchtext=Country:austr' curl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries&searchtext=qwc' curl -g 'http://localhost:5011/geom/ne_10m_admin_0_countries/?filter=[[\"ogc_fid\",\"=\",90]]' Docker usage \u00b6 See sample docker-compose.yml of qwc-docker . Testing \u00b6 Run all tests: python test.py","title":"Qwc search service readme"},{"location":"references/qwc-search-service_readme/#qwc-fulltext-search-service","text":"Faceted fulltext search and geometry retrieval for search results, with two backend options: Apache Solr Postgresql with Trigram extension","title":"QWC Fulltext Search Service"},{"location":"references/qwc-search-service_readme/#configuration","text":"The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json . The default tenant name is default .","title":"Configuration"},{"location":"references/qwc-search-service_readme/#search-service-config","text":"JSON schema File location: $CONFIG_PATH/<tenant>/searchConfig.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json\", \"service\": \"search\", \"config\": { \"search_backend\": \"solr\", \"solr_service_url\": \"http://localhost:8983/solr/gdi/select\", \"solr_service_auth\": { \"username\": \"solr\", \"password\": \"SolrRocks\" }, \"search_result_sort\": \"score desc, sort asc\", \"word_split_re\": \"[\\\\s,.:;\\\"]+\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\" }, \"resources\": { \"facets\": [ { \"name\": \"background\", \"filter_word\": \"Background\" }, { \"name\": \"foreground\", \"filter_word\": \"Map\" }, { \"name\": \"ne_10m_admin_0_countries\", \"filter_word\": \"Country\", \"table_name\": \"qwc_geodb.ne_10m_admin_0_countries\", \"geometry_column\": \"geom\", \"facet_column\": \"subclass\" } ] } }","title":"Search Service config"},{"location":"references/qwc-search-service_readme/#permissions","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json Example: { \"$schema\": \"https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"dataproducts\": [ \"qwc_demo\" ], \"solr_facets\": [ \"foreground\", \"ne_10m_admin_0_countries\" ] } }, { \"role\": \"demo\", \"permissions\": { \"dataproducts\": [], \"solr_facets\": [] } } ] }","title":"Permissions"},{"location":"references/qwc-search-service_readme/#solr-backend","text":"You can choose the solr backend by setting \"search_backend\": \"solr\" in the search service config. Solr Administration User Interface: http://localhost:8983/solr/ Core overview: http://localhost:8983/solr/#/gdi/core-overview Solr Ref guide: https://lucene.apache.org/solr/guide/8_0/ Indexing: https://lucene.apache.org/solr/guide/8_0/uploading-structured-data-store-data-with-the-data-import-handler.html#dataimporthandler-commands solr-precreate creates core in /var/solr/data/gdi . After a configuration change remove the content of /var/solr/data e.g. with sudo rm -rf volumes/solr/data/* curl 'http://localhost:8983/solr/gdi/dih_geodata?command=full-import' curl 'http://localhost:8983/solr/gdi/dih_geodata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:austr*' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=full-import&clean=false' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:qwc_demo' If you encounter permission problems with the solr service then try the following command: chown 8983:8983 volumes/solr/data","title":"Solr backend"},{"location":"references/qwc-search-service_readme/#trgm-backend","text":"You can choose the trgm backend by setting \"search_backend\": \"trgm\" and setting the trgm_feature_query , trgm_layer_query , trgm_similarity_threshold variables. See also the Search chapter in the qwc-services documentation .","title":"Trgm backend"},{"location":"references/qwc-search-service_readme/#environment-variables","text":"Config options in the config file can be overridden by equivalent uppercase environment variables. Variable Description Default value SEARCH_BACKEND Search backend solr SOLR_SERVICE_URL SOLR service URL http://localhost:8983/solr/gdi/select WORD_SPLIT_RE Word split Regex [\\s,.:;\"]+ SEARCH_RESULT_LIMIT Result count limit per search 50 SEARCH_RESULT_SORT Sorting of search results (solr backend) score desc, sort asc DB_URL DB connection for search geometries view TRGM_FEATURE_QUERY Feature query SQL (trigram backend) TRGM_FEATURE_QUERY_TEMPLATE Feature query SQL Jinja template (trigram backend) TRGM_LAYER_QUERY_TEMPLATE Layer query SQL Jinja template (trigram backend) TRGM_SIMILARITY_THRESHOLD Trigram similarity treshold (trigram backend) 0.3","title":"Environment variables"},{"location":"references/qwc-search-service_readme/#usagedevelopment","text":"Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config ). export CONFIG_PATH=../qwc-docker/volumes/config Overide configurations, if necessary: export SOLR_SERVICE_URL=http://localhost:8983/solr/gdi/select Configure environment: echo FLASK_ENV=development >.flaskenv Install dependencies and start service: uv run src/server.py Search base URL: http://localhost:5011/ Search API: http://localhost:5011/api/ Examples: curl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries&searchtext=austr' curl 'http://localhost:5011/fts/?searchtext=Country:austr' curl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries&searchtext=qwc' curl -g 'http://localhost:5011/geom/ne_10m_admin_0_countries/?filter=[[\"ogc_fid\",\"=\",90]]'","title":"Usage/Development"},{"location":"references/qwc-search-service_readme/#docker-usage","text":"See sample docker-compose.yml of qwc-docker .","title":"Docker usage"},{"location":"references/qwc-search-service_readme/#testing","text":"Run all tests: python test.py","title":"Testing"},{"location":"references/qwc-services-permissions/","text":"<title>QWC Services Permissions</title> QWC Services Permissions Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-services-core/raw/master/schemas/qwc-services-permissions.json\" Reference to JSON schema of these permissions users Required root users Users Type: array of object No Additional Items Each item of this array must be: root users User User Type: object name Required root users User name Type: string User name groups Required root users User groups Group memberships Type: array of string No Additional Items Each item of this array must be: root users User groups groups items Type: string roles root users User roles Role memberships Type: array of string No Additional Items Each item of this array must be: root users User roles roles items Type: string groups Required root groups Groups Type: array of object No Additional Items Each item of this array must be: root groups Group Group Type: object name Required root groups Group name Type: string Group name roles Required root groups Group roles Role memberships Type: array of string No Additional Items Each item of this array must be: root groups Group roles roles items Type: string roles Required root roles Roles Type: array of object No Additional Items Each item of this array must be: root roles Role Role Type: object role Required root roles Role role Type: string Role name permissions root roles Role permissions Permissions for role Type: object wms_services root roles Role permissions wms_services WMS services Type: array of object Permitted WMS services and layers for all QWC services using WMS requests (i.e. OGC, FeatureInfo, Legend, Print service) No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions WMS permissions Type: object name Required root roles Role permissions wms_services WMS permissions name Type: string WMS service name layers Required root roles Role permissions wms_services WMS permissions layers Type: array of object Flat list of permitted layers and group layers No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions layers layers items Type: object name Required root roles Role permissions wms_services WMS permissions layers layers items name Type: string WMS layer name attributes root roles Role permissions wms_services WMS permissions layers layers items attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions layers layers items attributes attributes items Type: string info_template root roles Role permissions wms_services WMS permissions layers layers items info_template Type: boolean print_templates root roles Role permissions wms_services WMS permissions print_templates Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions print_templates print_templates items Type: string wfs_services root roles Role permissions wfs_services WFS services Type: array of object Permitted WFS services and layers for OGC service No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions WFS permissions Type: object name Required root roles Role permissions wfs_services WFS permissions name Type: string WFS service name layers Required root roles Role permissions wfs_services WFS permissions layers Type: array of object List of permitted layers No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions layers layers items Type: object name Required root roles Role permissions wfs_services WFS permissions layers layers items name Type: string WFS layer name attributes root roles Role permissions wfs_services WFS permissions layers layers items attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions layers layers items attributes attributes items Type: string background_layers root roles Role permissions background_layers Background layers Type: array of string No Additional Items Each item of this array must be: root roles Role permissions background_layers background_layers items Type: string data_datasets root roles Role permissions data_datasets Data service datasets Type: array of object Permitted datasets for Data service No Additional Items Each item of this array must be: root roles Role permissions data_datasets Dataset permissions Dataset permissions Type: object name Required root roles Role permissions data_datasets Dataset permissions name Type: string Dataset name attributes Required root roles Role permissions data_datasets Dataset permissions attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions data_datasets Dataset permissions attributes attributes items Type: string writable root roles Role permissions data_datasets Dataset permissions writable Type: boolean creatable root roles Role permissions data_datasets Dataset permissions creatable Type: boolean readable root roles Role permissions data_datasets Dataset permissions readable Type: boolean updatable root roles Role permissions data_datasets Dataset permissions updatable Type: boolean deletable root roles Role permissions data_datasets Dataset permissions deletable Type: boolean viewer_tasks root roles Role permissions viewer_tasks Viewer tasks Type: array of string No Additional Items Each item of this array must be: root roles Role permissions viewer_tasks viewer_tasks items Type: string theme_info_links root roles Role permissions theme_info_links Theme info links Type: array of string No Additional Items Each item of this array must be: root roles Role permissions theme_info_links theme_info_links items Type: string plugin_data root roles Role permissions plugin_data Plugin data Type: array of object Permitted resources for custom Map viewer plugins No Additional Items Each item of this array must be: root roles Role permissions plugin_data Plugin permissions Plugin permissions Type: object name Required root roles Role permissions plugin_data Plugin permissions name Type: string Plugin name resources Required root roles Role permissions plugin_data Plugin permissions resources Type: array of string Plugin specific resources No Additional Items Each item of this array must be: root roles Role permissions plugin_data Plugin permissions resources resources items Type: string dataproducts root roles Role permissions dataproducts Dataproduct service datasets Type: array of string No Additional Items Each item of this array must be: root roles Role permissions dataproducts dataproducts items Type: string document_templates root roles Role permissions document_templates Document service templates Type: array of string No Additional Items Each item of this array must be: root roles Role permissions document_templates document_templates items Type: string search_providers root roles Role permissions search_providers Search providers Type: array of string No Additional Items Each item of this array must be: root roles Role permissions search_providers search_providers items Type: string solr_facets root roles Role permissions solr_facets Solr search facets Type: array of string No Additional Items Each item of this array must be: root roles Role permissions solr_facets solr_facets items Type: string Generated using json-schema-for-humans on 2025-10-09 at 10:46:22 +0000","title":"Qwc services permissions"},{"location":"references/qwc-services-permissions_readme/","text":"QWC Services Core \u00b6 The QWC Services are a collection of microservices providing configurations for and authorized access to different QWC Map Viewer components. See QWC Docker for using QWC Services with Docker. This repository contains the shared modules for QWC services. Environment variables \u00b6 Name Default Description JWT_SECRET_KEY <random> Secret key used to encode and decode JWTs. JWT_COOKIE_CSRF_PROTECT True Controls whether CSRF is enabled in JWT cookies. JWT_ACCESS_COOKIE_NAME access_token_cookie Name of the JWT access cookie. QWC_SERVICE_PREFIX `` URL path prefix for all QWC services for single-tenant setups. OVERRIDE_ACCESS_COOKIE_PATH <service_prefix> Path for which the access cookie is valid. QWC_TENANT `` Tenant name. Overrides the tenant name extracted from TENANT_HEADER . TENANT_HEADER <empty> The name of the HTTP header which contains the tenant name for multi-tenant setups. TENANT_PATH_PREFIX @service_prefix@/@tenant@ URL path prefix for all QWC services for multi-tenant setups. TENANT_ACCESS_COOKIE_PATH <tenant_path_prefix> Path for which the access cookie is valid for multi-tenant setups. ENABLE_POOLING False Enable db connection pooling. Defaults are used, if the following ENV are not set. POOL_SIZE 5 Maximum number of possible data base connections. MAX_OVERFLOW 10 Additional connections beyond pool_size during peak load. POOL_TIMEOUT 30 Time (in seconds) to wait for a connection to become available. POOL_RECYCLE -1 Time (in seconds) after idle connections will be resetted. CONFIG_PATH /srv/qwc_service/config The path under where QWC Services' configuration files reside. Development \u00b6 This repository contains a justfile with various helper tasks for releasing etc. Add a symlink to it in the parent directory of the qwc-services repositories: ln -s qwc-services-core/scripts/justfile .. To use a local version of QWC Services Core for development, replace the qwc-services-core module URL in requirements.txt of each service with an URL pointing to the local files: # git+git://github.com/qwc-services/qwc-services-core.git#egg=qwc-services-core file:../qwc-services-core/#egg=qwc-services-core QWC unified permissions \u00b6 A unified and simplified permissions format is also supported, if there is only a single WMS/WFS resource and resource permissions are identical in all QWC Services. This may be used as an alternative to the full QWC permission file ( JSON schema ) Structure \u00b6 JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json all_services : resources permitted for a role * top-level dataproducts below WMS root layer or WFS layers * additional restricted layers * additional layers with write permissions ( \"writable\": true ) * document templates wms_name : Name of WMS service and its root layer wfs_name : WFS service name dataproducts : nested details for dataproducts referenced from all_services and sublayers common_resources : additional resources with no restrictions * internal print layers * background layers * print templates * default Solr facets Example \u00b6 Example unified permissions for the following resources: WMS layer tree: * demo_wms (WMS root layer) * single_layer * group_layer * facade_layer (facade layer) * sublayer_a * sublayer_b * edit_layer * restricted_layer * osm_bg (internal print layer for 'osm' background layer) WFS layers (potential, not all have to actually be present in the WFS project file): * single_layer * sublayer_a * sublayer_b * edit_layer * restricted_layer Background layer: osm Print template: A4 Landscape Document template: demo_doc Unified permissions.json : { \"schema\": \"https://github.com/qwc-services/qwc-services-core/raw/master/schemas/qwc-services-unified-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"edit_demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"all_services\": { // top-level dataproducts: references to \"dataproducts\" \"single_layer\": {}, \"group_layer\": {}, \"facade_layer\": {}, // document templates \"demo_doc\": {} } } }, { \"role\": \"edit_demo\", \"permissions\": { \"all_services\": { // additional restricted layers \"restricted_layer\": {}, // additional layers with write permissions (default: writable=false) \"edit_layer\": { \"writable\": true } } } } ], // WMS name for wms_services \"wms_name\": \"demo_wms\", // WFS name for wfs_services \"wfs_name\": \"demo_wfs\", // details for dataproducts referenced from \"all_services\" and \"sublayers\" \"dataproducts\": [ // single layer { \"name\": \"single_layer\", \"attributes\": [ // permitted attributes, excluding \"geometry\" \"name\", \"number\", \"description\" ] }, // group layer { \"name\": \"group_layer\", \"sublayers\": [ // references to other \"dataproducts\" \"facade_layer\", \"edit_layer\" ] }, // facade layer { \"name\": \"facade_layer\", \"sublayers\": [ \"sublayer_a\", \"sublayer_b\" ] }, // facade sublayers { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\" ] }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\" ] }, // sublayers { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ] }, { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ] } ], // additional resources with no restrictions \"common_resources\": [ // internal print layers \"osm_bg\", // background layers \"osm\", // print templates \"A4 Landscape\", // default Solr facets \"foreground\", \"background\" ] } Full internal resource permissions expanded from unified permissions: NOTE: This generates more permissions than there are actual resources in a specific service. Any surplus permissions will be ignored. Expanded internal permissions **NOTE:** The internal permissions dict below has a slightly different structure than a full JSON permissions file. { \"users\": { \"demo\": [ \"edit_demo\" ] }, \"groups\": { \"demo\": [ \"edit_demo\" ] }, \"roles\": { // public permissions \"public\": { \"wms_services\": [ { \"name\": \"demo_wms\", \"layers\": [ { \"name\": \"demo_wms\" }, { \"name\": \"group_layer\" }, { \"name\": \"facade_layer\" }, { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\", \"geometry\" ], \"info_template\": true }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\", \"geometry\" ], \"info_template\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"demo_doc\" }, { \"name\": \"osm_bg\" }, { \"name\": \"osm\" }, { \"name\": \"A4 Landscape\" }, { \"name\": \"foreground\" }, { \"name\": \"background\" } ], \"print_templates\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } ], \"wfs_services\": [ { \"name\": \"demo_wfs\", \"layers\": [ { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\", \"geometry\" ] }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\", \"geometry\" ] }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ] }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ] } ] } ], \"background_layers\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ], \"data_datasets\": [ { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\" ], \"writable\": false, \"readable\": true }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\" ], \"writable\": false, \"readable\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ], \"writable\": false, \"readable\": true }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ], \"writable\": false, \"readable\": true } ], \"dataproducts\": [ \"demo_wms\", \"group_layer\", \"facade_layer\", \"sublayer_a\", \"sublayer_b\", \"edit_layer\", \"single_layer\", \"demo_doc\" ], \"document_templates\": [ \"demo_doc\" ], \"print_templates\": [], \"solr_facets\": [ \"sublayer_a\", \"sublayer_b\", \"edit_layer\", \"single_layer\", \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] }, // additional permissions for role edit_demo \"edit_demo\": { \"wms_services\": [ { \"name\": \"demo_wms\", \"layers\": [ { \"name\": \"demo_wms\" }, { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"osm_bg\" }, { \"name\": \"osm\" }, { \"name\": \"A4 Landscape\" }, { \"name\": \"foreground\" }, { \"name\": \"background\" } ], \"print_templates\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } ], \"wfs_services\": [ { \"name\": \"demo_wfs\", \"layers\": [ { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ] }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ] } ] } ], \"background_layers\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ], \"data_datasets\": [ { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ], \"writable\": false, \"readable\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ], \"writable\": true, \"readable\": true } ], \"dataproducts\": [ \"demo_wms\", \"restricted_layer\", \"edit_layer\" ], \"document_templates\": [], \"print_templates\": [], \"solr_facets\": [ \"restricted_layer\", \"edit_layer\", \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } } }","title":"Qwc services permissions readme"},{"location":"references/qwc-services-permissions_readme/#qwc-services-core","text":"The QWC Services are a collection of microservices providing configurations for and authorized access to different QWC Map Viewer components. See QWC Docker for using QWC Services with Docker. This repository contains the shared modules for QWC services.","title":"QWC Services Core"},{"location":"references/qwc-services-permissions_readme/#environment-variables","text":"Name Default Description JWT_SECRET_KEY <random> Secret key used to encode and decode JWTs. JWT_COOKIE_CSRF_PROTECT True Controls whether CSRF is enabled in JWT cookies. JWT_ACCESS_COOKIE_NAME access_token_cookie Name of the JWT access cookie. QWC_SERVICE_PREFIX `` URL path prefix for all QWC services for single-tenant setups. OVERRIDE_ACCESS_COOKIE_PATH <service_prefix> Path for which the access cookie is valid. QWC_TENANT `` Tenant name. Overrides the tenant name extracted from TENANT_HEADER . TENANT_HEADER <empty> The name of the HTTP header which contains the tenant name for multi-tenant setups. TENANT_PATH_PREFIX @service_prefix@/@tenant@ URL path prefix for all QWC services for multi-tenant setups. TENANT_ACCESS_COOKIE_PATH <tenant_path_prefix> Path for which the access cookie is valid for multi-tenant setups. ENABLE_POOLING False Enable db connection pooling. Defaults are used, if the following ENV are not set. POOL_SIZE 5 Maximum number of possible data base connections. MAX_OVERFLOW 10 Additional connections beyond pool_size during peak load. POOL_TIMEOUT 30 Time (in seconds) to wait for a connection to become available. POOL_RECYCLE -1 Time (in seconds) after idle connections will be resetted. CONFIG_PATH /srv/qwc_service/config The path under where QWC Services' configuration files reside.","title":"Environment variables"},{"location":"references/qwc-services-permissions_readme/#development","text":"This repository contains a justfile with various helper tasks for releasing etc. Add a symlink to it in the parent directory of the qwc-services repositories: ln -s qwc-services-core/scripts/justfile .. To use a local version of QWC Services Core for development, replace the qwc-services-core module URL in requirements.txt of each service with an URL pointing to the local files: # git+git://github.com/qwc-services/qwc-services-core.git#egg=qwc-services-core file:../qwc-services-core/#egg=qwc-services-core","title":"Development"},{"location":"references/qwc-services-permissions_readme/#qwc-unified-permissions","text":"A unified and simplified permissions format is also supported, if there is only a single WMS/WFS resource and resource permissions are identical in all QWC Services. This may be used as an alternative to the full QWC permission file ( JSON schema )","title":"QWC unified permissions"},{"location":"references/qwc-services-permissions_readme/#structure","text":"JSON schema File location: $CONFIG_PATH/<tenant>/permissions.json all_services : resources permitted for a role * top-level dataproducts below WMS root layer or WFS layers * additional restricted layers * additional layers with write permissions ( \"writable\": true ) * document templates wms_name : Name of WMS service and its root layer wfs_name : WFS service name dataproducts : nested details for dataproducts referenced from all_services and sublayers common_resources : additional resources with no restrictions * internal print layers * background layers * print templates * default Solr facets","title":"Structure"},{"location":"references/qwc-services-permissions_readme/#example","text":"Example unified permissions for the following resources: WMS layer tree: * demo_wms (WMS root layer) * single_layer * group_layer * facade_layer (facade layer) * sublayer_a * sublayer_b * edit_layer * restricted_layer * osm_bg (internal print layer for 'osm' background layer) WFS layers (potential, not all have to actually be present in the WFS project file): * single_layer * sublayer_a * sublayer_b * edit_layer * restricted_layer Background layer: osm Print template: A4 Landscape Document template: demo_doc Unified permissions.json : { \"schema\": \"https://github.com/qwc-services/qwc-services-core/raw/master/schemas/qwc-services-unified-permissions.json\", \"users\": [ { \"name\": \"demo\", \"groups\": [\"demo\"], \"roles\": [] } ], \"groups\": [ { \"name\": \"demo\", \"roles\": [\"edit_demo\"] } ], \"roles\": [ { \"role\": \"public\", \"permissions\": { \"all_services\": { // top-level dataproducts: references to \"dataproducts\" \"single_layer\": {}, \"group_layer\": {}, \"facade_layer\": {}, // document templates \"demo_doc\": {} } } }, { \"role\": \"edit_demo\", \"permissions\": { \"all_services\": { // additional restricted layers \"restricted_layer\": {}, // additional layers with write permissions (default: writable=false) \"edit_layer\": { \"writable\": true } } } } ], // WMS name for wms_services \"wms_name\": \"demo_wms\", // WFS name for wfs_services \"wfs_name\": \"demo_wfs\", // details for dataproducts referenced from \"all_services\" and \"sublayers\" \"dataproducts\": [ // single layer { \"name\": \"single_layer\", \"attributes\": [ // permitted attributes, excluding \"geometry\" \"name\", \"number\", \"description\" ] }, // group layer { \"name\": \"group_layer\", \"sublayers\": [ // references to other \"dataproducts\" \"facade_layer\", \"edit_layer\" ] }, // facade layer { \"name\": \"facade_layer\", \"sublayers\": [ \"sublayer_a\", \"sublayer_b\" ] }, // facade sublayers { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\" ] }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\" ] }, // sublayers { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ] }, { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ] } ], // additional resources with no restrictions \"common_resources\": [ // internal print layers \"osm_bg\", // background layers \"osm\", // print templates \"A4 Landscape\", // default Solr facets \"foreground\", \"background\" ] } Full internal resource permissions expanded from unified permissions: NOTE: This generates more permissions than there are actual resources in a specific service. Any surplus permissions will be ignored. Expanded internal permissions **NOTE:** The internal permissions dict below has a slightly different structure than a full JSON permissions file. { \"users\": { \"demo\": [ \"edit_demo\" ] }, \"groups\": { \"demo\": [ \"edit_demo\" ] }, \"roles\": { // public permissions \"public\": { \"wms_services\": [ { \"name\": \"demo_wms\", \"layers\": [ { \"name\": \"demo_wms\" }, { \"name\": \"group_layer\" }, { \"name\": \"facade_layer\" }, { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\", \"geometry\" ], \"info_template\": true }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\", \"geometry\" ], \"info_template\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"demo_doc\" }, { \"name\": \"osm_bg\" }, { \"name\": \"osm\" }, { \"name\": \"A4 Landscape\" }, { \"name\": \"foreground\" }, { \"name\": \"background\" } ], \"print_templates\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } ], \"wfs_services\": [ { \"name\": \"demo_wfs\", \"layers\": [ { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\", \"geometry\" ] }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\", \"geometry\" ] }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ] }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ] } ] } ], \"background_layers\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ], \"data_datasets\": [ { \"name\": \"sublayer_a\", \"attributes\": [ \"name\", \"number\", \"a\" ], \"writable\": false, \"readable\": true }, { \"name\": \"sublayer_b\", \"attributes\": [ \"name\", \"number\", \"b\" ], \"writable\": false, \"readable\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ], \"writable\": false, \"readable\": true }, { \"name\": \"single_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ], \"writable\": false, \"readable\": true } ], \"dataproducts\": [ \"demo_wms\", \"group_layer\", \"facade_layer\", \"sublayer_a\", \"sublayer_b\", \"edit_layer\", \"single_layer\", \"demo_doc\" ], \"document_templates\": [ \"demo_doc\" ], \"print_templates\": [], \"solr_facets\": [ \"sublayer_a\", \"sublayer_b\", \"edit_layer\", \"single_layer\", \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] }, // additional permissions for role edit_demo \"edit_demo\": { \"wms_services\": [ { \"name\": \"demo_wms\", \"layers\": [ { \"name\": \"demo_wms\" }, { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ], \"info_template\": true }, { \"name\": \"osm_bg\" }, { \"name\": \"osm\" }, { \"name\": \"A4 Landscape\" }, { \"name\": \"foreground\" }, { \"name\": \"background\" } ], \"print_templates\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } ], \"wfs_services\": [ { \"name\": \"demo_wfs\", \"layers\": [ { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\", \"geometry\" ] }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\", \"geometry\" ] } ] } ], \"background_layers\": [ \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ], \"data_datasets\": [ { \"name\": \"restricted_layer\", \"attributes\": [ \"name\", \"number\", \"description\" ], \"writable\": false, \"readable\": true }, { \"name\": \"edit_layer\", \"attributes\": [ \"name\", \"description\" ], \"writable\": true, \"readable\": true } ], \"dataproducts\": [ \"demo_wms\", \"restricted_layer\", \"edit_layer\" ], \"document_templates\": [], \"print_templates\": [], \"solr_facets\": [ \"restricted_layer\", \"edit_layer\", \"osm_bg\", \"osm\", \"A4 Landscape\", \"foreground\", \"background\" ] } } }","title":"Example"},{"location":"references/qwc2_plugins/","text":"Plugin reference \u00b6 API AttributeTable Authentication BackgroundSwitcher Bookmark BottomBar CookiePopup Cyclomedia Editing FeatureForm FeatureSearch GeometryDigitizer HeightProfile Help HomeButton Identify LayerCatalog LayerTree LocateButton Map MapCompare MapCopyright MapExport MapFilter MapInfoTooltip MapLegend MapTip Measure NewsPopup OverviewMap Panoramax Portal Print Redlining Reports Routing ScratchDrawing Settings Share StartupMarker TaskButton ThemeSwitcher TimeManager TopBar TourGuide ValueTool View3D ZoomButton Map support plugins EditingSupport LocateSupport MeasurementSupport RedliningSupport SnappingSupport 3D Plugins BackgroundSwitcher3D BottomBar3D Compare3D Draw3D ExportObjects3D HideObjects3D Identify3D LayerTree3D MapCopyright3D MapExport3D Measure3D OverviewMap3D Settings3D TopBar3D API \u00b6 Exposes an API for interacting with QWC2 via window.qwc2 . You can interact with the API as soon as the QWC2ApiReady event is dispatched. Here is an example of a custom plugin: window.addEventListener(\"QWC2ApiReady\", () => { const {React, PropTypes, connect} = window.qwc2.libs; const {TaskBar} = window.qwc2.components; class CurrentTheme extends React.Component { static propTypes = { theme: PropTypes.object }; render() { return React.createElement(TaskBar, {task: \"CurrentTheme\"}, React.createElement( 'span', {role: 'body'}, `Current theme: ${this.props.theme?.title}` ) ); } } const CurrentThemePlugin = connect(state => ({ theme: state.theme.current }))(CurrentTheme); window.qwc2.addPlugin(\"CurrentThemePlugin\", CurrentThemePlugin); }); Note : You can also write the plugin in JSX syntax, and transpile to plain JS using babel. To load custom plugins in QWC: Include the custom plugin code in index.html , i.e. <script type=\"text/javascript\" src=\"assets/js/currenttheme.js\" ></script> Enable the plugin in the plugins block of config.json { \"name\": \"CurrentTheme\" } The following action functions are exposed in the API: display editing layers locate map task theme windows I.e. setCurrentTask is available via window.qwc2.setCurrentTask . The following core libraries are accessible via window.qwc2.libs : axios React ReactDOM PropTypes connect ol uuid url The QWC shared components are acessible via window.qwc2.components , i.e. window.qwc2.components.SideBar . In addition, the following methods are available on window.qwc2 : addPlugin(name,plugin,translations) Add custom plugin name : An identifier plugin : The plugin component class translations : The plugin translation messages: {\"<lang>\": {<messages>}, ...} removePlugin(name) Remove custom plugin name : The identifier addIdentifyAttributeCalculator(name,calcFunc) Add custom attribute calculator (i.e. computed attributes which are added to GetFeatureInfo responses). name : An identifier calcFunc : The calculator function with signature function(layer, feature) The calcFunc should return either a two-enty [name, value] pair or a one-value [value] array. removeIdentifyAttributeCalculator(name) Remove custom identify attribute calculator name : The identifier addIdentifyExporter(name,exporterConfig) Add custom identify exporter name : An identifier exporterFunc : The exporter configuration The exporter configuration is an object of the shape { id: \"<id>\", title: \"<title>\", allowClipboard: <true|false>, export: (features, callback) => { callback({ data: <blob>, type: \"<mimeType>\", filename: \"<filename>\" }); } } removeIdentifyExporter(name) Remove identify exporter name : The identifier addExternalLayer(resource,optionsOrBeforeLayerName,sublayers) Convenience method for adding an external layer. resource : An external resource of the form wms:<service_url>#<layername> or wmts:<capabilities_url>#<layername> . options : An object which may contain the following fields: beforeLayerName : Insert the new layer before the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. afterLayerName : Insert the new layer after the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. sublayers : Whether to import the sublayer structure ( true ) or just a flat layer ( false ). drawScratch(geomType,message,drawMultiple,callback,style) Deprecated, use window.qwc2.drawGeometry instead. drawGeometry(geomType,message,callback,options) Draw geometries, and return these as GeoJSON to the calling application. geomType : Point , LineString , Polygon , Circle or Box . message : A descriptive string to display in the tool taskbar. callback : A function(result, crs) , the result being an array of GeoJSON features, and crs the projection of the feature coordinates. options : Optional configuration: drawMultiple : Whether to allow drawing multiple geometries (default: false ). style : A custom style object to use for the drawn features, in the same format as DEFAULT_FEATURE_STYLE in qwc2/utils/FeatureStyles.js . initialFeatures : Array of initial geometries. snapping : Whether snapping is available while drawing (default: false ). snappingActive : Whether snapping is initially active (default: false ) getState() Return the current application state. AttributeTable \u00b6 Display the attribute table of layers in a dialog. To make a layer available in the attribute table, create a a data resource and matching permissions for it in the qwc-admin-gui . The attribute table works for both read-only as well as read-write data resources. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowAddForGeometryLayers bool Whether to allow adding records for datasets which have a geometry column. undefined showEditFormButton bool Whether to show a button to open the edit form for selected layer. Requires the Editing plugin to be enabled. true showHiddenFields bool Whether to show hidden fields. true showLimitToExtent bool Whether to show the \"Limit to extent\" checkbox true zoomLevel number The zoom level for zooming to point features. 1000 Authentication \u00b6 Handles authentication Invokes the the authentication service specified by authServiceUrl in config.json . Property Type Description Default value clearLayerParam bool Whether to clear the layer parameter from the URL on login. undefined idleTimeout number An idle timeout in seconds after which the user is automatically logged of. undefined logoutTargetUrl string An URL to redirect to on logout, instead of the viewer URL. undefined requireLogin bool Whether authentication is required, i.e. the viewer automatically redirects to the login page if no user is authenticated. undefined showLoginUser bool Whether to display the currently logged in user below the application menu button. undefined BackgroundSwitcher \u00b6 Map button for switching the background layer. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 0 Bookmark \u00b6 Allows managing user bookmarks. Bookmarks are only allowed for authenticated users. Requires permalinkServiceUrl to point to a qwc-permalink-service . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right' BottomBar \u00b6 Bottom bar, displaying mouse coordinate, scale, etc. Property Type Description Default value additionalBottomBarLinks [{ label: string, labelMsgId: string, side: string, url: string, urlTarget: string, icon: string, }] Additional bottombar links. side can be left or right (default). undefined coordinateFormatter func Custom coordinate formatter, as (coordinate, crs) => string . undefined displayCoordinates bool Whether to display the coordinates in the bottom bar. true displayScalebar bool Whether to display the scalebar in the bottom bar. true displayScales bool Whether to display the scale in the bottom bar. true scalebarOptions object See OpenLayers API doc undefined termsUrl string The URL of the terms label anchor. undefined termsUrlIcon string Icon of the terms inline window. Relevant only when termsUrlTarget is iframe . undefined termsUrlTarget string The target where to open the terms URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. You can also use the :iframedialog:<dialogname>:<options> syntax to set up the inline window. undefined viewertitleUrl string The URL of the viewer title label anchor. undefined viewertitleUrlIcon string Icon of the viewer title inline window. Relevant only when viewertitleUrl is iframe . undefined viewertitleUrlTarget string The target where to open the viewer title URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. You can also use the :iframedialog:<dialogname>:<options> syntax to set up the inline window. undefined CookiePopup \u00b6 A simple popup to notify that cookies are used. Cyclomedia \u00b6 Cyclomedia integration for QWC2. Property Type Description Default value apikey string The Cyclomedia API key undefined clientId string OAuth client ID. undefined credentialUserInfoFields { username: string, password: string, } Fields from user_infos which contain username and password which will be pre-inserted into the login form. undefined cyclomediaVersion string The cyclomedia version. '24.1' displayMeasurements bool Whether to display Cyclomedia measurement geometries on the map. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } loginRedirectUri string The relative path to the redirect login handling of oauth. undefined logoutRedirectUri string The relative path to the redirect logout handling of oauth. undefined maxMapScale number The maximum map scale above which the recordings WFS won't be displayed. 5000 projection string The projection to use for Cyclomedia. 'EPSG:3857' Editing \u00b6 Allows editing geometries and attributes of datasets. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowCloneGeometry bool Whether to enable the \"Clone existing geometry\" functionality. true showAttributeTableButton bool Whether to show a button to open the AttributeTable (if the plugin is available). true side string The side of the application on which to display the sidebar. 'right' snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true width string The default width of the editing sidebar, as a CSS width string. \"30em\" FeatureForm \u00b6 Displays queried feature attributes in a form. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the feature via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ), rather than over WMS GetFeatureInfo like the Identify plugin. You need to create and permit Data resources for datasets which should be queryable via FeatureForm . If the dataset it editable, the feature attributes can be edited directly in the displayed form. Can be used as default identify tool by setting \"identifyTool\": \"FeatureForm\" in config.json . Property Type Description Default value clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 480, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } FeatureSearch \u00b6 Displays a dialog with a search form for configured QGIS feature searches with one or more input fields. See Configuring the QGIS feature search . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right' GeometryDigitizer \u00b6 Allows digitizing geometries to send to configured applications. Configure the available target applications in themesConfig.json : { \"themes\": { \"items\": [{ ... \"pluginData\": { \"geometryLinks\": [\"<geomLinkName>\", \"<geomLinkName>\", ...] } }], }, \"pluginData\": { \"geometryLinks\": [ { \"name\": \"<geomLinkName>\", // Link name referenced in theme item \"title\": \"<geomLinkTitle>\", // Link title, displayed in the selection combo \"geomType\": [\"<geomType>\", \"<geomType>\"] // Supported geometry types (Point, LineString, Polygon) \"url\": \"<targetApplicationUrl>\", // Application target URL, receiving the POST submit \"params\": {\"<key>\": \"<value>\", ...} // Optional: additional form parameters to post to URL \"target\": \"<target>\" | { // Optional: form POST target which to display the result \"iframedialog\": true, // Use an iframe dialog \"w\": <dialogWidth>, // Dialog width \"h\": <dialogHeight> // Dialog height } } ] } } Property Type Description Default value styleActive { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style of active geometries (i.e. supported by the selected application) { strokeColor: [0, 160, 0, 1], fillColor: [0, 160, 0, 0.33] } styleInactive { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style of inactive (i.e. not supported by the selected application) { strokeColor: [127, 127, 127, 1], fillColor: [127, 127, 127, 0.33] } HeightProfile \u00b6 Displays a height profile along a measured line. Triggered automatically when a line is measured via the Measure plugin. Requires elevationServiceUrl in config.json to point to a qwc-elevation-service , or a custom elevation interface to be exposed in window.QWC2ElevationInterface , see ElevationInterface.js . The print height profile functionality requires a template located by default at assets/templates/heightprofileprint.html with containing a container element with id=heightprofilecontainer . Property Type Description Default value height number The height of the height profile widget in pixels. 150 heightProfilePrecision number The precision of displayed and exported values (0: no decimals, 1: 1 decimal position, etc). 0 samples number The number of elevation samples to query. 500 templatePath string Template location for the height profile print functionality \":/templates/heightprofileprint.html\" Help \u00b6 Displays a custom help dialog in a sidebar. Define the help contents by specifying the bodyContentsFragmentUrl prop. Property Type Description Default value bodyContentsFragmentUrl string URL to a document containing a HTML fragment to display in the Help sidebar. undefined side string The side of the application on which to display the sidebar. 'right' HomeButton \u00b6 Map button for reverting to the home extent of the theme. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 5 themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined Identify \u00b6 Displays queried feature attributes. Uses WMS GetFeatureInfo to query features and displays the result in table, as a HTML fragment or as plain text based on the supported GetFeatureInfo format. Extendable in combination with the qwc-feature-info-service , which provides support for customized queries and templates for the result presentation. Property Type Description Default value attributeCalculator func Optional function for computing derived attributes. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined attributeTransform func Optional function for transforming attribute values. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true customExporters array Optional list of custom exporters to offer along with the built-in exporters. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. [] displayResultTree bool Whether to display a tree overview of results (as opposed to a flat list of results). true enableAggregatedReports bool Whether to enable the aggregated report download button. true enableExport {bool, array} Whether to enable the export functionality. Either true|false or a list of single allowed formats (builtin formats: json , geojson , csv , csvzip ) true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined exportGeometry bool Whether to include the geometry in exported features. Default: true . true featureInfoReturnsLayerName bool Whether to assume that XML GetFeatureInfo responses specify the technical layer name in the name attribute, rather than the layer title. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } highlightAllResults bool Whether to highlight all results if no result is hovered true initialRadiusUnits string The initial radius units of the identify dialog in radius mode. One of 'm', 'ft', 'km', 'mi'. 'm' params object Extra params to append to the GetFeatureInfo request (i.e. FI_POINT_TOLERANCE , FI_LINE_TOLERANCE , feature_count , ...). Additionally, region_feature_count and radius_feature_count are supported. undefined replaceImageUrls bool Whether to replace an attribute value containing an URL to an image with an inline image. true showLayerSelector bool Whether to show a layer selector to filter the identify results by layer. true LayerCatalog \u00b6 Displays a pre-configured catalog of external layers in a window. Configured through a catalog JSON containing a tree of external layer identifiers. For wms layers, sublayers: false denotes that the sublayer structure of the added layer should not be exposed in the layer tree. Example: { \"catalog\": [ { \"title\": \"\u00d6ffentlicher Verkehr swissTLMRegio\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.vec200-transportation-oeffentliche-verkehr\", \"sublayers\": false }, { \"title\": \"Gew\u00e4sserschutz\", \"resource\": \"wms:https://geo.so.ch/api/wms#ch.so.afu.gewaesserschutz[50]\" }, { \"title\": \"Landeskarten\", \"sublayers\": [ { \"title\": \"Landeskarte 1:1 Million | LK1000\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk1000.noscale\" }, { \"title\": \"Landeskarte 1:100`000 | LK100\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk100.noscale\" } ] } ] } Property Type Description Default value catalogUrl string The URL to the catalog JSON file. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } levelBasedIndentSize bool Whether to increase the indent size dynamically according to the current level ( true ) or keep the indent size constant ( false ). true registerCatalogSearchProvider bool Whether to register a search provider which allows searching catalog layers through the global search field. true LayerTree \u00b6 Displays the map layer tree in a sidebar. The print legend functionality requires a template located by default at assets/templates/legendprint.html with containing a container element with id=legendcontainer. Property Type Description Default value addLayerSeparator func Whether to allow adding separator entries in the layer tree, useful for organizing the tree. undefined allowCompare bool Whether to enable the compare function. Requires the MapCompare plugin. true allowImport bool Whether to allow importing external layers. true allowMapTips bool Whether to allow enabling map tips. true allowSelectIdentifyableLayers bool Whether to allow selection of identifyable layers. The showQueryableIcon property should be true to be able to select identifyable layers. false bboxDependentLegend {bool, string} Whether to display a BBOX dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. false enableLegendPrint bool Whether to enable the legend print functionality. true enableServiceInfo bool Whether to display a service info button to display the WMS service metadata. true enableVisibleFilter bool Whether to display a button to filter invisible layers from the layertree. true extraLegendParameters string Additional parameters to pass to the GetLegendGraphics request. undefined fallbackDrag bool Whether to use the fallback logic for drag-and-drop. undefined flattenGroups bool Whether to display a flat layer tree, omitting any groups. false grayUnchecked bool Whether to display unchecked layers gray in the layertree. true groupTogglesSublayers bool Whether toggling a group also toggles all sublayers. false infoInSettings bool Whether to display the layer info button inside the layer settings menu rather than next to the layer title. true layerInfoGeometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default layer info window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 480, initialX: null, initialY: null, initiallyDocked: false } onlyGroups bool Whether to only display layer groups but not individual layers in layertree. false scaleDependentLegend {bool, string} Whether to display a scale dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. undefined showAttributeTableLink bool Whether to display an icon linking to the layer attribute table in the layer options menu. undefined showLegendIcons bool Whether to display legend icons. true showQueryableIcon bool Whether to display the queryable icon to indicate that a layer is identifyable. true showRootEntry bool Whether to display the root entry of the layertree. true showToggleAllLayersCheckbox bool Whether to display a checkbox to toggle all layers. true side string The side of the application on which to display the sidebar. 'right' templatePath string Template location for the legend print functionality \":/templates/legendprint.html\" width string The initial width of the layertree, as a CSS width string. \"25em\" LocateButton \u00b6 Map button for controling the locate (GPS) state. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 2 themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined Map \u00b6 The main map component. Property Type Description Default value mapOptions { zoomDuration: number, enableRotation: bool, rotation: number, panStepSize: number, panPageSize: number, constrainExtent: bool, kineticPanParams: object, } Zoom duration in ms, rotation in degrees, panStepSize and panPageSize as fraction of map width/height. {} showLoading bool Whether to display the loading spinner when layers are loading. true swipeGeometryTypeBlacklist [string] A list of layer geometry types to ignore when determining the top-most layer to compare. [] swipeLayerNameBlacklist [string] A list of layer names to ignore when determining the top-most layer to compare. You can use * as a wildcard character. [] toolsOptions object Options to pass to the map support plugins, in the form {\"<Name>\": {<options>}} . Refer to the documentation of the Map support plugins for settable options. {} MapCompare \u00b6 Allows comparing the top layer with the rest of the map. Activated through a checkbox in the LayerTree. MapCopyright \u00b6 Displays layer attributions in the bottom right corner of the map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined MapExport \u00b6 Allows exporting a selected portion of the map to a variety of formats. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales {[number], bool} List of scales at which to export the map. If empty, scale can be freely specified. If false , the map can only be exported at the current scale. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale (if allowedScales is not false ). 1 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true fileNameTemplate string Template for the name of the generated files when downloading. Can contain the placeholders {username} , {tenant} , {theme} , {themeTitle} , {timestamp} . '{theme}_{timestamp}' forceAvailableFormats array Formats to force as available even if the map capabilities report otherwise. Useful if a serviceUrl is defined in a format configuration. undefined formatConfiguration { format: [{ name: string, labelMsgId: string, extraQuery: string, formatOptions: string, baseLayer: string, projections: array, serviceUrl: string, }], } Custom export configuration per format. If more than one configuration per format is provided, a selection combo will be displayed. labelMsgId is a translation string message id for the combo label. If not defined, name will be displayed. extraQuery will be appended to the query string (replacing any existing parameters). formatOptions will be passed as FORMAT_OPTIONS. baseLayer will be appended to the LAYERS instead of the background layer. projections is a list of export projections. If empty, the map projection is automatically used. serviceUrl is the address of a custom service to use instead of the layer OWS service url. undefined pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [] side string The side of the application on which to display the sidebar. 'right' MapFilter \u00b6 Allows filtering the map content via QGIS Server WMS FILTER. See Map filtering . Property Type Description Default value allowCustomFilters bool Whether to allow custom filters. undefined allowFilterByGeom bool Whether to allow filter by geometry. Requires the filter_geom plugin from qwc-qgis-server-plugins, and the filter will only be applied to postgis layers. undefined allowFilterByTime bool Whether to display the temporal filter if temporal dimensions are found. true highlightStyle { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style used for highlighting filter geometries. { strokeColor: [0, 0, 0], fillColor: [255, 255, 0, 0.25] } position number The position slot index of the map button, from the bottom (0: bottom slot). Set to -1 to hide the button. 5 side string The side of the application on which to display the sidebar. undefined MapInfoTooltip \u00b6 Provides map context information when right-clicking on the map. Displays the coordinates at the picked position by default. If elevationServiceUrl in config.json to points to a qwc-elevation-service , or a custom elevation interface is exposed in window.QWC2ElevationInterface (see ElevationInterface.js ), the height at the picked position is also displayed. If mapInfoService in config.json points to a qwc-mapinfo-service , additional custom information according to the qwc-mapinfo-service configuration is returned. You can pass additional plugin components to the MapInfoTooltip in appConfig.js : MapInfoTooltipPlugin: MapInfoTooltipPlugin([FirstPlugin, SecondPlugin]) where a Plugin is a React component of the form class MapInfoTooltipPlugin extends React.Component { static propTypes = { point: PropTypes.object, closePopup: PropTypes.func } render() { return ...; } }; Property Type Description Default value elevationPrecision number The number of decimal places to display for elevation values. 0 plugins array Additional plugin components for the map info tooltip. [] MapLegend \u00b6 Displays the map legend in a floating dialog. The user can toggle whether to display only layers which are enabled, visible in the current extent and/or visible at the current scale. See https://docs.qgis.org/3.28/en/docs/server_manual/services/wms.html#wms-getlegendgraphic for supported extra legend params. Property Type Description Default value addGroupTitles bool Whether to add group titles to the legend. false addLayerTitles bool Whether to add layer titles to the legend. Note that often the legend image itself already contains the layer title. false bboxDependentLegend bool Whether to display a BBOX-dependent legend by default. false excludeLayers array List of layernames to exclude from the legend. [] extraLegendParameters string Extra parameters to add to the GetLegendGraphics request. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. A locked window is not closeable and not resizeable. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } lockedWindow bool Whether the legend window is locked (always visible, not moveable or closeable). Set position and size via geometry . undefined onlyVisibleLegend bool Whether to only include enabled layers in the legend by default. false scaleDependentLegend bool Whether to display a scale-dependent legend by default. false MapTip \u00b6 Displays maptips by hovering over features on the map. Queries the map tips configured in the QGIS layer properites over GetFeatureInfo. The map tip needs to be configured in QGIS Layer Properties \u2192 Display. Property Type Description Default value layerFeatureCount number The maximum number of feature maptips to display for a single layer. 5 maxHeight string The maximum height of the maptip popop bubble, as a CSS string. \"15em\" maxWidth string The maximum height of the maptip popop bubble, as a CSS string. \"20em\" showFeatureSelection bool Whether to show the maptip feature selection on the map or not true Measure \u00b6 Allows measuring points/lines/areas on the map. Property Type Description Default value bearingHeadMarker string Head marker of bearing line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined bearingTailMarker string Tail marker of bearing line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined lineHeadMarker string Head marker of distance line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined lineTailMarker string Tail marker of distance line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined showMeasureModeSwitcher bool Whether to show the widget to switch between measure modes. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true NewsPopup \u00b6 Displays a newsletter in a popup dialog. The popup won't be dispayed anymore, if the user chooses so, until a newer revision is published (specified via newsRev prop). Property Type Description Default value newsDocument string URL to the news HTML document to display in the popup. undefined newsRev string Revision of the document. undefined showInSidebar bool Whether to show the news in a sidebar instead of a popup. undefined side string The side of the application on which to display the sidebar. undefined sidebarWidth string The default width of the sidebar, as a CSS width string. undefined OverviewMap \u00b6 Overview map support for the map component. Property Type Description Default value options object See OpenLayers API doc for general options. Additionally, you can specify: - layer : Custom overview layer, in the same form as background layer definitions ( {type: \"<wms|wmts>\", \"url\": ...} ). - viewOptions : Options for the OverviewMap View, see OpenLayers API doc . {} Panoramax \u00b6 Panoramax Integration for QWC2. Property Type Description Default value loadSequencesTiles bool Whether or not to load the layer containing the image sequences. true panoramaxInstance string URL of the Panoramax instance. 'api.panoramax.xyz' tileMode string Mode for the image sequences layer: either WMS (Require a custom URL) or MVT(EPSG:3857 only). 'mvt' wmsUrl string URL of the WMS image sequences layer. undefined Portal \u00b6 Displays a landing lage, consisting of a full-screen theme switcher and a configurable menu. Property Type Description Default value bottomBarLinks [{ href: string, label: string, labelmsgid: string, target: string, }] Links to show in the portal bottom bar undefined collapsibleGroups bool Whether to allow collapsing groups in the theme switcher. true logo string Name of a logo image below assets/img. undefined menuItems array Portal menu items, in the same format as the TopBar menu items. [] showMenuOnStartup bool Whether the menu should be visible on startup. undefined topBarText string Portal title text to show in the top bar. undefined Print \u00b6 Invokes QGIS Server WMS GetPrint to print the map to PDF. Uses the print layouts defined in the QGIS project. Property Type Description Default value allowGeoPdfExport bool Whether to allow GeoPDF export. Requires QGIS Server 3.32 or newer. undefined defaultDpi number The default print dpi. 300 defaultScaleFactor number The factor to apply to the map scale to determine the initial print map scale. 0.5 displayPrintSeries bool Show an option to print a series of extents. false displayRotation bool Whether to display the printing rotation control. true fileNameTemplate string Template for the name of the generated files when downloading. Can contain the placeholders {layout} , {username} , {tenant} , {theme} , {themeTitle} , {timestamp} . '{theme}_{timestamp}' formats [string] Export layout format mimetypes. If format is not supported by QGIS Server, print will fail. ['application/pdf', 'image/jpeg', 'image/png', 'image/svg'] gridInitiallyEnabled bool Whether the grid is enabled by default. false hideAutopopulatedFields bool Whether to hide form fields which contain autopopulated values (i.e. search result label). undefined inlinePrintOutput bool Whether to display the print output in an inline dialog instead triggering a download. false layoutHidePrefix string Hide layouts which begin with this prefix. undefined layoutSortOrder string Layout sort order, asc or desc. 'asc' movePrintSeries bool Whether to allow moving the extent while selecting the print series. false printExternalLayers bool Whether to print external layers. Requires QGIS Server 3.x! true printMapHighlights bool Whether to print highlights on the map, e.g. selected features or redlining. true restrictToPrintScales bool Restrict print scale to list of predefine print scales, if any. undefined scaleFactor number Scale factor to apply to line widths, font sizes, ... of redlining drawings passed to GetPrint. 1.9 side string The side of the application on which to display the sidebar. 'right' Redlining \u00b6 Allows drawing figures and text labels on the map. Property Type Description Default value allowGeometryLabels bool Whether to allow labeling geometric figures. true defaultAreaUnit string Default area unit. Options: metric, imperial, sqm, ha, sqkm, sqft, acre, sqmi 'metric' defaultBorderColor array Default border color. In format [r, g, b, a]. [255, 0, 0, 1] defaultFillColor array Default fill color. In format [r, g, b, a]. [255, 255, 255, 1] defaultLengthUnit string Default length unit. Options: metric, imperial, m, km, ft, mi 'metric' defaultTextFillColor array Default text fill color. In format [r, g, b, a]. [0, 0, 0, 1] defaultTextOutlineColor array Default text outline color. In format [r, g, b, a]. [255, 255, 255, 1] hiddenTools array Tools to hide. Available tools: Circle, Ellipse, Square, Box, HandDrawing, Transform, NumericInput, Buffer, Export. [] predefinedBorderColors [array] Predefined border colors. In format [[r, g, b, a], ...]. undefined predefinedFillColors [array] Predefined fill colors. In format [[r, g, b, a], ...]. undefined snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true Reports \u00b6 Allow generating reports for selected features. This plugin displays all available reports for the current theme, allows selecting one or more or all features of the layer, and finally generating an aggregated report for all selected features. Requires documentServiceUrl in config.json to point to a qwc-document-service . Property Type Description Default value side string The side of the application on which to display the sidebar. undefined Routing \u00b6 Compute routes and isochrones. Requires routingServiceUrl in config.json pointing to a Valhalla routing service. Property Type Description Default value enabledModes [string] List of enabled routing modes. [\"auto\", \"heavyvehicle\", \"transit\", \"bicycle\", \"pedestrian\"] enabledProviders [string] List of search providers to use for routing location search. [\"coordinates\", \"nominatim\"] geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: true, side: 'left' } showPinLabels bool Whether to label the routing waypoint pins with the route point number. true units object Set of units for isochrone time/distance intervals to use. { time: { min: 1, s: 60 }, distance: { km: 1, m: 1000 } } zoomAuto bool Automatically zoom to the extent of the route true ScratchDrawing \u00b6 Task which which can be invoked by other tools to draw a geometry and pass it to a callback. Only useful for third-party code, i.e. over the JavaScript API. Invoke as setCurrentTask(\"ScratchDrawing\", null, null, {callback: <function(features, crs)>}); Settings \u00b6 Settings panel. Allows configuring language and color scheme. Property Type Description Default value colorSchemes [{ title: string, titleMsgId: string, value: string, }] List of available color schemes. Value is the css class name, title/titleMsgId the display name. [] languages [{ title: string, titleMsgId: string, value: string, }] List of available languages. Value is the lang code, title/titleMsgId the display name. [] showDefaultThemeSelector bool Whether to show a selector to set the default theme/bookmark (of a logged in user). true side string The side of the application on which to display the sidebar. 'right' Share \u00b6 Share the current map as a URL/permalink. Compact permalinks will be generated if permalinkServiceUrl in config.json points to a qwc-permalink-service . Property Type Description Default value restrictableGroups array List of groups for which a permalink may optionally be restricted (only displayed for a logged-in user). undefined showLink bool Show the map URL. true showQRCode bool Show the QR code of the map URL. true showSocials {bool, [string]} Show the social buttons. Either true or false to enable/disable all, or an array of specific buttons to display (possible choices: email , facebook , twitter , linkedin , whatsapp ). true side string The side of the application on which to display the sidebar. 'right' StartupMarker \u00b6 Displays a marker when starting up the viewer. The marked is displayed in the center of the map if c=<x>,<y>&hc=1 is set in the URL. Property Type Description Default value removeMode string When to remove the marker. Possible choices: onpan, onzoom, onclickonmarker. 'onpan' TaskButton \u00b6 Generic map button to launch a task. Property Type Description Default value icon string The icon name. undefined mode string The task mode. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). 1 task string The task name. undefined themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined ThemeSwitcher \u00b6 Theme switcher panel. Property Type Description Default value collapsibleGroups bool Whether to allow collapsing theme groups. undefined hideAddThemeButton bool Whether to hide the add theme button. Note: the button will also be hidden if the global option allowAddingOtherThemes is false . undefined hideAddThemeLayersButton bool Whether to hide the add theme layers button. Note: the button will also be hidden if the global option allowAddingOtherThemes is false . undefined showActiveTheme bool Whether to display the currently active theme below the application menu button. Default: false false showDefaultThemeSelector bool Whether to show an icon to select the default theme/bookmark (of a logged in user). true showLayerAfterChangeTheme bool Whether to show the LayerTree by default after switching the theme. false showThemeFilter bool Wether to show the theme filter field in the top bar. true side string The side of the application on which to display the sidebar. 'right' themeLayersListWindowSize { width: number, height: number, } The default window size for the theme layers dialog. {width: 400, height: 300} width string Default width as a CSS string. \"50%\" TimeManager \u00b6 Allows controling the time dimension of temporal WMS layers. Property Type Description Default value cursorFormat string The format of the time cursor label. Either date , time or datetime . \"datetime\" dateFormat string The date format in the time controls, i.e. YYYY-MM-DD. \"YYYY-MM-DD[\\n]HH:mm:ss\" defaultAnimationInterval number The default interval for the temporal animation, in seconds. 1 defaultEnabled bool Default for TimeManager enabled when loading application. true or false false defaultFeatureCount number The default number of features that will be requested. 100 defaultStepSize number The default step size for the temporal animation, in step units. 1 defaultStepUnit string The default step unit for the temporal animation, one of ms , s , m , d , M , y , 10y , 100y \"d\" defaultTimelineDisplay string The default timeline display mode. One of hidden , minimal , features , layers . undefined defaultTimelineMode string The default timeline mode. One of fixed , infinite . \"fixed\" geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 800, initialHeight: 320, initiallyDocked: true } markerConfiguration { markersAvailable: bool, gradient: [string], markerOffset: array, markerPins: bool, } The feature marker configuration. { markersAvailable: true, gradient: [\"#f7af7d\", \"#eacc6e\", \"#fef89a\", \"#c5e09b\", \"#a3d29c\", \"#7cc096\", \"#79c8c5\", \"#34afce\"], markerOffset: [0, 0], markerPins: true } stepUnits [string] The available temporal animation step units. [\"s\", \"m\", \"h\", \"d\", \"M\", \"y\"] TopBar \u00b6 Top bar, containing the logo, searchbar, task buttons and app menu. Property Type Description Default value appMenuClearsTask bool Whether opening the app menu clears the active task. undefined appMenuCompact bool Whether show an appMenu compact (menu visible on icons hover) - Only available for desktop client. undefined appMenuFilterField bool Whether to display the filter field in the app menu. undefined appMenuHidden bool Whether to hide the app menu (useful primarely as a theme specific setting). undefined appMenuShortcut string The shortcut for tiggering the app menu, i.e. alt+shift+m. undefined appMenuVisibleOnStartup bool Whether to open the app menu on application startup. undefined logoFormat string The logo file format. \"svg\" logoSrc string The logo image URL if a different source than the default assets/img/logo.<ext> and assets/img/logo-mobile.<ext> is desired. undefined logoUrl string The hyperlink to open when the logo is clicked. undefined menuItems array The menu items. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] registerTaskSearchProvider bool Whether to register a search provider which allows searching menu tasks through the global search field. undefined searchOptions { allowSearchFilters: bool, hideResultLabels: bool, highlightStyle: { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, }, minScaleDenom: number, resultLimit: number, sectionsDefaultCollapsed: bool, showHighlightMarker: bool, showLayerAfterChangeTheme: bool, showLayerResultsBeforePlaces: bool, showResultInSearchText: bool, zoomToLayers: bool, } Options passed down to the search component. { showHighlightMarker: true, showResultInSearchText: true, minScaleDenom: 1000 } toolbarItems array The toolbar. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] toolbarItemsShortcutPrefix string The keyboard shortcut prefix for triggering toolbar tasks. I.e. alt+shift. The task are then triggered by +{1,2,3,...} for the 1st, 2nd, 3rd... toolbar icon. undefined TourGuide \u00b6 Launches a tour guide of the application, as configured by a configuration file. Property Type Description Default value tourGuideUrl string Url of the Tourguide JSON configuration. undefined ValueTool \u00b6 Displays raster band values of active raster layers at the hovered mouse position, queried via GetFeatureInfo. Property Type Description Default value enabled bool The number of decimal places to display for elevation values. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } View3D \u00b6 Displays a 3D map view. See 3D View . Property Type Description Default value buttonPosition number The position slot index of the 3d switch map button, from the bottom (0: bottom slot). 6 controlsPosition string The position of the navigation controls. Either top or bottom . 'top' defaultSceneQuality number The default scene quality factor ( 20 : min, 100 : max). undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry. { initialWidth: 600, initialHeight: 800, initialX: 0, initialY: 0, initiallyDocked: true } mouseButtons { left: string, middle: string, right: string, } Mouse buttons assignment. You can assign pan , rotate , zoom to each button. { left: 'pan', middle: 'zoom', right: 'rotate' } pluginOptions object Options to pass to the 3D plugins, in the form {\"<PluginName>\": {<options>}} . Refer to the documentation of the 3D plugins for settable options. {} ZoomButton \u00b6 Map button for zooming the map. Two specific plugins exist: ZoomInPlugin and ZoomOutPlugin, which are instances of ZoomButton for the respective zoom directions. Property Type Description Default value enableZoomByBoxSelection bool Enable zoom in or out by box selection. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). undefined themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined Map support plugins \u00b6 These plugins must be listed as children of the Map plugin. EditingSupport Editing support for the map component. LocateSupport \u00b6 GPS locate support for the map component. Property Type Description Default value drawCircle bool Whether to draw an accuracy circle around the location point. true metric bool Whether to display the accuracy in meters ( true ) or in feet ( false ). true showPopup bool Whether to show a popup displaying accuracy information when clicking on the location point. false startupMode string The geolocation startup mode. Either DISABLED , ENABLED or FOLLOWING . \"DISABLED\" stopFollowingOnDrag bool Whether to stop following when the map is dragged. false trackingOptions object Tracking options, as documented in the HTML5 Geolocation spec { maximumAge: 2000, enableHighAccuracy: true, timeout: 10000 } MeasurementSupport \u00b6 Measurement support for the map component. RedliningSupport \u00b6 Redlining support for the map component. SnappingSupport \u00b6 Snapping support for the map component. 3D Plugins \u00b6 These plugins must be listed as children of the View3D plugin. BackgroundSwitcher3D Map button for switching the background layer of the 3D map. BottomBar3D \u00b6 Bottom bar of the 3D map, displaying coordinates, projection, etc. Compare3D \u00b6 Split-screen and compare objects in the 3D map. Draw3D \u00b6 Draw objects in the 3D map. ExportObjects3D \u00b6 Export objects from the 3D map. HideObjects3D \u00b6 Hide objects in the 3D map. Identify3D \u00b6 Query attributes of objects in the 3D map. Property Type Description Default value geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } tileInfoServiceUrl string URL to service for querying additional tile information. Can contain the {tileset} and {objectid} placeholders. Expected to return a JSON dict with attributes. undefined LayerTree3D \u00b6 Layer and object tree for the 3D map Property Type Description Default value importedTilesBaseUrl string Base URL of imported tile sets. ':/' MapCopyright3D \u00b6 Displays layer attributions in the bottom right corner of the 3D map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined MapExport3D \u00b6 Export the 3D map image to raster formats. Measure3D \u00b6 Measure in the 3D map. OverviewMap3D \u00b6 Overview map for the 3D map. Settings3D \u00b6 Settings panel for the 3D map. TopBar3D \u00b6 Bottom bar of the 3D map, including the search bar, tool bar and menu. Property Type Description Default value menuItems array The menu items, in the same format as the 2D TopBar menu items. You can include entries for the View3D plugins. You can also include entries for 2D plugins which are compatible with the 3D view (i.e. ThemeSwitcher , Share , etc.), these will be displayed only in fullsceen 3D mode. undefined searchOptions { minScaleDenom: number, } Options passed down to the search component. { minScaleDenom: 1000 } toolbarItems array The toolbar, in the same format as the 2D TopBar toolbar items. You can include entries for the View3D plugins. You can also include entries for 2D plugins which are compatible with the 3D view (i.e. ThemeSwitcher , Share , etc.), these will be displayed only in fullsceen 3D mode. undefined","title":"Qwc2 plugins"},{"location":"references/qwc2_plugins/#plugin-reference","text":"API AttributeTable Authentication BackgroundSwitcher Bookmark BottomBar CookiePopup Cyclomedia Editing FeatureForm FeatureSearch GeometryDigitizer HeightProfile Help HomeButton Identify LayerCatalog LayerTree LocateButton Map MapCompare MapCopyright MapExport MapFilter MapInfoTooltip MapLegend MapTip Measure NewsPopup OverviewMap Panoramax Portal Print Redlining Reports Routing ScratchDrawing Settings Share StartupMarker TaskButton ThemeSwitcher TimeManager TopBar TourGuide ValueTool View3D ZoomButton Map support plugins EditingSupport LocateSupport MeasurementSupport RedliningSupport SnappingSupport 3D Plugins BackgroundSwitcher3D BottomBar3D Compare3D Draw3D ExportObjects3D HideObjects3D Identify3D LayerTree3D MapCopyright3D MapExport3D Measure3D OverviewMap3D Settings3D TopBar3D","title":"Plugin reference"},{"location":"references/qwc2_plugins/#api","text":"Exposes an API for interacting with QWC2 via window.qwc2 . You can interact with the API as soon as the QWC2ApiReady event is dispatched. Here is an example of a custom plugin: window.addEventListener(\"QWC2ApiReady\", () => { const {React, PropTypes, connect} = window.qwc2.libs; const {TaskBar} = window.qwc2.components; class CurrentTheme extends React.Component { static propTypes = { theme: PropTypes.object }; render() { return React.createElement(TaskBar, {task: \"CurrentTheme\"}, React.createElement( 'span', {role: 'body'}, `Current theme: ${this.props.theme?.title}` ) ); } } const CurrentThemePlugin = connect(state => ({ theme: state.theme.current }))(CurrentTheme); window.qwc2.addPlugin(\"CurrentThemePlugin\", CurrentThemePlugin); }); Note : You can also write the plugin in JSX syntax, and transpile to plain JS using babel. To load custom plugins in QWC: Include the custom plugin code in index.html , i.e. <script type=\"text/javascript\" src=\"assets/js/currenttheme.js\" ></script> Enable the plugin in the plugins block of config.json { \"name\": \"CurrentTheme\" } The following action functions are exposed in the API: display editing layers locate map task theme windows I.e. setCurrentTask is available via window.qwc2.setCurrentTask . The following core libraries are accessible via window.qwc2.libs : axios React ReactDOM PropTypes connect ol uuid url The QWC shared components are acessible via window.qwc2.components , i.e. window.qwc2.components.SideBar . In addition, the following methods are available on window.qwc2 : addPlugin(name,plugin,translations) Add custom plugin name : An identifier plugin : The plugin component class translations : The plugin translation messages: {\"<lang>\": {<messages>}, ...} removePlugin(name) Remove custom plugin name : The identifier addIdentifyAttributeCalculator(name,calcFunc) Add custom attribute calculator (i.e. computed attributes which are added to GetFeatureInfo responses). name : An identifier calcFunc : The calculator function with signature function(layer, feature) The calcFunc should return either a two-enty [name, value] pair or a one-value [value] array. removeIdentifyAttributeCalculator(name) Remove custom identify attribute calculator name : The identifier addIdentifyExporter(name,exporterConfig) Add custom identify exporter name : An identifier exporterFunc : The exporter configuration The exporter configuration is an object of the shape { id: \"<id>\", title: \"<title>\", allowClipboard: <true|false>, export: (features, callback) => { callback({ data: <blob>, type: \"<mimeType>\", filename: \"<filename>\" }); } } removeIdentifyExporter(name) Remove identify exporter name : The identifier addExternalLayer(resource,optionsOrBeforeLayerName,sublayers) Convenience method for adding an external layer. resource : An external resource of the form wms:<service_url>#<layername> or wmts:<capabilities_url>#<layername> . options : An object which may contain the following fields: beforeLayerName : Insert the new layer before the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. afterLayerName : Insert the new layer after the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. sublayers : Whether to import the sublayer structure ( true ) or just a flat layer ( false ). drawScratch(geomType,message,drawMultiple,callback,style) Deprecated, use window.qwc2.drawGeometry instead. drawGeometry(geomType,message,callback,options) Draw geometries, and return these as GeoJSON to the calling application. geomType : Point , LineString , Polygon , Circle or Box . message : A descriptive string to display in the tool taskbar. callback : A function(result, crs) , the result being an array of GeoJSON features, and crs the projection of the feature coordinates. options : Optional configuration: drawMultiple : Whether to allow drawing multiple geometries (default: false ). style : A custom style object to use for the drawn features, in the same format as DEFAULT_FEATURE_STYLE in qwc2/utils/FeatureStyles.js . initialFeatures : Array of initial geometries. snapping : Whether snapping is available while drawing (default: false ). snappingActive : Whether snapping is initially active (default: false ) getState() Return the current application state.","title":"API"},{"location":"references/qwc2_plugins/#attributetable","text":"Display the attribute table of layers in a dialog. To make a layer available in the attribute table, create a a data resource and matching permissions for it in the qwc-admin-gui . The attribute table works for both read-only as well as read-write data resources. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowAddForGeometryLayers bool Whether to allow adding records for datasets which have a geometry column. undefined showEditFormButton bool Whether to show a button to open the edit form for selected layer. Requires the Editing plugin to be enabled. true showHiddenFields bool Whether to show hidden fields. true showLimitToExtent bool Whether to show the \"Limit to extent\" checkbox true zoomLevel number The zoom level for zooming to point features. 1000","title":"AttributeTable"},{"location":"references/qwc2_plugins/#authentication","text":"Handles authentication Invokes the the authentication service specified by authServiceUrl in config.json . Property Type Description Default value clearLayerParam bool Whether to clear the layer parameter from the URL on login. undefined idleTimeout number An idle timeout in seconds after which the user is automatically logged of. undefined logoutTargetUrl string An URL to redirect to on logout, instead of the viewer URL. undefined requireLogin bool Whether authentication is required, i.e. the viewer automatically redirects to the login page if no user is authenticated. undefined showLoginUser bool Whether to display the currently logged in user below the application menu button. undefined","title":"Authentication"},{"location":"references/qwc2_plugins/#backgroundswitcher","text":"Map button for switching the background layer. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 0","title":"BackgroundSwitcher"},{"location":"references/qwc2_plugins/#bookmark","text":"Allows managing user bookmarks. Bookmarks are only allowed for authenticated users. Requires permalinkServiceUrl to point to a qwc-permalink-service . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right'","title":"Bookmark"},{"location":"references/qwc2_plugins/#bottombar","text":"Bottom bar, displaying mouse coordinate, scale, etc. Property Type Description Default value additionalBottomBarLinks [{ label: string, labelMsgId: string, side: string, url: string, urlTarget: string, icon: string, }] Additional bottombar links. side can be left or right (default). undefined coordinateFormatter func Custom coordinate formatter, as (coordinate, crs) => string . undefined displayCoordinates bool Whether to display the coordinates in the bottom bar. true displayScalebar bool Whether to display the scalebar in the bottom bar. true displayScales bool Whether to display the scale in the bottom bar. true scalebarOptions object See OpenLayers API doc undefined termsUrl string The URL of the terms label anchor. undefined termsUrlIcon string Icon of the terms inline window. Relevant only when termsUrlTarget is iframe . undefined termsUrlTarget string The target where to open the terms URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. You can also use the :iframedialog:<dialogname>:<options> syntax to set up the inline window. undefined viewertitleUrl string The URL of the viewer title label anchor. undefined viewertitleUrlIcon string Icon of the viewer title inline window. Relevant only when viewertitleUrl is iframe . undefined viewertitleUrlTarget string The target where to open the viewer title URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. You can also use the :iframedialog:<dialogname>:<options> syntax to set up the inline window. undefined","title":"BottomBar"},{"location":"references/qwc2_plugins/#cookiepopup","text":"A simple popup to notify that cookies are used.","title":"CookiePopup"},{"location":"references/qwc2_plugins/#cyclomedia","text":"Cyclomedia integration for QWC2. Property Type Description Default value apikey string The Cyclomedia API key undefined clientId string OAuth client ID. undefined credentialUserInfoFields { username: string, password: string, } Fields from user_infos which contain username and password which will be pre-inserted into the login form. undefined cyclomediaVersion string The cyclomedia version. '24.1' displayMeasurements bool Whether to display Cyclomedia measurement geometries on the map. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } loginRedirectUri string The relative path to the redirect login handling of oauth. undefined logoutRedirectUri string The relative path to the redirect logout handling of oauth. undefined maxMapScale number The maximum map scale above which the recordings WFS won't be displayed. 5000 projection string The projection to use for Cyclomedia. 'EPSG:3857'","title":"Cyclomedia"},{"location":"references/qwc2_plugins/#editing","text":"Allows editing geometries and attributes of datasets. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowCloneGeometry bool Whether to enable the \"Clone existing geometry\" functionality. true showAttributeTableButton bool Whether to show a button to open the AttributeTable (if the plugin is available). true side string The side of the application on which to display the sidebar. 'right' snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true width string The default width of the editing sidebar, as a CSS width string. \"30em\"","title":"Editing"},{"location":"references/qwc2_plugins/#featureform","text":"Displays queried feature attributes in a form. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the feature via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ), rather than over WMS GetFeatureInfo like the Identify plugin. You need to create and permit Data resources for datasets which should be queryable via FeatureForm . If the dataset it editable, the feature attributes can be edited directly in the displayed form. Can be used as default identify tool by setting \"identifyTool\": \"FeatureForm\" in config.json . Property Type Description Default value clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 480, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' }","title":"FeatureForm"},{"location":"references/qwc2_plugins/#featuresearch","text":"Displays a dialog with a search form for configured QGIS feature searches with one or more input fields. See Configuring the QGIS feature search . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right'","title":"FeatureSearch"},{"location":"references/qwc2_plugins/#geometrydigitizer","text":"Allows digitizing geometries to send to configured applications. Configure the available target applications in themesConfig.json : { \"themes\": { \"items\": [{ ... \"pluginData\": { \"geometryLinks\": [\"<geomLinkName>\", \"<geomLinkName>\", ...] } }], }, \"pluginData\": { \"geometryLinks\": [ { \"name\": \"<geomLinkName>\", // Link name referenced in theme item \"title\": \"<geomLinkTitle>\", // Link title, displayed in the selection combo \"geomType\": [\"<geomType>\", \"<geomType>\"] // Supported geometry types (Point, LineString, Polygon) \"url\": \"<targetApplicationUrl>\", // Application target URL, receiving the POST submit \"params\": {\"<key>\": \"<value>\", ...} // Optional: additional form parameters to post to URL \"target\": \"<target>\" | { // Optional: form POST target which to display the result \"iframedialog\": true, // Use an iframe dialog \"w\": <dialogWidth>, // Dialog width \"h\": <dialogHeight> // Dialog height } } ] } } Property Type Description Default value styleActive { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style of active geometries (i.e. supported by the selected application) { strokeColor: [0, 160, 0, 1], fillColor: [0, 160, 0, 0.33] } styleInactive { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style of inactive (i.e. not supported by the selected application) { strokeColor: [127, 127, 127, 1], fillColor: [127, 127, 127, 0.33] }","title":"GeometryDigitizer"},{"location":"references/qwc2_plugins/#heightprofile","text":"Displays a height profile along a measured line. Triggered automatically when a line is measured via the Measure plugin. Requires elevationServiceUrl in config.json to point to a qwc-elevation-service , or a custom elevation interface to be exposed in window.QWC2ElevationInterface , see ElevationInterface.js . The print height profile functionality requires a template located by default at assets/templates/heightprofileprint.html with containing a container element with id=heightprofilecontainer . Property Type Description Default value height number The height of the height profile widget in pixels. 150 heightProfilePrecision number The precision of displayed and exported values (0: no decimals, 1: 1 decimal position, etc). 0 samples number The number of elevation samples to query. 500 templatePath string Template location for the height profile print functionality \":/templates/heightprofileprint.html\"","title":"HeightProfile"},{"location":"references/qwc2_plugins/#help","text":"Displays a custom help dialog in a sidebar. Define the help contents by specifying the bodyContentsFragmentUrl prop. Property Type Description Default value bodyContentsFragmentUrl string URL to a document containing a HTML fragment to display in the Help sidebar. undefined side string The side of the application on which to display the sidebar. 'right'","title":"Help"},{"location":"references/qwc2_plugins/#homebutton","text":"Map button for reverting to the home extent of the theme. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 5 themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined","title":"HomeButton"},{"location":"references/qwc2_plugins/#identify","text":"Displays queried feature attributes. Uses WMS GetFeatureInfo to query features and displays the result in table, as a HTML fragment or as plain text based on the supported GetFeatureInfo format. Extendable in combination with the qwc-feature-info-service , which provides support for customized queries and templates for the result presentation. Property Type Description Default value attributeCalculator func Optional function for computing derived attributes. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined attributeTransform func Optional function for transforming attribute values. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true customExporters array Optional list of custom exporters to offer along with the built-in exporters. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. [] displayResultTree bool Whether to display a tree overview of results (as opposed to a flat list of results). true enableAggregatedReports bool Whether to enable the aggregated report download button. true enableExport {bool, array} Whether to enable the export functionality. Either true|false or a list of single allowed formats (builtin formats: json , geojson , csv , csvzip ) true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined exportGeometry bool Whether to include the geometry in exported features. Default: true . true featureInfoReturnsLayerName bool Whether to assume that XML GetFeatureInfo responses specify the technical layer name in the name attribute, rather than the layer title. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } highlightAllResults bool Whether to highlight all results if no result is hovered true initialRadiusUnits string The initial radius units of the identify dialog in radius mode. One of 'm', 'ft', 'km', 'mi'. 'm' params object Extra params to append to the GetFeatureInfo request (i.e. FI_POINT_TOLERANCE , FI_LINE_TOLERANCE , feature_count , ...). Additionally, region_feature_count and radius_feature_count are supported. undefined replaceImageUrls bool Whether to replace an attribute value containing an URL to an image with an inline image. true showLayerSelector bool Whether to show a layer selector to filter the identify results by layer. true","title":"Identify"},{"location":"references/qwc2_plugins/#layercatalog","text":"Displays a pre-configured catalog of external layers in a window. Configured through a catalog JSON containing a tree of external layer identifiers. For wms layers, sublayers: false denotes that the sublayer structure of the added layer should not be exposed in the layer tree. Example: { \"catalog\": [ { \"title\": \"\u00d6ffentlicher Verkehr swissTLMRegio\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.vec200-transportation-oeffentliche-verkehr\", \"sublayers\": false }, { \"title\": \"Gew\u00e4sserschutz\", \"resource\": \"wms:https://geo.so.ch/api/wms#ch.so.afu.gewaesserschutz[50]\" }, { \"title\": \"Landeskarten\", \"sublayers\": [ { \"title\": \"Landeskarte 1:1 Million | LK1000\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk1000.noscale\" }, { \"title\": \"Landeskarte 1:100`000 | LK100\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk100.noscale\" } ] } ] } Property Type Description Default value catalogUrl string The URL to the catalog JSON file. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } levelBasedIndentSize bool Whether to increase the indent size dynamically according to the current level ( true ) or keep the indent size constant ( false ). true registerCatalogSearchProvider bool Whether to register a search provider which allows searching catalog layers through the global search field. true","title":"LayerCatalog"},{"location":"references/qwc2_plugins/#layertree","text":"Displays the map layer tree in a sidebar. The print legend functionality requires a template located by default at assets/templates/legendprint.html with containing a container element with id=legendcontainer. Property Type Description Default value addLayerSeparator func Whether to allow adding separator entries in the layer tree, useful for organizing the tree. undefined allowCompare bool Whether to enable the compare function. Requires the MapCompare plugin. true allowImport bool Whether to allow importing external layers. true allowMapTips bool Whether to allow enabling map tips. true allowSelectIdentifyableLayers bool Whether to allow selection of identifyable layers. The showQueryableIcon property should be true to be able to select identifyable layers. false bboxDependentLegend {bool, string} Whether to display a BBOX dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. false enableLegendPrint bool Whether to enable the legend print functionality. true enableServiceInfo bool Whether to display a service info button to display the WMS service metadata. true enableVisibleFilter bool Whether to display a button to filter invisible layers from the layertree. true extraLegendParameters string Additional parameters to pass to the GetLegendGraphics request. undefined fallbackDrag bool Whether to use the fallback logic for drag-and-drop. undefined flattenGroups bool Whether to display a flat layer tree, omitting any groups. false grayUnchecked bool Whether to display unchecked layers gray in the layertree. true groupTogglesSublayers bool Whether toggling a group also toggles all sublayers. false infoInSettings bool Whether to display the layer info button inside the layer settings menu rather than next to the layer title. true layerInfoGeometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default layer info window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 480, initialX: null, initialY: null, initiallyDocked: false } onlyGroups bool Whether to only display layer groups but not individual layers in layertree. false scaleDependentLegend {bool, string} Whether to display a scale dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. undefined showAttributeTableLink bool Whether to display an icon linking to the layer attribute table in the layer options menu. undefined showLegendIcons bool Whether to display legend icons. true showQueryableIcon bool Whether to display the queryable icon to indicate that a layer is identifyable. true showRootEntry bool Whether to display the root entry of the layertree. true showToggleAllLayersCheckbox bool Whether to display a checkbox to toggle all layers. true side string The side of the application on which to display the sidebar. 'right' templatePath string Template location for the legend print functionality \":/templates/legendprint.html\" width string The initial width of the layertree, as a CSS width string. \"25em\"","title":"LayerTree"},{"location":"references/qwc2_plugins/#locatebutton","text":"Map button for controling the locate (GPS) state. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 2 themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined","title":"LocateButton"},{"location":"references/qwc2_plugins/#map","text":"The main map component. Property Type Description Default value mapOptions { zoomDuration: number, enableRotation: bool, rotation: number, panStepSize: number, panPageSize: number, constrainExtent: bool, kineticPanParams: object, } Zoom duration in ms, rotation in degrees, panStepSize and panPageSize as fraction of map width/height. {} showLoading bool Whether to display the loading spinner when layers are loading. true swipeGeometryTypeBlacklist [string] A list of layer geometry types to ignore when determining the top-most layer to compare. [] swipeLayerNameBlacklist [string] A list of layer names to ignore when determining the top-most layer to compare. You can use * as a wildcard character. [] toolsOptions object Options to pass to the map support plugins, in the form {\"<Name>\": {<options>}} . Refer to the documentation of the Map support plugins for settable options. {}","title":"Map"},{"location":"references/qwc2_plugins/#mapcompare","text":"Allows comparing the top layer with the rest of the map. Activated through a checkbox in the LayerTree.","title":"MapCompare"},{"location":"references/qwc2_plugins/#mapcopyright","text":"Displays layer attributions in the bottom right corner of the map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined","title":"MapCopyright"},{"location":"references/qwc2_plugins/#mapexport","text":"Allows exporting a selected portion of the map to a variety of formats. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales {[number], bool} List of scales at which to export the map. If empty, scale can be freely specified. If false , the map can only be exported at the current scale. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale (if allowedScales is not false ). 1 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true fileNameTemplate string Template for the name of the generated files when downloading. Can contain the placeholders {username} , {tenant} , {theme} , {themeTitle} , {timestamp} . '{theme}_{timestamp}' forceAvailableFormats array Formats to force as available even if the map capabilities report otherwise. Useful if a serviceUrl is defined in a format configuration. undefined formatConfiguration { format: [{ name: string, labelMsgId: string, extraQuery: string, formatOptions: string, baseLayer: string, projections: array, serviceUrl: string, }], } Custom export configuration per format. If more than one configuration per format is provided, a selection combo will be displayed. labelMsgId is a translation string message id for the combo label. If not defined, name will be displayed. extraQuery will be appended to the query string (replacing any existing parameters). formatOptions will be passed as FORMAT_OPTIONS. baseLayer will be appended to the LAYERS instead of the background layer. projections is a list of export projections. If empty, the map projection is automatically used. serviceUrl is the address of a custom service to use instead of the layer OWS service url. undefined pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [] side string The side of the application on which to display the sidebar. 'right'","title":"MapExport"},{"location":"references/qwc2_plugins/#mapfilter","text":"Allows filtering the map content via QGIS Server WMS FILTER. See Map filtering . Property Type Description Default value allowCustomFilters bool Whether to allow custom filters. undefined allowFilterByGeom bool Whether to allow filter by geometry. Requires the filter_geom plugin from qwc-qgis-server-plugins, and the filter will only be applied to postgis layers. undefined allowFilterByTime bool Whether to display the temporal filter if temporal dimensions are found. true highlightStyle { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, } The style used for highlighting filter geometries. { strokeColor: [0, 0, 0], fillColor: [255, 255, 0, 0.25] } position number The position slot index of the map button, from the bottom (0: bottom slot). Set to -1 to hide the button. 5 side string The side of the application on which to display the sidebar. undefined","title":"MapFilter"},{"location":"references/qwc2_plugins/#mapinfotooltip","text":"Provides map context information when right-clicking on the map. Displays the coordinates at the picked position by default. If elevationServiceUrl in config.json to points to a qwc-elevation-service , or a custom elevation interface is exposed in window.QWC2ElevationInterface (see ElevationInterface.js ), the height at the picked position is also displayed. If mapInfoService in config.json points to a qwc-mapinfo-service , additional custom information according to the qwc-mapinfo-service configuration is returned. You can pass additional plugin components to the MapInfoTooltip in appConfig.js : MapInfoTooltipPlugin: MapInfoTooltipPlugin([FirstPlugin, SecondPlugin]) where a Plugin is a React component of the form class MapInfoTooltipPlugin extends React.Component { static propTypes = { point: PropTypes.object, closePopup: PropTypes.func } render() { return ...; } }; Property Type Description Default value elevationPrecision number The number of decimal places to display for elevation values. 0 plugins array Additional plugin components for the map info tooltip. []","title":"MapInfoTooltip"},{"location":"references/qwc2_plugins/#maplegend","text":"Displays the map legend in a floating dialog. The user can toggle whether to display only layers which are enabled, visible in the current extent and/or visible at the current scale. See https://docs.qgis.org/3.28/en/docs/server_manual/services/wms.html#wms-getlegendgraphic for supported extra legend params. Property Type Description Default value addGroupTitles bool Whether to add group titles to the legend. false addLayerTitles bool Whether to add layer titles to the legend. Note that often the legend image itself already contains the layer title. false bboxDependentLegend bool Whether to display a BBOX-dependent legend by default. false excludeLayers array List of layernames to exclude from the legend. [] extraLegendParameters string Extra parameters to add to the GetLegendGraphics request. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. A locked window is not closeable and not resizeable. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } lockedWindow bool Whether the legend window is locked (always visible, not moveable or closeable). Set position and size via geometry . undefined onlyVisibleLegend bool Whether to only include enabled layers in the legend by default. false scaleDependentLegend bool Whether to display a scale-dependent legend by default. false","title":"MapLegend"},{"location":"references/qwc2_plugins/#maptip","text":"Displays maptips by hovering over features on the map. Queries the map tips configured in the QGIS layer properites over GetFeatureInfo. The map tip needs to be configured in QGIS Layer Properties \u2192 Display. Property Type Description Default value layerFeatureCount number The maximum number of feature maptips to display for a single layer. 5 maxHeight string The maximum height of the maptip popop bubble, as a CSS string. \"15em\" maxWidth string The maximum height of the maptip popop bubble, as a CSS string. \"20em\" showFeatureSelection bool Whether to show the maptip feature selection on the map or not true","title":"MapTip"},{"location":"references/qwc2_plugins/#measure","text":"Allows measuring points/lines/areas on the map. Property Type Description Default value bearingHeadMarker string Head marker of bearing line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined bearingTailMarker string Tail marker of bearing line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined lineHeadMarker string Head marker of distance line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined lineTailMarker string Tail marker of distance line measurement geometry. Can be one of OUTARROW , INARROW , LINE . undefined showMeasureModeSwitcher bool Whether to show the widget to switch between measure modes. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true","title":"Measure"},{"location":"references/qwc2_plugins/#newspopup","text":"Displays a newsletter in a popup dialog. The popup won't be dispayed anymore, if the user chooses so, until a newer revision is published (specified via newsRev prop). Property Type Description Default value newsDocument string URL to the news HTML document to display in the popup. undefined newsRev string Revision of the document. undefined showInSidebar bool Whether to show the news in a sidebar instead of a popup. undefined side string The side of the application on which to display the sidebar. undefined sidebarWidth string The default width of the sidebar, as a CSS width string. undefined","title":"NewsPopup"},{"location":"references/qwc2_plugins/#overviewmap","text":"Overview map support for the map component. Property Type Description Default value options object See OpenLayers API doc for general options. Additionally, you can specify: - layer : Custom overview layer, in the same form as background layer definitions ( {type: \"<wms|wmts>\", \"url\": ...} ). - viewOptions : Options for the OverviewMap View, see OpenLayers API doc . {}","title":"OverviewMap"},{"location":"references/qwc2_plugins/#panoramax","text":"Panoramax Integration for QWC2. Property Type Description Default value loadSequencesTiles bool Whether or not to load the layer containing the image sequences. true panoramaxInstance string URL of the Panoramax instance. 'api.panoramax.xyz' tileMode string Mode for the image sequences layer: either WMS (Require a custom URL) or MVT(EPSG:3857 only). 'mvt' wmsUrl string URL of the WMS image sequences layer. undefined","title":"Panoramax"},{"location":"references/qwc2_plugins/#portal","text":"Displays a landing lage, consisting of a full-screen theme switcher and a configurable menu. Property Type Description Default value bottomBarLinks [{ href: string, label: string, labelmsgid: string, target: string, }] Links to show in the portal bottom bar undefined collapsibleGroups bool Whether to allow collapsing groups in the theme switcher. true logo string Name of a logo image below assets/img. undefined menuItems array Portal menu items, in the same format as the TopBar menu items. [] showMenuOnStartup bool Whether the menu should be visible on startup. undefined topBarText string Portal title text to show in the top bar. undefined","title":"Portal"},{"location":"references/qwc2_plugins/#print","text":"Invokes QGIS Server WMS GetPrint to print the map to PDF. Uses the print layouts defined in the QGIS project. Property Type Description Default value allowGeoPdfExport bool Whether to allow GeoPDF export. Requires QGIS Server 3.32 or newer. undefined defaultDpi number The default print dpi. 300 defaultScaleFactor number The factor to apply to the map scale to determine the initial print map scale. 0.5 displayPrintSeries bool Show an option to print a series of extents. false displayRotation bool Whether to display the printing rotation control. true fileNameTemplate string Template for the name of the generated files when downloading. Can contain the placeholders {layout} , {username} , {tenant} , {theme} , {themeTitle} , {timestamp} . '{theme}_{timestamp}' formats [string] Export layout format mimetypes. If format is not supported by QGIS Server, print will fail. ['application/pdf', 'image/jpeg', 'image/png', 'image/svg'] gridInitiallyEnabled bool Whether the grid is enabled by default. false hideAutopopulatedFields bool Whether to hide form fields which contain autopopulated values (i.e. search result label). undefined inlinePrintOutput bool Whether to display the print output in an inline dialog instead triggering a download. false layoutHidePrefix string Hide layouts which begin with this prefix. undefined layoutSortOrder string Layout sort order, asc or desc. 'asc' movePrintSeries bool Whether to allow moving the extent while selecting the print series. false printExternalLayers bool Whether to print external layers. Requires QGIS Server 3.x! true printMapHighlights bool Whether to print highlights on the map, e.g. selected features or redlining. true restrictToPrintScales bool Restrict print scale to list of predefine print scales, if any. undefined scaleFactor number Scale factor to apply to line widths, font sizes, ... of redlining drawings passed to GetPrint. 1.9 side string The side of the application on which to display the sidebar. 'right'","title":"Print"},{"location":"references/qwc2_plugins/#redlining","text":"Allows drawing figures and text labels on the map. Property Type Description Default value allowGeometryLabels bool Whether to allow labeling geometric figures. true defaultAreaUnit string Default area unit. Options: metric, imperial, sqm, ha, sqkm, sqft, acre, sqmi 'metric' defaultBorderColor array Default border color. In format [r, g, b, a]. [255, 0, 0, 1] defaultFillColor array Default fill color. In format [r, g, b, a]. [255, 255, 255, 1] defaultLengthUnit string Default length unit. Options: metric, imperial, m, km, ft, mi 'metric' defaultTextFillColor array Default text fill color. In format [r, g, b, a]. [0, 0, 0, 1] defaultTextOutlineColor array Default text outline color. In format [r, g, b, a]. [255, 255, 255, 1] hiddenTools array Tools to hide. Available tools: Circle, Ellipse, Square, Box, HandDrawing, Transform, NumericInput, Buffer, Export. [] predefinedBorderColors [array] Predefined border colors. In format [[r, g, b, a], ...]. undefined predefinedFillColors [array] Predefined fill colors. In format [[r, g, b, a], ...]. undefined snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true","title":"Redlining"},{"location":"references/qwc2_plugins/#reports","text":"Allow generating reports for selected features. This plugin displays all available reports for the current theme, allows selecting one or more or all features of the layer, and finally generating an aggregated report for all selected features. Requires documentServiceUrl in config.json to point to a qwc-document-service . Property Type Description Default value side string The side of the application on which to display the sidebar. undefined","title":"Reports"},{"location":"references/qwc2_plugins/#routing","text":"Compute routes and isochrones. Requires routingServiceUrl in config.json pointing to a Valhalla routing service. Property Type Description Default value enabledModes [string] List of enabled routing modes. [\"auto\", \"heavyvehicle\", \"transit\", \"bicycle\", \"pedestrian\"] enabledProviders [string] List of search providers to use for routing location search. [\"coordinates\", \"nominatim\"] geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: true, side: 'left' } showPinLabels bool Whether to label the routing waypoint pins with the route point number. true units object Set of units for isochrone time/distance intervals to use. { time: { min: 1, s: 60 }, distance: { km: 1, m: 1000 } } zoomAuto bool Automatically zoom to the extent of the route true","title":"Routing"},{"location":"references/qwc2_plugins/#scratchdrawing","text":"Task which which can be invoked by other tools to draw a geometry and pass it to a callback. Only useful for third-party code, i.e. over the JavaScript API. Invoke as setCurrentTask(\"ScratchDrawing\", null, null, {callback: <function(features, crs)>});","title":"ScratchDrawing"},{"location":"references/qwc2_plugins/#settings","text":"Settings panel. Allows configuring language and color scheme. Property Type Description Default value colorSchemes [{ title: string, titleMsgId: string, value: string, }] List of available color schemes. Value is the css class name, title/titleMsgId the display name. [] languages [{ title: string, titleMsgId: string, value: string, }] List of available languages. Value is the lang code, title/titleMsgId the display name. [] showDefaultThemeSelector bool Whether to show a selector to set the default theme/bookmark (of a logged in user). true side string The side of the application on which to display the sidebar. 'right'","title":"Settings"},{"location":"references/qwc2_plugins/#share","text":"Share the current map as a URL/permalink. Compact permalinks will be generated if permalinkServiceUrl in config.json points to a qwc-permalink-service . Property Type Description Default value restrictableGroups array List of groups for which a permalink may optionally be restricted (only displayed for a logged-in user). undefined showLink bool Show the map URL. true showQRCode bool Show the QR code of the map URL. true showSocials {bool, [string]} Show the social buttons. Either true or false to enable/disable all, or an array of specific buttons to display (possible choices: email , facebook , twitter , linkedin , whatsapp ). true side string The side of the application on which to display the sidebar. 'right'","title":"Share"},{"location":"references/qwc2_plugins/#startupmarker","text":"Displays a marker when starting up the viewer. The marked is displayed in the center of the map if c=<x>,<y>&hc=1 is set in the URL. Property Type Description Default value removeMode string When to remove the marker. Possible choices: onpan, onzoom, onclickonmarker. 'onpan'","title":"StartupMarker"},{"location":"references/qwc2_plugins/#taskbutton","text":"Generic map button to launch a task. Property Type Description Default value icon string The icon name. undefined mode string The task mode. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). 1 task string The task name. undefined themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined","title":"TaskButton"},{"location":"references/qwc2_plugins/#themeswitcher","text":"Theme switcher panel. Property Type Description Default value collapsibleGroups bool Whether to allow collapsing theme groups. undefined hideAddThemeButton bool Whether to hide the add theme button. Note: the button will also be hidden if the global option allowAddingOtherThemes is false . undefined hideAddThemeLayersButton bool Whether to hide the add theme layers button. Note: the button will also be hidden if the global option allowAddingOtherThemes is false . undefined showActiveTheme bool Whether to display the currently active theme below the application menu button. Default: false false showDefaultThemeSelector bool Whether to show an icon to select the default theme/bookmark (of a logged in user). true showLayerAfterChangeTheme bool Whether to show the LayerTree by default after switching the theme. false showThemeFilter bool Wether to show the theme filter field in the top bar. true side string The side of the application on which to display the sidebar. 'right' themeLayersListWindowSize { width: number, height: number, } The default window size for the theme layers dialog. {width: 400, height: 300} width string Default width as a CSS string. \"50%\"","title":"ThemeSwitcher"},{"location":"references/qwc2_plugins/#timemanager","text":"Allows controling the time dimension of temporal WMS layers. Property Type Description Default value cursorFormat string The format of the time cursor label. Either date , time or datetime . \"datetime\" dateFormat string The date format in the time controls, i.e. YYYY-MM-DD. \"YYYY-MM-DD[\\n]HH:mm:ss\" defaultAnimationInterval number The default interval for the temporal animation, in seconds. 1 defaultEnabled bool Default for TimeManager enabled when loading application. true or false false defaultFeatureCount number The default number of features that will be requested. 100 defaultStepSize number The default step size for the temporal animation, in step units. 1 defaultStepUnit string The default step unit for the temporal animation, one of ms , s , m , d , M , y , 10y , 100y \"d\" defaultTimelineDisplay string The default timeline display mode. One of hidden , minimal , features , layers . undefined defaultTimelineMode string The default timeline mode. One of fixed , infinite . \"fixed\" geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 800, initialHeight: 320, initiallyDocked: true } markerConfiguration { markersAvailable: bool, gradient: [string], markerOffset: array, markerPins: bool, } The feature marker configuration. { markersAvailable: true, gradient: [\"#f7af7d\", \"#eacc6e\", \"#fef89a\", \"#c5e09b\", \"#a3d29c\", \"#7cc096\", \"#79c8c5\", \"#34afce\"], markerOffset: [0, 0], markerPins: true } stepUnits [string] The available temporal animation step units. [\"s\", \"m\", \"h\", \"d\", \"M\", \"y\"]","title":"TimeManager"},{"location":"references/qwc2_plugins/#topbar","text":"Top bar, containing the logo, searchbar, task buttons and app menu. Property Type Description Default value appMenuClearsTask bool Whether opening the app menu clears the active task. undefined appMenuCompact bool Whether show an appMenu compact (menu visible on icons hover) - Only available for desktop client. undefined appMenuFilterField bool Whether to display the filter field in the app menu. undefined appMenuHidden bool Whether to hide the app menu (useful primarely as a theme specific setting). undefined appMenuShortcut string The shortcut for tiggering the app menu, i.e. alt+shift+m. undefined appMenuVisibleOnStartup bool Whether to open the app menu on application startup. undefined logoFormat string The logo file format. \"svg\" logoSrc string The logo image URL if a different source than the default assets/img/logo.<ext> and assets/img/logo-mobile.<ext> is desired. undefined logoUrl string The hyperlink to open when the logo is clicked. undefined menuItems array The menu items. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] registerTaskSearchProvider bool Whether to register a search provider which allows searching menu tasks through the global search field. undefined searchOptions { allowSearchFilters: bool, hideResultLabels: bool, highlightStyle: { strokeColor: array, strokeWidth: number, strokeDash: array, fillColor: array, }, minScaleDenom: number, resultLimit: number, sectionsDefaultCollapsed: bool, showHighlightMarker: bool, showLayerAfterChangeTheme: bool, showLayerResultsBeforePlaces: bool, showResultInSearchText: bool, zoomToLayers: bool, } Options passed down to the search component. { showHighlightMarker: true, showResultInSearchText: true, minScaleDenom: 1000 } toolbarItems array The toolbar. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] toolbarItemsShortcutPrefix string The keyboard shortcut prefix for triggering toolbar tasks. I.e. alt+shift. The task are then triggered by +{1,2,3,...} for the 1st, 2nd, 3rd... toolbar icon. undefined","title":"TopBar"},{"location":"references/qwc2_plugins/#tourguide","text":"Launches a tour guide of the application, as configured by a configuration file. Property Type Description Default value tourGuideUrl string Url of the Tourguide JSON configuration. undefined","title":"TourGuide"},{"location":"references/qwc2_plugins/#valuetool","text":"Displays raster band values of active raster layers at the hovered mouse position, queried via GetFeatureInfo. Property Type Description Default value enabled bool The number of decimal places to display for elevation values. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' }","title":"ValueTool"},{"location":"references/qwc2_plugins/#view3d","text":"Displays a 3D map view. See 3D View . Property Type Description Default value buttonPosition number The position slot index of the 3d switch map button, from the bottom (0: bottom slot). 6 controlsPosition string The position of the navigation controls. Either top or bottom . 'top' defaultSceneQuality number The default scene quality factor ( 20 : min, 100 : max). undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry. { initialWidth: 600, initialHeight: 800, initialX: 0, initialY: 0, initiallyDocked: true } mouseButtons { left: string, middle: string, right: string, } Mouse buttons assignment. You can assign pan , rotate , zoom to each button. { left: 'pan', middle: 'zoom', right: 'rotate' } pluginOptions object Options to pass to the 3D plugins, in the form {\"<PluginName>\": {<options>}} . Refer to the documentation of the 3D plugins for settable options. {}","title":"View3D"},{"location":"references/qwc2_plugins/#zoombutton","text":"Map button for zooming the map. Two specific plugins exist: ZoomInPlugin and ZoomOutPlugin, which are instances of ZoomButton for the respective zoom directions. Property Type Description Default value enableZoomByBoxSelection bool Enable zoom in or out by box selection. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). undefined themeFlagBlacklist [string] Omit the button in themes matching one of these flags. undefined themeFlagWhitelist [string] Only show the button in themes matching one of these flags. undefined","title":"ZoomButton"},{"location":"references/qwc2_plugins/#map-support-plugins","text":"These plugins must be listed as children of the Map plugin. EditingSupport Editing support for the map component.","title":"Map support plugins"},{"location":"references/qwc2_plugins/#locatesupport","text":"GPS locate support for the map component. Property Type Description Default value drawCircle bool Whether to draw an accuracy circle around the location point. true metric bool Whether to display the accuracy in meters ( true ) or in feet ( false ). true showPopup bool Whether to show a popup displaying accuracy information when clicking on the location point. false startupMode string The geolocation startup mode. Either DISABLED , ENABLED or FOLLOWING . \"DISABLED\" stopFollowingOnDrag bool Whether to stop following when the map is dragged. false trackingOptions object Tracking options, as documented in the HTML5 Geolocation spec { maximumAge: 2000, enableHighAccuracy: true, timeout: 10000 }","title":"LocateSupport"},{"location":"references/qwc2_plugins/#measurementsupport","text":"Measurement support for the map component.","title":"MeasurementSupport"},{"location":"references/qwc2_plugins/#redliningsupport","text":"Redlining support for the map component.","title":"RedliningSupport"},{"location":"references/qwc2_plugins/#snappingsupport","text":"Snapping support for the map component.","title":"SnappingSupport"},{"location":"references/qwc2_plugins/#3d-plugins","text":"These plugins must be listed as children of the View3D plugin. BackgroundSwitcher3D Map button for switching the background layer of the 3D map.","title":"3D Plugins"},{"location":"references/qwc2_plugins/#bottombar3d","text":"Bottom bar of the 3D map, displaying coordinates, projection, etc.","title":"BottomBar3D"},{"location":"references/qwc2_plugins/#compare3d","text":"Split-screen and compare objects in the 3D map.","title":"Compare3D"},{"location":"references/qwc2_plugins/#draw3d","text":"Draw objects in the 3D map.","title":"Draw3D"},{"location":"references/qwc2_plugins/#exportobjects3d","text":"Export objects from the 3D map.","title":"ExportObjects3D"},{"location":"references/qwc2_plugins/#hideobjects3d","text":"Hide objects in the 3D map.","title":"HideObjects3D"},{"location":"references/qwc2_plugins/#identify3d","text":"Query attributes of objects in the 3D map. Property Type Description Default value geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, side: string, } Default window geometry with size, position and docking status. Positive position values (including '0') are related to top (InitialY) and left (InitialX), negative values (including '-0') to bottom (InitialY) and right (InitialX). { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false, side: 'left' } tileInfoServiceUrl string URL to service for querying additional tile information. Can contain the {tileset} and {objectid} placeholders. Expected to return a JSON dict with attributes. undefined","title":"Identify3D"},{"location":"references/qwc2_plugins/#layertree3d","text":"Layer and object tree for the 3D map Property Type Description Default value importedTilesBaseUrl string Base URL of imported tile sets. ':/'","title":"LayerTree3D"},{"location":"references/qwc2_plugins/#mapcopyright3d","text":"Displays layer attributions in the bottom right corner of the 3D map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined","title":"MapCopyright3D"},{"location":"references/qwc2_plugins/#mapexport3d","text":"Export the 3D map image to raster formats.","title":"MapExport3D"},{"location":"references/qwc2_plugins/#measure3d","text":"Measure in the 3D map.","title":"Measure3D"},{"location":"references/qwc2_plugins/#overviewmap3d","text":"Overview map for the 3D map.","title":"OverviewMap3D"},{"location":"references/qwc2_plugins/#settings3d","text":"Settings panel for the 3D map.","title":"Settings3D"},{"location":"references/qwc2_plugins/#topbar3d","text":"Bottom bar of the 3D map, including the search bar, tool bar and menu. Property Type Description Default value menuItems array The menu items, in the same format as the 2D TopBar menu items. You can include entries for the View3D plugins. You can also include entries for 2D plugins which are compatible with the 3D view (i.e. ThemeSwitcher , Share , etc.), these will be displayed only in fullsceen 3D mode. undefined searchOptions { minScaleDenom: number, } Options passed down to the search component. { minScaleDenom: 1000 } toolbarItems array The toolbar, in the same format as the 2D TopBar toolbar items. You can include entries for the View3D plugins. You can also include entries for 2D plugins which are compatible with the 3D view (i.e. ThemeSwitcher , Share , etc.), these will be displayed only in fullsceen 3D mode. undefined","title":"TopBar3D"},{"location":"release_notes/ChangeLog/","text":"ChangeLog \u00b6 This file lists the most important changes in QWC and qwc-services between LTS releases. 2024-lts \u2192 2025-lts \u00b6 Upgrade notes \u00b6 When upgrading from a 2025-lts setup, please note the entries marked with [2024-lts \u2192 2025-lts] in the upgrade notes: QWC upgrade notes qwc-docker upgrade notes Viewer Configuration \u00b6 Config: Allow overriding plugin config per theme Allow adding custom plugins via QWC API Allow registering identify exporters and attribute calculators via QWC2 API General \u00b6 Allow detaching QWC dialogs (i.e. Attribute Table) to separate browser windows Allow specifying OverviewMap layer independent from current background layer Editing / AttributeForm / AttributeTable \u00b6 Honour expressions in QGIS Attributes Form configuration for group box visibility, default value and value-relation filter as defined (currently limited grammar ) Allow limiting Attibute Table to current map extent Add CSV export to Attribute Table Highlight hovered / filtered features in Attribute Table Redlining \u00b6 Add support for rotating labels Allow configuring available tools / default color / unit length Add CTRL / SHIFT support to transform tool to scale objects from corner / preserving aspect ratio Measure \u00b6 Show measurement labels in map of height profile print output Print \u00b6 Reworked plugin with new series print mode Layer tree \u00b6 Allow importing (zipped) Shapefiles Add option to only show groups Add option to show a link to the Attribute Table of a layer Identify \u00b6 Show layer selection and feature count New plugins \u00b6 Portal MapFilter GeometryDigitizer Reports (see also Reports ) CookiePopup QWC services \u00b6 Make qwc_config schema name configurable Config Generator \u00b6 Create theme groups for subdirs below scan dir Add option to save scanned projects and groups in themes configuration Handle template themesConfig section in tenantConfig template Allow setting generate_nested_nrel_forms per dataset in the theme item editConfig Admin GUI \u00b6 Allow generating configuration using cached project capabilities Allow generating configuation forcing read-only dataset permissions Allow querying QGIS Server logs Add NewsPopup plugin DB Auth \u00b6 Allow configuring post_param_login , max_login_attempts , totp_enabled , totp_issuer_name in service config Display account locked status to user Reword reset password to password change, also allow unlocking account Introduce totp_enabled_for_admin config option Implement IP blacklisting Add force_password_change_first_login config setting Data service \u00b6 Add recaptcha support for public editing Introduce separate create_user_field and create_timestamp_field for logging record creations Honour data source filter as set in the QGIS layer properties Document service \u00b6 Rewrite, drops the requirement on a separate jasper-reporting-service , see Reports Feature info service \u00b6 Support authentication via basic auth Add support for text/plain , text/html and application/json info formats Add support for specifying custom templates by placing a file in info_templates_path Fulltext search service \u00b6 Add trigram search backend Legend service \u00b6 Support authentication via basic auth Mapinfo service \u00b6 Support returning multiple values from SQL query to info_title OGC service \u00b6 Add support for WFS 1.1.0 Full changelogs \u00b6 QWC qwc-admin-gui qwc-base-db qwc-config-generator qwc-data-service qwc-db-auth qwc-document-service qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-fulltext-search-service qwc-ldap-auth qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-print-service qwc-registration-gui qwc-wms-proxy jasper-reporting-service 2023-lts \u2192 2024-lts \u00b6 Upgrade notes \u00b6 When upgrading from a 2023-lts setup, please note the entries marked with [2023-lts \u2192 2024-lts] in the upgrade notes: QWC upgrade notes qwc-docker upgrade notes General \u00b6 Support common plugin configuration applied to both mobile and desktop Support resource syntax in background layer definitions Support per-theme startupTask Support spearate mobile/desktop sections for toplevel config properties Add support for tenantConfig templates Add config option for redirect to login if requesting a restricted theme Add support for configuring projects stored in database Add support for qgz projects Editing \u00b6 Display clickable links in editable text fields Allow generating nested 1:N relation forms (see generate_nested_nrel_forms ) Joined fields as configured in QGIS the project are now handled by the qwc-data-service FeatureInfo \u00b6 Allow specifying a info template path rather than requiring to specify the template inline HeightProfile \u00b6 Allow printing height profile LayerTree \u00b6 Allow importing GeoPDF files Allow zooming to layer groups Allow setting group transparency Add support for switching WMS layer styles Map \u00b6 Show a warning when attempting to load a non-existent theme, theme layer or background layer Allow individually controlling snapping to vertex/edge Snap to all vector layers: Redlining, GeoJSON, KML, WFS (see also wfs_max_scale ) Support external MVT layers Print \u00b6 Add support for atlas printing Add GeoPDF support Support layer resource URIs as printLayer (i.e. wms:https://wms.geo.admin.ch#ch.are.bauzonen ) Improved print label configuration in printLabelConfig Add support for print layout templates Redlining \u00b6 Add redlining support for squares, rectangles, ellipses and transform tool to scale/rotate Allow displaying measurements while drawing Add numeric input widget Support line end arrow heads Add GeoJSON/KML export Search \u00b6 New QGIS feature search provider Theme layer search (see searchThemeLayers ) Provider/geometry filtering to search box Allow configuring search highlight style (see searchOptions.highlightStyle ) Settings \u00b6 Allow setting default startup theme/bookmark for logged in user Share \u00b6 Permalink expiry date (see default_expiry_period ) Allow copying QR code to clipboards on supported browsers New plugins \u00b6 Cyclomedia QGIS FeatureSearch MapExport (replacement for RasterExport and DxfExport ) MapLegend NewsPopup Routing Full changelogs \u00b6 QWC qwc-admin-gui qwc-base-db qwc-config-generator qwc-data-service qwc-db-auth qwc-document-service qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-fulltext-search-service qwc-ldap-auth qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-print-service qwc-registration-gui qwc-wms-proxy jasper-reporting-service","title":"ChangeLog"},{"location":"release_notes/ChangeLog/#changelog","text":"This file lists the most important changes in QWC and qwc-services between LTS releases.","title":"ChangeLog"},{"location":"release_notes/ChangeLog/#2024-lts-2025-lts","text":"","title":"2024-lts &rarr; 2025-lts"},{"location":"release_notes/ChangeLog/#upgrade-notes","text":"When upgrading from a 2025-lts setup, please note the entries marked with [2024-lts \u2192 2025-lts] in the upgrade notes: QWC upgrade notes qwc-docker upgrade notes","title":"Upgrade notes"},{"location":"release_notes/ChangeLog/#viewer-configuration","text":"Config: Allow overriding plugin config per theme Allow adding custom plugins via QWC API Allow registering identify exporters and attribute calculators via QWC2 API","title":"Viewer Configuration"},{"location":"release_notes/ChangeLog/#general","text":"Allow detaching QWC dialogs (i.e. Attribute Table) to separate browser windows Allow specifying OverviewMap layer independent from current background layer","title":"General"},{"location":"release_notes/ChangeLog/#editing-attributeform-attributetable","text":"Honour expressions in QGIS Attributes Form configuration for group box visibility, default value and value-relation filter as defined (currently limited grammar ) Allow limiting Attibute Table to current map extent Add CSV export to Attribute Table Highlight hovered / filtered features in Attribute Table","title":"Editing / AttributeForm / AttributeTable"},{"location":"release_notes/ChangeLog/#redlining","text":"Add support for rotating labels Allow configuring available tools / default color / unit length Add CTRL / SHIFT support to transform tool to scale objects from corner / preserving aspect ratio","title":"Redlining"},{"location":"release_notes/ChangeLog/#measure","text":"Show measurement labels in map of height profile print output","title":"Measure"},{"location":"release_notes/ChangeLog/#print","text":"Reworked plugin with new series print mode","title":"Print"},{"location":"release_notes/ChangeLog/#layer-tree","text":"Allow importing (zipped) Shapefiles Add option to only show groups Add option to show a link to the Attribute Table of a layer","title":"Layer tree"},{"location":"release_notes/ChangeLog/#identify","text":"Show layer selection and feature count","title":"Identify"},{"location":"release_notes/ChangeLog/#new-plugins","text":"Portal MapFilter GeometryDigitizer Reports (see also Reports ) CookiePopup","title":"New plugins"},{"location":"release_notes/ChangeLog/#qwc-services","text":"Make qwc_config schema name configurable","title":"QWC services"},{"location":"release_notes/ChangeLog/#config-generator","text":"Create theme groups for subdirs below scan dir Add option to save scanned projects and groups in themes configuration Handle template themesConfig section in tenantConfig template Allow setting generate_nested_nrel_forms per dataset in the theme item editConfig","title":"Config Generator"},{"location":"release_notes/ChangeLog/#admin-gui","text":"Allow generating configuration using cached project capabilities Allow generating configuation forcing read-only dataset permissions Allow querying QGIS Server logs Add NewsPopup plugin","title":"Admin GUI"},{"location":"release_notes/ChangeLog/#db-auth","text":"Allow configuring post_param_login , max_login_attempts , totp_enabled , totp_issuer_name in service config Display account locked status to user Reword reset password to password change, also allow unlocking account Introduce totp_enabled_for_admin config option Implement IP blacklisting Add force_password_change_first_login config setting","title":"DB Auth"},{"location":"release_notes/ChangeLog/#data-service","text":"Add recaptcha support for public editing Introduce separate create_user_field and create_timestamp_field for logging record creations Honour data source filter as set in the QGIS layer properties","title":"Data service"},{"location":"release_notes/ChangeLog/#document-service","text":"Rewrite, drops the requirement on a separate jasper-reporting-service , see Reports","title":"Document service"},{"location":"release_notes/ChangeLog/#feature-info-service","text":"Support authentication via basic auth Add support for text/plain , text/html and application/json info formats Add support for specifying custom templates by placing a file in info_templates_path","title":"Feature info service"},{"location":"release_notes/ChangeLog/#fulltext-search-service","text":"Add trigram search backend","title":"Fulltext search service"},{"location":"release_notes/ChangeLog/#legend-service","text":"Support authentication via basic auth","title":"Legend service"},{"location":"release_notes/ChangeLog/#mapinfo-service","text":"Support returning multiple values from SQL query to info_title","title":"Mapinfo service"},{"location":"release_notes/ChangeLog/#ogc-service","text":"Add support for WFS 1.1.0","title":"OGC service"},{"location":"release_notes/ChangeLog/#full-changelogs","text":"QWC qwc-admin-gui qwc-base-db qwc-config-generator qwc-data-service qwc-db-auth qwc-document-service qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-fulltext-search-service qwc-ldap-auth qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-print-service qwc-registration-gui qwc-wms-proxy jasper-reporting-service","title":"Full changelogs"},{"location":"release_notes/ChangeLog/#2023-lts-2024-lts","text":"","title":"2023-lts &rarr; 2024-lts"},{"location":"release_notes/ChangeLog/#upgrade-notes_1","text":"When upgrading from a 2023-lts setup, please note the entries marked with [2023-lts \u2192 2024-lts] in the upgrade notes: QWC upgrade notes qwc-docker upgrade notes","title":"Upgrade notes"},{"location":"release_notes/ChangeLog/#general_1","text":"Support common plugin configuration applied to both mobile and desktop Support resource syntax in background layer definitions Support per-theme startupTask Support spearate mobile/desktop sections for toplevel config properties Add support for tenantConfig templates Add config option for redirect to login if requesting a restricted theme Add support for configuring projects stored in database Add support for qgz projects","title":"General"},{"location":"release_notes/ChangeLog/#editing","text":"Display clickable links in editable text fields Allow generating nested 1:N relation forms (see generate_nested_nrel_forms ) Joined fields as configured in QGIS the project are now handled by the qwc-data-service","title":"Editing"},{"location":"release_notes/ChangeLog/#featureinfo","text":"Allow specifying a info template path rather than requiring to specify the template inline","title":"FeatureInfo"},{"location":"release_notes/ChangeLog/#heightprofile","text":"Allow printing height profile","title":"HeightProfile"},{"location":"release_notes/ChangeLog/#layertree","text":"Allow importing GeoPDF files Allow zooming to layer groups Allow setting group transparency Add support for switching WMS layer styles","title":"LayerTree"},{"location":"release_notes/ChangeLog/#map","text":"Show a warning when attempting to load a non-existent theme, theme layer or background layer Allow individually controlling snapping to vertex/edge Snap to all vector layers: Redlining, GeoJSON, KML, WFS (see also wfs_max_scale ) Support external MVT layers","title":"Map"},{"location":"release_notes/ChangeLog/#print_1","text":"Add support for atlas printing Add GeoPDF support Support layer resource URIs as printLayer (i.e. wms:https://wms.geo.admin.ch#ch.are.bauzonen ) Improved print label configuration in printLabelConfig Add support for print layout templates","title":"Print"},{"location":"release_notes/ChangeLog/#redlining_1","text":"Add redlining support for squares, rectangles, ellipses and transform tool to scale/rotate Allow displaying measurements while drawing Add numeric input widget Support line end arrow heads Add GeoJSON/KML export","title":"Redlining"},{"location":"release_notes/ChangeLog/#search","text":"New QGIS feature search provider Theme layer search (see searchThemeLayers ) Provider/geometry filtering to search box Allow configuring search highlight style (see searchOptions.highlightStyle )","title":"Search"},{"location":"release_notes/ChangeLog/#settings","text":"Allow setting default startup theme/bookmark for logged in user","title":"Settings"},{"location":"release_notes/ChangeLog/#share","text":"Permalink expiry date (see default_expiry_period ) Allow copying QR code to clipboards on supported browsers","title":"Share"},{"location":"release_notes/ChangeLog/#new-plugins_1","text":"Cyclomedia QGIS FeatureSearch MapExport (replacement for RasterExport and DxfExport ) MapLegend NewsPopup Routing","title":"New plugins"},{"location":"release_notes/ChangeLog/#full-changelogs_1","text":"QWC qwc-admin-gui qwc-base-db qwc-config-generator qwc-data-service qwc-db-auth qwc-document-service qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-fulltext-search-service qwc-ldap-auth qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-print-service qwc-registration-gui qwc-wms-proxy jasper-reporting-service","title":"Full changelogs"},{"location":"release_notes/QWC2UpgradeNotes/","text":"Upgrade notes \u00b6 This document describes configuration and code incompatibilites, as well as other aspects, which need to addressed when updating to a new version of the QWC viewer. Update to qwc2 2025.8.20 \u00b6 Changes to the View3D plugin setup The child components of the 3D view are now loaded as plugins: If you are building a custom viewer, you need to adapt the appConfig.js to pass the desired list of plugins to the View3D plugin entry as illustrated in the stock appConfig.js . NOTE : Use lazy to delay-load the plugin only when the 3D view is actually started. The View3D plugin configuration in config.json needs to be adapted to include desired plugin options, see the stock config.json . In particular the menuItems and toolbarItems can and must now be explicitly specified in the TopBar3D plugin options. Update to qwc2 2025.7.22 \u00b6 Changes to EditingInterface Note : This change is only relevant if you use a custom EditingInterface or have custom plugins which interact with the EditingInterface . To add support for virtual fields, the signature of most EditingInterface functions was changed, see EditingInterface.js for the new interface. Update to qwc2 2025.7.1 \u00b6 ProcessNotifications moved to a built-in component The ProcessNotifications has been moved from a plugin to a build-in component. If you are using a custom viewer build, modify your appConfig.js as follows . Also, remove the ProcessNotifications plugin config entry from config.json . Update to qwc2 2025.6.25 \u00b6 OverviewMap moved to dedicated plugin The OverviewSupport has been moved from a map support tool to a dedicated OverviewMap plugin. Make sure you register it in config.json as follows . If you are using a custom viewer build, modify your appConfig.js as follows . Scalebar integrated into BottomBar The ScalebarSupport map plugin as been removed and integrated directly into the BottomBar . You can choose whether to display a scale bar by setting the displayScalebar option in the BottomBar config section in config.json (default is true ). If you are using a custom viewer build, modify your appConfig.js as follows . Map margin handling (only custom plugin code) If you have custom plugins which honoured state.windows.mapMargins for placement within the visible map area, it is recommended to render them within the MapContainer element using a portal instead. See this example . Update to qwc2 2025.6.10 \u00b6 Note : This change is only relevant for custom viewer builds. The language detection mechanism has been improved, please apply the following change to your webpack.config.js . Update to qwc2 2025.5.21 \u00b6 Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The changeLayerProperty action now takes the layer id . The uuid field of the layer entry has been removed. Update to qwc2 2025.4.3 \u00b6 Switch to npm package The QWC stock viewer components are now published as an NPM package . If you are building a custom viewer on top of the QWC stock components, it is recommended you pull it in as a dependency in package.json rather than as a git submodule. To this end: Delete the submodule and adjust the package.json by removing the qwc2 workspace and adding the qwc2 dependency, see package.json . Modify the webpack.config.js as follows - new webpack.NormalModuleReplacementPlugin(/openlayers$/, path.join(__dirname, \"qwc2\", \"libs\", \"openlayers\")), + new webpack.NormalModuleReplacementPlugin(/openlayers$/, path.join(__dirname, \"node_modules\", \"qwc2\", \"libs\", \"openlayers\")), No further code changes are necessary. Update to qwc2 submodule revision 574fe2a (06.02.2025) \u00b6 Authentication plugin changes The LoginUser plugin has been merged into the Authentication plugin, display of the login user can be enabled via the showLoginUser config prop: { \"name\": \"Authentication\", \"cfg\": { \"showLoginUser\": true } } The task ids of the Authentication plugins have been changed from previously Login / Logout to Authentication with modes Login / Logout . Consequently, the menu- and toolbar item entries need to be changed as follows - {\"key\": \"Login\", \"icon\": \"login\"} + {\"key\": \"Authentication\", \"mode\": \"Login\", \"icon\": \"login\"} Update to qwc2 submodule revision 5705361 (30.12.2024) [2024-lts \u2192 2025-lts] \u00b6 Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The browser actions/reducer have been removed. To determine whether the application is running on a mobile device, use ConfigUtils.isMobile() . Update to qwc2 submodule revision 52fe6ab (11.12.2024) [2024-lts \u2192 2025-lts] \u00b6 CRS precision You can now globally specify the desired ordinate display precision (number of decimals) for a CRS in config.json \u2192 precision , i.e.: { \"code\": \"EPSG:2056\", \"proj\": \"+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs\", \"label\": \"CH1903+ / LV95\", \"precision\": 2 } Consequently, the cooPrecision and degreeCooPrecision config props of the MapInfoToolTip plugin have been removed. Update to qwc2 submodule revision e39dbde (26.11.2024) [2024-lts \u2192 2025-lts] \u00b6 Search providers rework The search providers from qwc2-demo-app/js/searchProviders.js have been moved to the core in qwc2/utils/SearchProviders.js . To define custom search providers, expose them in window.QWC2SearchProviders , see Search . The SearchBox and Routing plugins don't take a SearchProviders object anymore, they are internally collected from the core providers and from window.QWC2SearchProviders . Consequently, modify your js/appConfig.js as follows: - RoutingPlugin: RoutingPlugin(SearchProviders), + RoutingPlugin: RoutingPlugin, ... TopBarPlugin: TopBarPlugin({ - Search: SearchBox(SearchProviders), + Search: SearchBox, The format of the results returned by a Search Provider needs to be slightly updated to specify the result item type in the result group instead of the result item, see Search : results = [ { id: \"<categoryid>\", ... type: SearchResultType.{PLACE|THEMELAYER}, // NEW items: [ { id: \"<item_id>\", type: SearchResultType.{PLACE|THEMELAYER}, // OLD, remove this ... } ] } The configuration format of the fulltext search provider has also changed, to align it with the configuration format of other providers. Old: { \"provider\":\"solr\", // or \"provider\":\"fulltext\" \"default\": [\"<facet>\", \"<facet>\", ...], \"layers\": {\"<layername>\": \"<facet>\", ...} } New: { \"provider\":\"fulltext\", \"params\": { \"default\": [\"<facet>\", \"<facet>\", ...], \"layers\": {\"<layername>\": \"<facet>\", ...} } } Also, the legacy key field in non-fulltext search provider configurations has been replaced with provider : Old: { \"key\":\"<providerkey>\", \"params\": {...} } New: { \"provider\":\"<providerkey>\", \"params\": {...} } Update to qwc2 submodule revision bafb882 (20.11.2024) [2024-lts \u2192 2025-lts] \u00b6 Removal of RasterExport and DxfExport plugins The previously deprecated RasterExport and DxfExport plugins have been removed. Use MapExport instead. Update to qwc2 submodule revision 9cb8bab (13.11.2024) [2024-lts \u2192 2025-lts] \u00b6 Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The InputContainer component has been moved to qwc2/components/widgets/ . The ModalDialog component has been moved to qwc2/components/widgets/ . The PopupMenu component has been moved to qwc2/components/widgets/ . The ReCaptchaWidget component has been moved to qwc2/components/widgets/ . The Spinner component has been moved to qwc2/components/widgets/ . The ButtonBar label and tooltip props now expect a translated string is passed, not a msgid. The ResizeableWindow title prop now expects a translated string, not a msgid. The extraControls entries of the ResizeableWindow are expected to contain a translated title instead of a msgid . The SideBar title prop now expects a translated string, not a msgid. Update to qwc2 submodule revision bb6f31c (24.10.2024) [2024-lts \u2192 2025-lts] \u00b6 Setting name change The toplevel config.json setting featureReportService has been renamed to documentServiceUrl . Update to qwc2 submodule revision 3e1763a (15.05.2024) [2024-lts \u2192 2025-lts] \u00b6 Changes to default EditingInterface and qwc-data-service The qwc-data-service and the default EditingInterface client editing interface have been adapted to support ReCAPTCHA verification. Consequently, if editing is used, the qwc submodule will need to be updated in parallel with the qwc-data-service . Update to qwc2 submodule revision c7610eb (22.02.2024) [2024-lts \u2192 2025-lts] \u00b6 Removal of SelectionSupport The SelectionSupport map plugin has been removed, the respective imports and references need to be removed from js/appConfig.js . For custom plugins relying on SelectionSupport , use the new MapSelection component instead. Look at the SearchBox and Identify plugins for some examples. Update to qwc2 submodule revision d04e5fd (01.02.2024) [2024-lts \u2192 2025-lts] \u00b6 Setting name change The previously incorrectly named HeightProfile setting heighProfilePrecision has been renamed to heightProfilePrecision . Update to qwc2 submodule revision 38b242a (01.11.2023) [2023-lts \u2192 2024-lts] \u00b6 Import svg as inline assets qwc2/utils/FeatureStyles.js now imports some SVG files as inline assets. For this to work, you need to list .svg in the assets/inline loader rules in webpack.config.js : { test: /(.woff|.woff2|.png|.jpg|.gif|.svg)/, type: 'asset/inline' } Babel plugin changes The class-properties and object-rest-spread proposals have been merged to the ECMAScript standard, and the respective babel plugins in .babelrc.json need to be changed to \"plugins\": [ \"@babel/plugin-transform-class-properties\", \"@babel/plugin-transform-object-rest-spread\" ] Update to qwc2 submodule revision 7409372 (23.08.2023) [2023-lts \u2192 2024-lts] \u00b6 MapInfoToolTip plugin instantation change The instantation of the MapInfoToolTip in appConfig.js needs to be changed to MapInfoTooltipPlugin: MapInfoTooltipPlugin() Note the extra braces at the end. As a new feature, you can pass a list of plugins to the MapInfoTooltipPlugin . Configuration changes The window size configuration of various plugins has been uniformized to the geometry config prop (rather than occasionally windowSize before). Affected plugins are: FeatureForm , Identify , LayerCatalog , LayerTree , MapLegend . Please check the respective plugin reference for more details on the new format. Update to qwc2 submodule revision 96aaa51 (09.02.2023) [2023-lts \u2192 2024-lts] \u00b6 Config setting change Geodesic measurement mode is now configured at toplevel in config.json via geodesicMeasurements: true|false rather than below Map -> cfg -> toolsOptions -> MeasurementSupport . Update to qwc2 submodule revision 2c179d0 (23.01.2023) [2023-lts \u2192 2024-lts] \u00b6 Dependency update Most dependencies have been updated to the latest version. The following adjustments need to be performed by hand: Use createRoot in app.jsx , see the demo app.jsx . Update uuid imports in external components, examples: import {v1 as uuidv1} from 'uuid'; import {v4 as uuidv4} from 'uuid'; and then instead of uuid.v1() use uuidv1() etc. Adjust webpack.config.js from { test: /\\.mjs$/, type: 'javascript/auto' } to { test: /(.mjs|.js)$/, type: 'javascript/auto' } Update to qwc2 submodule revision fe063b6 (13.01.2023) \u00b6 Reworked search provider support The arguments and expected behaviour of the provider onSearch and getResultGeometry have changed. Please refer to the documentation chapter in the Documentation . Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples. It is now possible to define search providers in a external JS file loaded at runtime rather than compiled into the application bundle. See static/assets/searchProviders.js , which is loaded by index.html . js/SearchProviders.js now only includes coordinates and nominatim as built-in search providers for the demo application. The searchProviderFactory function has been removed from js/SearchProviders.js . Instead, custom parameters to be passed to a provider can be specified directly in the theme item searchProviders entry: { key: \"<providerkey2>\", params: {...} } and read from searchParams.cfgParams in the provider onSearch function. Load Help dialog contents from HTML fragment Instead of requiring users to implement the renderHelp function in js/Help.jsx , for simple cases the users can provide a plain HTML fragment which is loaded at runtime from the assets. Consult the Documentation . Update to qwc2 submodule revision 90c613a (28.11.2022) \u00b6 Reworked color scheme support The styleConfig.js file is deprecated and won't be honoured anymore for the styling of core QWC2 components. Instead, base theme colors can be defined via CSS, refer to documentation for details. Renamed config variable The maxGetUrlLength variable in config.json has been renamed to wmsMaxGetUrlLength . Update to qwc2 submodule revision e357152 (27.06.2022) \u00b6 Reworked interface for handling 1:N relations between qwc2 and qwc-data-service The interface for reading and writing 1:n relations between the qwc2 and the qwc-data-service was reworked. If you are using the qwc-data-service, make sure to update to qwc-data-service-v2022.06.27 or later when updating to qwc2 submodule revision e357152 or later. Update to qwc2 submodule revision 76ec566 (17.06.2022) \u00b6 Refactoring of editing components The editing components have been heavily refactored internally. The changes are mostly transparent, but two points are important: The editDataset field of an editConfig entry is now mandatory. editConfig s generated by qwc-config-generator already write this field, so this applies only to manually written editConfig s for use outside of qwc-services. The changeEditingState action has been replaced by setEditContext (and clearEditContext ). This allows for storing and switching between multiple edit contexts in the application state. Custom components interacting with editing also should be changed to verify that the current edit context is the desired one. Update to qwc2 submodule revision 7929587 (21.04.2022) \u00b6 Format change for external layer resource strings For a short period of time (after submodule revision cb870a1 ), QWC2 supported external resource strings in the form wms:<service_url>#<layername>?<options> . The format has been changed to wms:<service_url>?<options>#<layername> i.e. by moving the query portion before the hash portion, which is inline with the URL scheme format. Update to qwc2 submodule revision eb5e358 (25.10.2021) \u00b6 Update to Webpack 5, React 17 Synchronize the webpack.config.js and the dependencies and package scripts from the demo app package.json . Note that the build package script is now an alias with the prod script. Remove the dist/App.js script include from index.html , it is now added automatically by Webpack. All static files of the app need to be placed below a toplevel static folder, which will contain assets , translations , config.json , themes.json , etc. The themesConfig script will write themes.json to that folder. In custom components, replace any use of Swipeable from react-swipeable : import {Swipeable} from 'react-swipeable'; import {Swipeable} from 'qwc2/components/Swipeable'; Update to qwc2 submodule revision e08aed5 (18.05.2021) \u00b6 Reworked Identify plugin The Identify plugin has been completely reworked, and the IdentifyRegion plugin has been merged into the Identify plugin: Remove the IdentifyRegion plugin from js/appConfig.js and config.json Create menu/toolbar entries in config.json for the region identify tool mode by specifying \"mode\": \"Region\" , i.e.: {\"key\": \"Identify\", \"icon\": \"identify_region\", \"mode\": \"Region\"}, The translation message id identifyregion.info has been changed to infotool.clickhelpPolygon (unless the string is overridden, yarn run tsupdate will take care of this automatically). Note : The identify tool state is now handled internally by the Identify component, it does not store the results in the global application state anymore. Update to qwc2 submodule revision 317eea3 (03.01.2021) \u00b6 Updated dependencies Many dependencies in the qwc2 submodule have been update, please run yarn install to update them in your application. In the demo app, also many dependencies in the application package.json have been updated. It's recommended to synchronize the application package.json and webpack.config.js with the ones of the demo app. Plugins do not need to specify the reducers they use anymore Action files register now the reducers they use automatically, so whenever a symbol is imported from an action file, the respective reducer is automatically enabled. If you have a custom action/reducer file outside the qwc2 submodule folder (i.e. js/{actions,reducers}/myfunctionality.js ), you should add lines similar to import ReducerIndex from 'qwc2/reducers/index'; import myfunctionalityReducer from '/reducers/myfunctionality'; ReducerIndex.register(\"myfunctionality\", myfunctionalityReducer); to js/actions/myfunctionality.js . If you have custom QWC2 plugins, remove the reducers field of the plugin export. ES6 imports QWC2 now uses the ES6 import/export syntax throughout. For instance const Icon = require('qwc2/components/Icon'); const {addLayer} = require('qwc2/actions/layers'); become import Icon from 'qwc2/components/Icon'; import {addLayer} from 'qwc2/actions/layers'; And module.exports = MyClass; becomes export default MyClass; resp. function foo() {...}; function bar() {...}; module.exports = {foo, bar}; becomes export function foo() {...}; export function bar() {...}; In particular, js/appConfig.js needs to be heavily adapted. Update to React 16.14 As per React 16.3, various component lifecycle methods have been deprecated. All qwc2 core components are updated to avoid their use. Custom components should also be updated. See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html for details. Reworked localization Localization in QWC2 has been reworked: - Instead of <Message msgId=\"<msgid>\" /> and LocaleUtils.getMessageById() , use LocaleUtils.tr(<msgid>) . - For message IDs which are not translated directly via LocaleUtils.tr , use LocaleUtils.trmsg to mark the string as a message ID. - The Message component has been dropped. - Static message IDs are now picked up automatically by updateTranslations.js (invoked by yarn run tsupdate ). - Message IDs built at runtime will beed to be specified manually in tsconfig.json in the extra_strings section. - The translation files are now called translations/<lang>-<COUNTRY>.json rather than translations/data.<lang>-<COUNTRY> . The format of the files remains unchanged. - The supportedLocales section in appConfig.js needs to be dropped. - Previously, the fallback locale was specified as fallbacklocale in config.json. Now, it must be specified as defaultLocaleData in appConfig.js . Default editing interface now shipped in the qwc2 submodule The js/EditingInterface.js in the demo app has been moved to qwc2/utils/EditingInterface.js . This is the interface which acts as a counterpart to the QWC data service . If you want to use a custom editing interface, you can still do so, passing it to the Editing plugin in appConfig.js as before. Assets and translations path now optional Assets and translations path can now be omitted from the config.json , and are resolved to assets resp translations relative to the index.html path of the QWC2 application by default. Use ConfigUtils.getAssetsPath() and ConfigUtils.getTranslationsPath() in your custom components instead of ConfigUtils.getConfigProp . You can still specify assetsPath and translationsPath in config.json to override the default values. Changes to map click point/feature state The previous state.map.clickPoint and state.map.clickFeature have been merged to a single state.map.click . The clickFeatureOnMap action has been removed.","title":"QWC2 upgrade notes"},{"location":"release_notes/QWC2UpgradeNotes/#upgrade-notes","text":"This document describes configuration and code incompatibilites, as well as other aspects, which need to addressed when updating to a new version of the QWC viewer.","title":"Upgrade notes"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-2025820","text":"Changes to the View3D plugin setup The child components of the 3D view are now loaded as plugins: If you are building a custom viewer, you need to adapt the appConfig.js to pass the desired list of plugins to the View3D plugin entry as illustrated in the stock appConfig.js . NOTE : Use lazy to delay-load the plugin only when the 3D view is actually started. The View3D plugin configuration in config.json needs to be adapted to include desired plugin options, see the stock config.json . In particular the menuItems and toolbarItems can and must now be explicitly specified in the TopBar3D plugin options.","title":"Update to qwc2 2025.8.20"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-2025722","text":"Changes to EditingInterface Note : This change is only relevant if you use a custom EditingInterface or have custom plugins which interact with the EditingInterface . To add support for virtual fields, the signature of most EditingInterface functions was changed, see EditingInterface.js for the new interface.","title":"Update to qwc2 2025.7.22"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-202571","text":"ProcessNotifications moved to a built-in component The ProcessNotifications has been moved from a plugin to a build-in component. If you are using a custom viewer build, modify your appConfig.js as follows . Also, remove the ProcessNotifications plugin config entry from config.json .","title":"Update to qwc2 2025.7.1"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-2025625","text":"OverviewMap moved to dedicated plugin The OverviewSupport has been moved from a map support tool to a dedicated OverviewMap plugin. Make sure you register it in config.json as follows . If you are using a custom viewer build, modify your appConfig.js as follows . Scalebar integrated into BottomBar The ScalebarSupport map plugin as been removed and integrated directly into the BottomBar . You can choose whether to display a scale bar by setting the displayScalebar option in the BottomBar config section in config.json (default is true ). If you are using a custom viewer build, modify your appConfig.js as follows . Map margin handling (only custom plugin code) If you have custom plugins which honoured state.windows.mapMargins for placement within the visible map area, it is recommended to render them within the MapContainer element using a portal instead. See this example .","title":"Update to qwc2 2025.6.25"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-2025610","text":"Note : This change is only relevant for custom viewer builds. The language detection mechanism has been improved, please apply the following change to your webpack.config.js .","title":"Update to qwc2 2025.6.10"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-2025521","text":"Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The changeLayerProperty action now takes the layer id . The uuid field of the layer entry has been removed.","title":"Update to qwc2 2025.5.21"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-202543","text":"Switch to npm package The QWC stock viewer components are now published as an NPM package . If you are building a custom viewer on top of the QWC stock components, it is recommended you pull it in as a dependency in package.json rather than as a git submodule. To this end: Delete the submodule and adjust the package.json by removing the qwc2 workspace and adding the qwc2 dependency, see package.json . Modify the webpack.config.js as follows - new webpack.NormalModuleReplacementPlugin(/openlayers$/, path.join(__dirname, \"qwc2\", \"libs\", \"openlayers\")), + new webpack.NormalModuleReplacementPlugin(/openlayers$/, path.join(__dirname, \"node_modules\", \"qwc2\", \"libs\", \"openlayers\")), No further code changes are necessary.","title":"Update to qwc2 2025.4.3"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-574fe2a-06022025","text":"Authentication plugin changes The LoginUser plugin has been merged into the Authentication plugin, display of the login user can be enabled via the showLoginUser config prop: { \"name\": \"Authentication\", \"cfg\": { \"showLoginUser\": true } } The task ids of the Authentication plugins have been changed from previously Login / Logout to Authentication with modes Login / Logout . Consequently, the menu- and toolbar item entries need to be changed as follows - {\"key\": \"Login\", \"icon\": \"login\"} + {\"key\": \"Authentication\", \"mode\": \"Login\", \"icon\": \"login\"}","title":"Update to qwc2 submodule revision 574fe2a (06.02.2025)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-5705361-30122024-2024-lts-2025-lts","text":"Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The browser actions/reducer have been removed. To determine whether the application is running on a mobile device, use ConfigUtils.isMobile() .","title":"Update to qwc2 submodule revision 5705361 (30.12.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-52fe6ab-11122024-2024-lts-2025-lts","text":"CRS precision You can now globally specify the desired ordinate display precision (number of decimals) for a CRS in config.json \u2192 precision , i.e.: { \"code\": \"EPSG:2056\", \"proj\": \"+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs\", \"label\": \"CH1903+ / LV95\", \"precision\": 2 } Consequently, the cooPrecision and degreeCooPrecision config props of the MapInfoToolTip plugin have been removed.","title":"Update to qwc2 submodule revision 52fe6ab (11.12.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-e39dbde-26112024-2024-lts-2025-lts","text":"Search providers rework The search providers from qwc2-demo-app/js/searchProviders.js have been moved to the core in qwc2/utils/SearchProviders.js . To define custom search providers, expose them in window.QWC2SearchProviders , see Search . The SearchBox and Routing plugins don't take a SearchProviders object anymore, they are internally collected from the core providers and from window.QWC2SearchProviders . Consequently, modify your js/appConfig.js as follows: - RoutingPlugin: RoutingPlugin(SearchProviders), + RoutingPlugin: RoutingPlugin, ... TopBarPlugin: TopBarPlugin({ - Search: SearchBox(SearchProviders), + Search: SearchBox, The format of the results returned by a Search Provider needs to be slightly updated to specify the result item type in the result group instead of the result item, see Search : results = [ { id: \"<categoryid>\", ... type: SearchResultType.{PLACE|THEMELAYER}, // NEW items: [ { id: \"<item_id>\", type: SearchResultType.{PLACE|THEMELAYER}, // OLD, remove this ... } ] } The configuration format of the fulltext search provider has also changed, to align it with the configuration format of other providers. Old: { \"provider\":\"solr\", // or \"provider\":\"fulltext\" \"default\": [\"<facet>\", \"<facet>\", ...], \"layers\": {\"<layername>\": \"<facet>\", ...} } New: { \"provider\":\"fulltext\", \"params\": { \"default\": [\"<facet>\", \"<facet>\", ...], \"layers\": {\"<layername>\": \"<facet>\", ...} } } Also, the legacy key field in non-fulltext search provider configurations has been replaced with provider : Old: { \"key\":\"<providerkey>\", \"params\": {...} } New: { \"provider\":\"<providerkey>\", \"params\": {...} }","title":"Update to qwc2 submodule revision e39dbde (26.11.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-bafb882-20112024-2024-lts-2025-lts","text":"Removal of RasterExport and DxfExport plugins The previously deprecated RasterExport and DxfExport plugins have been removed. Use MapExport instead.","title":"Update to qwc2 submodule revision bafb882 (20.11.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-9cb8bab-13112024-2024-lts-2025-lts","text":"Note : These changes are only relevant for custom plugin code. No configuration change is necessary. The InputContainer component has been moved to qwc2/components/widgets/ . The ModalDialog component has been moved to qwc2/components/widgets/ . The PopupMenu component has been moved to qwc2/components/widgets/ . The ReCaptchaWidget component has been moved to qwc2/components/widgets/ . The Spinner component has been moved to qwc2/components/widgets/ . The ButtonBar label and tooltip props now expect a translated string is passed, not a msgid. The ResizeableWindow title prop now expects a translated string, not a msgid. The extraControls entries of the ResizeableWindow are expected to contain a translated title instead of a msgid . The SideBar title prop now expects a translated string, not a msgid.","title":"Update to qwc2 submodule revision 9cb8bab (13.11.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-bb6f31c-24102024-2024-lts-2025-lts","text":"Setting name change The toplevel config.json setting featureReportService has been renamed to documentServiceUrl .","title":"Update to qwc2 submodule revision bb6f31c (24.10.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-3e1763a-15052024-2024-lts-2025-lts","text":"Changes to default EditingInterface and qwc-data-service The qwc-data-service and the default EditingInterface client editing interface have been adapted to support ReCAPTCHA verification. Consequently, if editing is used, the qwc submodule will need to be updated in parallel with the qwc-data-service .","title":"Update to qwc2 submodule revision 3e1763a (15.05.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-c7610eb-22022024-2024-lts-2025-lts","text":"Removal of SelectionSupport The SelectionSupport map plugin has been removed, the respective imports and references need to be removed from js/appConfig.js . For custom plugins relying on SelectionSupport , use the new MapSelection component instead. Look at the SearchBox and Identify plugins for some examples.","title":"Update to qwc2 submodule revision c7610eb (22.02.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-d04e5fd-01022024-2024-lts-2025-lts","text":"Setting name change The previously incorrectly named HeightProfile setting heighProfilePrecision has been renamed to heightProfilePrecision .","title":"Update to qwc2 submodule revision d04e5fd (01.02.2024) [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-38b242a-01112023-2023-lts-2024-lts","text":"Import svg as inline assets qwc2/utils/FeatureStyles.js now imports some SVG files as inline assets. For this to work, you need to list .svg in the assets/inline loader rules in webpack.config.js : { test: /(.woff|.woff2|.png|.jpg|.gif|.svg)/, type: 'asset/inline' } Babel plugin changes The class-properties and object-rest-spread proposals have been merged to the ECMAScript standard, and the respective babel plugins in .babelrc.json need to be changed to \"plugins\": [ \"@babel/plugin-transform-class-properties\", \"@babel/plugin-transform-object-rest-spread\" ]","title":"Update to qwc2 submodule revision 38b242a (01.11.2023) [2023-lts &rarr; 2024-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-7409372-23082023-2023-lts-2024-lts","text":"MapInfoToolTip plugin instantation change The instantation of the MapInfoToolTip in appConfig.js needs to be changed to MapInfoTooltipPlugin: MapInfoTooltipPlugin() Note the extra braces at the end. As a new feature, you can pass a list of plugins to the MapInfoTooltipPlugin . Configuration changes The window size configuration of various plugins has been uniformized to the geometry config prop (rather than occasionally windowSize before). Affected plugins are: FeatureForm , Identify , LayerCatalog , LayerTree , MapLegend . Please check the respective plugin reference for more details on the new format.","title":"Update to qwc2 submodule revision 7409372 (23.08.2023) [2023-lts &rarr; 2024-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-96aaa51-09022023-2023-lts-2024-lts","text":"Config setting change Geodesic measurement mode is now configured at toplevel in config.json via geodesicMeasurements: true|false rather than below Map -> cfg -> toolsOptions -> MeasurementSupport .","title":"Update to qwc2 submodule revision 96aaa51 (09.02.2023) [2023-lts &rarr; 2024-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-2c179d0-23012023-2023-lts-2024-lts","text":"Dependency update Most dependencies have been updated to the latest version. The following adjustments need to be performed by hand: Use createRoot in app.jsx , see the demo app.jsx . Update uuid imports in external components, examples: import {v1 as uuidv1} from 'uuid'; import {v4 as uuidv4} from 'uuid'; and then instead of uuid.v1() use uuidv1() etc. Adjust webpack.config.js from { test: /\\.mjs$/, type: 'javascript/auto' } to { test: /(.mjs|.js)$/, type: 'javascript/auto' }","title":"Update to qwc2 submodule revision 2c179d0 (23.01.2023) [2023-lts &rarr; 2024-lts]"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-fe063b6-13012023","text":"Reworked search provider support The arguments and expected behaviour of the provider onSearch and getResultGeometry have changed. Please refer to the documentation chapter in the Documentation . Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples. It is now possible to define search providers in a external JS file loaded at runtime rather than compiled into the application bundle. See static/assets/searchProviders.js , which is loaded by index.html . js/SearchProviders.js now only includes coordinates and nominatim as built-in search providers for the demo application. The searchProviderFactory function has been removed from js/SearchProviders.js . Instead, custom parameters to be passed to a provider can be specified directly in the theme item searchProviders entry: { key: \"<providerkey2>\", params: {...} } and read from searchParams.cfgParams in the provider onSearch function. Load Help dialog contents from HTML fragment Instead of requiring users to implement the renderHelp function in js/Help.jsx , for simple cases the users can provide a plain HTML fragment which is loaded at runtime from the assets. Consult the Documentation .","title":"Update to qwc2 submodule revision fe063b6 (13.01.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-90c613a-28112022","text":"Reworked color scheme support The styleConfig.js file is deprecated and won't be honoured anymore for the styling of core QWC2 components. Instead, base theme colors can be defined via CSS, refer to documentation for details. Renamed config variable The maxGetUrlLength variable in config.json has been renamed to wmsMaxGetUrlLength .","title":"Update to qwc2 submodule revision 90c613a (28.11.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-e357152-27062022","text":"Reworked interface for handling 1:N relations between qwc2 and qwc-data-service The interface for reading and writing 1:n relations between the qwc2 and the qwc-data-service was reworked. If you are using the qwc-data-service, make sure to update to qwc-data-service-v2022.06.27 or later when updating to qwc2 submodule revision e357152 or later.","title":"Update to qwc2 submodule revision e357152 (27.06.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-76ec566-17062022","text":"Refactoring of editing components The editing components have been heavily refactored internally. The changes are mostly transparent, but two points are important: The editDataset field of an editConfig entry is now mandatory. editConfig s generated by qwc-config-generator already write this field, so this applies only to manually written editConfig s for use outside of qwc-services. The changeEditingState action has been replaced by setEditContext (and clearEditContext ). This allows for storing and switching between multiple edit contexts in the application state. Custom components interacting with editing also should be changed to verify that the current edit context is the desired one.","title":"Update to qwc2 submodule revision 76ec566 (17.06.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-7929587-21042022","text":"Format change for external layer resource strings For a short period of time (after submodule revision cb870a1 ), QWC2 supported external resource strings in the form wms:<service_url>#<layername>?<options> . The format has been changed to wms:<service_url>?<options>#<layername> i.e. by moving the query portion before the hash portion, which is inline with the URL scheme format.","title":"Update to qwc2 submodule revision 7929587 (21.04.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-eb5e358-25102021","text":"Update to Webpack 5, React 17 Synchronize the webpack.config.js and the dependencies and package scripts from the demo app package.json . Note that the build package script is now an alias with the prod script. Remove the dist/App.js script include from index.html , it is now added automatically by Webpack. All static files of the app need to be placed below a toplevel static folder, which will contain assets , translations , config.json , themes.json , etc. The themesConfig script will write themes.json to that folder. In custom components, replace any use of Swipeable from react-swipeable : import {Swipeable} from 'react-swipeable'; import {Swipeable} from 'qwc2/components/Swipeable';","title":"Update to qwc2 submodule revision eb5e358 (25.10.2021)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-e08aed5-18052021","text":"Reworked Identify plugin The Identify plugin has been completely reworked, and the IdentifyRegion plugin has been merged into the Identify plugin: Remove the IdentifyRegion plugin from js/appConfig.js and config.json Create menu/toolbar entries in config.json for the region identify tool mode by specifying \"mode\": \"Region\" , i.e.: {\"key\": \"Identify\", \"icon\": \"identify_region\", \"mode\": \"Region\"}, The translation message id identifyregion.info has been changed to infotool.clickhelpPolygon (unless the string is overridden, yarn run tsupdate will take care of this automatically). Note : The identify tool state is now handled internally by the Identify component, it does not store the results in the global application state anymore.","title":"Update to qwc2 submodule revision e08aed5 (18.05.2021)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-317eea3-03012021","text":"Updated dependencies Many dependencies in the qwc2 submodule have been update, please run yarn install to update them in your application. In the demo app, also many dependencies in the application package.json have been updated. It's recommended to synchronize the application package.json and webpack.config.js with the ones of the demo app. Plugins do not need to specify the reducers they use anymore Action files register now the reducers they use automatically, so whenever a symbol is imported from an action file, the respective reducer is automatically enabled. If you have a custom action/reducer file outside the qwc2 submodule folder (i.e. js/{actions,reducers}/myfunctionality.js ), you should add lines similar to import ReducerIndex from 'qwc2/reducers/index'; import myfunctionalityReducer from '/reducers/myfunctionality'; ReducerIndex.register(\"myfunctionality\", myfunctionalityReducer); to js/actions/myfunctionality.js . If you have custom QWC2 plugins, remove the reducers field of the plugin export. ES6 imports QWC2 now uses the ES6 import/export syntax throughout. For instance const Icon = require('qwc2/components/Icon'); const {addLayer} = require('qwc2/actions/layers'); become import Icon from 'qwc2/components/Icon'; import {addLayer} from 'qwc2/actions/layers'; And module.exports = MyClass; becomes export default MyClass; resp. function foo() {...}; function bar() {...}; module.exports = {foo, bar}; becomes export function foo() {...}; export function bar() {...}; In particular, js/appConfig.js needs to be heavily adapted. Update to React 16.14 As per React 16.3, various component lifecycle methods have been deprecated. All qwc2 core components are updated to avoid their use. Custom components should also be updated. See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html for details. Reworked localization Localization in QWC2 has been reworked: - Instead of <Message msgId=\"<msgid>\" /> and LocaleUtils.getMessageById() , use LocaleUtils.tr(<msgid>) . - For message IDs which are not translated directly via LocaleUtils.tr , use LocaleUtils.trmsg to mark the string as a message ID. - The Message component has been dropped. - Static message IDs are now picked up automatically by updateTranslations.js (invoked by yarn run tsupdate ). - Message IDs built at runtime will beed to be specified manually in tsconfig.json in the extra_strings section. - The translation files are now called translations/<lang>-<COUNTRY>.json rather than translations/data.<lang>-<COUNTRY> . The format of the files remains unchanged. - The supportedLocales section in appConfig.js needs to be dropped. - Previously, the fallback locale was specified as fallbacklocale in config.json. Now, it must be specified as defaultLocaleData in appConfig.js . Default editing interface now shipped in the qwc2 submodule The js/EditingInterface.js in the demo app has been moved to qwc2/utils/EditingInterface.js . This is the interface which acts as a counterpart to the QWC data service . If you want to use a custom editing interface, you can still do so, passing it to the Editing plugin in appConfig.js as before. Assets and translations path now optional Assets and translations path can now be omitted from the config.json , and are resolved to assets resp translations relative to the index.html path of the QWC2 application by default. Use ConfigUtils.getAssetsPath() and ConfigUtils.getTranslationsPath() in your custom components instead of ConfigUtils.getConfigProp . You can still specify assetsPath and translationsPath in config.json to override the default values. Changes to map click point/feature state The previous state.map.clickPoint and state.map.clickFeature have been merged to a single state.map.click . The clickFeatureOnMap action has been removed.","title":"Update to qwc2 submodule revision 317eea3 (03.01.2021)"},{"location":"release_notes/QwcDockerUpgradeNotes/","text":"New WFS permission model, removal of Data (read) resource type \u00b6 As of qwc-config-generator:v2025.08.05 qwc-ogc-service:2025.09.01 qwc-admin-gui:v2025.08.05 qwc-base-db-migrate:v2025.08.05 a new WFS permission model has been introduced, replacing the setting generate_wfs_services in tenantConfig.json with proper WFS resources. See WFS Permissions for further information on the new WFS permission model. Also note that the Data (read) resource type has been removed, as it is equivalent to Data without the write flag. Existing Data (read) resources will be automatically converted to Data by qwc-base-db-migrate:v2025.08.05 . Updating to qwc-config-generator:v2025.07.22 \u00b6 As of qwc-config-generator:v2025.07.22 , attribute resources created in the qwc-admin-gui shall be named by the name of the attribute, not its alias. Updating to qwc-admin-gui:v2025.04.23 and qwc-db-auth:v2025.04.23 \u00b6 qwc-admin.gui:v2025.04.23 now supports setting a flag that the user password must be changed on the next login, and and qwc-db-auth:v2025.04.23 enforces this setting. As this requires a DB schema change, make sure you are also using qwc-base-db-migrate:v2025.04.23 or newer. Updating to qwc-permalink-service-v2025.03.19 \u00b6 Due to a DB schema change required by qwc-permalink-service-v2025.03.19 , make sure you are also using qwc-base-db-migrate-v2025.03.19 or newer. Updating to qwc-map-viewer-demo-v2025.03.06 \u00b6 The qwc-map-viewer-demo images have been replaced by the qwc-map-viewer images (without the -demo suffix). Reference this image instead in your docker-compose.yml : qwc-map-viewer: - image: docker.io/sourcepole/qwc-map-viewer-demo:<tag> + image: docker.io/sourcepole/qwc-map-viewer:<tag> Updating to qwc-permalink-service-v2024.12.14 [2024-lts \u2192 2025-lts] \u00b6 When updating to qwc-permalink-service-v2024.12.14 , make sure to also update to qwc-config-db-migrate-v2024.12.14 to update the schema of the user_bookmarks table. The bookmarks are now stored by user id instead of username. qwc-services v2024.11.18 mass update update [2024-lts \u2192 2025-lts] \u00b6 As a result of PyJWT 2.10.0 enforcing that the JWT sub claim values must be strings, qwc-services-core 1.3.34 was updated to store the qwc identity in a separate qwc_identity claim, and all QWC images were updated to use this version. Consequently, if you use any QWC Service image version v2024.11.18 or newer, you will also need to update any other QWC Service image to this or a newer version to ensure that correct that the JWTs are issued and read correctly by all services. New qwc-document-service, jasper-reporting-service obsolete [2024-lts \u2192 2025-lts] \u00b6 As of 2024.09.15, the jasper-reporting-service is obsolete, its functionality has been integrated into the qwc-document-service . Check out the new Reports chapter to learn more about integrating the reporting functionality into QWC. Split categorized layers functionality rewritten as QGIS Server plugin [2024-lts \u2192 2025-lts] \u00b6 As of 2024.02.02 the split categorized layers functionality previously part of qwc-config-generator has been rewritten as a QGIS Server plugin . This greatly simplifies the handling of such projects. The -noqgis image tag suffix in qwc-config-generator:vXXXX-noqgis has been dropped resp. shipped as the regular qwc-config-generator:vXXXX docker images. See the categorized layers documentation for instructions how to configure the new split_categorized plugin. Updating to qwc-data-service v2024.05.21 [2024-lts \u2192 2025-lts] \u00b6 The qwc-data-service version 2024.05.21 introduces two now logging fields create_user_field and create_timestamp_field . Record creation will now be logged to these fields, if set, and record updates will be logged to edit_user_field and edit_timestamp_field . Previously, both record creation and updates were logged to edit_user_field and edit_timestamp_field . As of v2024.05.21, you need to set create_user_field and create_timestamp_field (also to the same values as edit_user_field and edit_timestamp_field ) if you want to log creation. 2023.10.24 qwc-base-db rework [2023-lts \u2192 2024-lts] \u00b6 As of 2023.10.24 the QWC base DB image has been reworked as follows: Migrations were moved to the qwc-base-db repository, the qwc-config-db repository is now obsolete. A new qwc-base-db-migrate image helps migrating dockerized or external config DBs. Demo data will be initialized by an optional setup script in qwc-docker , the qwc-demo-db repository is now obsolete. To use the new images, replace qwc-postgis: image: docker.io/sourcepole/qwc-demo-db:<version> ... with qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker # If you don't want/need the demo data, you can remove this line - ./volumes/demo-data/setup-demo-data.sh:/docker-entrypoint-initdb.d/2_setup-demo-data.sh ports: - \"127.0.0.1:5439:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro depends_on: - qwc-postgis in your docker-compose.yml . Note: It is now mandatory to set your own POSTGRES_PASSWORD . You can keep your previous volumes/db postgres data folder, but it is recommended to make a backup. The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) See the qwc-base-db README for more information. As of 2023.10.24 the name of the database was changed to the more generic qwc_services instead of qwc_demo . Upgrading to qwc service images v2022.01.26 \u00b6 The qwc-uwsgi-base images have been changed to allow for configurable UID/GID of the uwsgi process. The default is UID=33 and GID=33 , you can override it by setting the SERVICE_UID and SERVICE_GID environment variables in docker-compose.yml . As a consequence, /var/www is not necessarily anymore the home directory of the user wich runs uwsgi , and therefore the qwc-uwsgi-base images now set ENV PGSERVICEFILE=\"/srv/pg_service.conf\" . You'll therefore need to adapt your pg_service.conf volume mounts in your docker-compose.yml to point to that location, i.e. [...] - ./pg_service.conf:/srv/pg_service.conf:ro [...] Upgrading to qwc-config-generator-v2022.01.12 \u00b6 scanned_projects_path_prefix has been dropped as a config setting. Instead, qgis_projects_scan_base_dir must be a directory below qgis_projects_base_dir , and the prefix is automatically computed internally. scanned_projects_path_prefix has been added as a config setting as the output path for preprocessed qgis projects. It must be a directory below qgis_projects_base_dir to which the config service is allowed to write. Upgrading from qwc service images v2021.x to v2022.01.08 or later \u00b6 Starting with v2022.01.08, the requirements of all services where updated to use Flask-JWT-Extended 4.3.1. Flask-JWT-4.x changes the JWT format (see 4.0.0 Breaking Changes ), which can result in QWC Services returning a Missing claim: identity error message. To avoid this: * Change your JWT secret key in .env . * Ensure all services are upgraded to v2022.01.12 or later (if such a version exists). Please omit v2022.01.08 and v2022.01.11.","title":"qwc-docker upgrade notes"},{"location":"release_notes/QwcDockerUpgradeNotes/#new-wfs-permission-model-removal-of-data-read-resource-type","text":"As of qwc-config-generator:v2025.08.05 qwc-ogc-service:2025.09.01 qwc-admin-gui:v2025.08.05 qwc-base-db-migrate:v2025.08.05 a new WFS permission model has been introduced, replacing the setting generate_wfs_services in tenantConfig.json with proper WFS resources. See WFS Permissions for further information on the new WFS permission model. Also note that the Data (read) resource type has been removed, as it is equivalent to Data without the write flag. Existing Data (read) resources will be automatically converted to Data by qwc-base-db-migrate:v2025.08.05 .","title":"New WFS permission model, removal of Data (read) resource type"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-config-generatorv20250722","text":"As of qwc-config-generator:v2025.07.22 , attribute resources created in the qwc-admin-gui shall be named by the name of the attribute, not its alias.","title":"Updating to qwc-config-generator:v2025.07.22"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-admin-guiv20250423-and-qwc-db-authv20250423","text":"qwc-admin.gui:v2025.04.23 now supports setting a flag that the user password must be changed on the next login, and and qwc-db-auth:v2025.04.23 enforces this setting. As this requires a DB schema change, make sure you are also using qwc-base-db-migrate:v2025.04.23 or newer.","title":"Updating to qwc-admin-gui:v2025.04.23 and qwc-db-auth:v2025.04.23"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-permalink-service-v20250319","text":"Due to a DB schema change required by qwc-permalink-service-v2025.03.19 , make sure you are also using qwc-base-db-migrate-v2025.03.19 or newer.","title":"Updating to qwc-permalink-service-v2025.03.19"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-map-viewer-demo-v20250306","text":"The qwc-map-viewer-demo images have been replaced by the qwc-map-viewer images (without the -demo suffix). Reference this image instead in your docker-compose.yml : qwc-map-viewer: - image: docker.io/sourcepole/qwc-map-viewer-demo:<tag> + image: docker.io/sourcepole/qwc-map-viewer:<tag>","title":"Updating to qwc-map-viewer-demo-v2025.03.06"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-permalink-service-v20241214-2024-lts-2025-lts","text":"When updating to qwc-permalink-service-v2024.12.14 , make sure to also update to qwc-config-db-migrate-v2024.12.14 to update the schema of the user_bookmarks table. The bookmarks are now stored by user id instead of username.","title":"Updating to qwc-permalink-service-v2024.12.14 [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#qwc-services-v20241118-mass-update-update-2024-lts-2025-lts","text":"As a result of PyJWT 2.10.0 enforcing that the JWT sub claim values must be strings, qwc-services-core 1.3.34 was updated to store the qwc identity in a separate qwc_identity claim, and all QWC images were updated to use this version. Consequently, if you use any QWC Service image version v2024.11.18 or newer, you will also need to update any other QWC Service image to this or a newer version to ensure that correct that the JWTs are issued and read correctly by all services.","title":"qwc-services v2024.11.18 mass update update [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#new-qwc-document-service-jasper-reporting-service-obsolete-2024-lts-2025-lts","text":"As of 2024.09.15, the jasper-reporting-service is obsolete, its functionality has been integrated into the qwc-document-service . Check out the new Reports chapter to learn more about integrating the reporting functionality into QWC.","title":"New qwc-document-service, jasper-reporting-service obsolete [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#split-categorized-layers-functionality-rewritten-as-qgis-server-plugin-2024-lts-2025-lts","text":"As of 2024.02.02 the split categorized layers functionality previously part of qwc-config-generator has been rewritten as a QGIS Server plugin . This greatly simplifies the handling of such projects. The -noqgis image tag suffix in qwc-config-generator:vXXXX-noqgis has been dropped resp. shipped as the regular qwc-config-generator:vXXXX docker images. See the categorized layers documentation for instructions how to configure the new split_categorized plugin.","title":"Split categorized layers functionality rewritten as QGIS Server plugin [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#updating-to-qwc-data-service-v20240521-2024-lts-2025-lts","text":"The qwc-data-service version 2024.05.21 introduces two now logging fields create_user_field and create_timestamp_field . Record creation will now be logged to these fields, if set, and record updates will be logged to edit_user_field and edit_timestamp_field . Previously, both record creation and updates were logged to edit_user_field and edit_timestamp_field . As of v2024.05.21, you need to set create_user_field and create_timestamp_field (also to the same values as edit_user_field and edit_timestamp_field ) if you want to log creation.","title":"Updating to qwc-data-service v2024.05.21 [2024-lts &rarr; 2025-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#20231024-qwc-base-db-rework-2023-lts-2024-lts","text":"As of 2023.10.24 the QWC base DB image has been reworked as follows: Migrations were moved to the qwc-base-db repository, the qwc-config-db repository is now obsolete. A new qwc-base-db-migrate image helps migrating dockerized or external config DBs. Demo data will be initialized by an optional setup script in qwc-docker , the qwc-demo-db repository is now obsolete. To use the new images, replace qwc-postgis: image: docker.io/sourcepole/qwc-demo-db:<version> ... with qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker # If you don't want/need the demo data, you can remove this line - ./volumes/demo-data/setup-demo-data.sh:/docker-entrypoint-initdb.d/2_setup-demo-data.sh ports: - \"127.0.0.1:5439:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro depends_on: - qwc-postgis in your docker-compose.yml . Note: It is now mandatory to set your own POSTGRES_PASSWORD . You can keep your previous volumes/db postgres data folder, but it is recommended to make a backup. The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) See the qwc-base-db README for more information. As of 2023.10.24 the name of the database was changed to the more generic qwc_services instead of qwc_demo .","title":"2023.10.24 qwc-base-db rework [2023-lts &rarr; 2024-lts]"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-to-qwc-service-images-v20220126","text":"The qwc-uwsgi-base images have been changed to allow for configurable UID/GID of the uwsgi process. The default is UID=33 and GID=33 , you can override it by setting the SERVICE_UID and SERVICE_GID environment variables in docker-compose.yml . As a consequence, /var/www is not necessarily anymore the home directory of the user wich runs uwsgi , and therefore the qwc-uwsgi-base images now set ENV PGSERVICEFILE=\"/srv/pg_service.conf\" . You'll therefore need to adapt your pg_service.conf volume mounts in your docker-compose.yml to point to that location, i.e. [...] - ./pg_service.conf:/srv/pg_service.conf:ro [...]","title":"Upgrading to qwc service images v2022.01.26"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-to-qwc-config-generator-v20220112","text":"scanned_projects_path_prefix has been dropped as a config setting. Instead, qgis_projects_scan_base_dir must be a directory below qgis_projects_base_dir , and the prefix is automatically computed internally. scanned_projects_path_prefix has been added as a config setting as the output path for preprocessed qgis projects. It must be a directory below qgis_projects_base_dir to which the config service is allowed to write.","title":"Upgrading to qwc-config-generator-v2022.01.12"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-from-qwc-service-images-v2021x-to-v20220108-or-later","text":"Starting with v2022.01.08, the requirements of all services where updated to use Flask-JWT-Extended 4.3.1. Flask-JWT-4.x changes the JWT format (see 4.0.0 Breaking Changes ), which can result in QWC Services returning a Missing claim: identity error message. To avoid this: * Change your JWT secret key in .env . * Ensure all services are upgraded to v2022.01.12 or later (if such a version exists). Please omit v2022.01.08 and v2022.01.11.","title":"Upgrading from qwc service images v2021.x to v2022.01.08 or later"},{"location":"topics/Editing/","text":"Editing \u00b6 QWC offers comprehensive editing support through a variety of plugins: The Editing plugin allows creating, editing and removing features of an editable vector layer. It supports editing both geometry and attributes, displaying customizeable attribute forms. The AttributeTable plugin also allows creating, editing and removing features of an editable vector layer. It displays all features of the editable layer in a tabularized view, and allows editing attributes, but not geometries. Noteably, it will allow editing geometryless datasets. The FeatureForm works similarly to the feature-info, but will display the feature form according to the QGIS form configuration, and also allows editing the attributes and geometry of a picked feature. It can configured as identifyTool instead of the standard Identify plugin in config.json . Quick start \u00b6 The easiest way to use the editing functionality is by using the pre-configured qwc-docker with the qwc-data-service and qwc-config-generator . To make a layer editable, follow these steps: The datasource of the layer needs to be a PostGIS database. In particular, make sure that a primary key is configured for your dataset! Configure the QGIS PostgreSQL connection using a service name, add the corresponding service definition to your host pg_service.conf and to qwc-docker/pg_service-write.conf . Make sure your database host is reachable within the docker containers! Especially when your primary key field type is serial , you'll want to mark the corresponding field widget type as Hidden in the QGIS Attributes Form settings. Create a Data resource as child of the corresponding Map resource in the administration backend, and create a new permission for the Map and Data resources for the roles which should be allowed to edit the layer. Note: if you leave the \"Write\" checkbox in the Data resource permission unchecked, the dataset will be available as read-only, which can be useful if you want to use the AttributeTable and/or FeatureForm to just display the dataset without allowing any edits. Run the config generator from the administration backend to update service configuration. Designing the edit forms \u00b6 Much of the power of the QWC editing functionality resides in its fully customizeable forms, providing support for different input widget types, file uploads and 1:N relations. The qwc-config-generator will automatically generate forms based on the configuration specified in the QGIS Layer Properties \u2192 Attributes Form. If Autogenerate or Drag and Drop Designer is chosen, a corresponding Qt UI form is automatically generated for QWC in assets/forms/autogen . If Provide ui-file is chosen, the specified UI form will copied to assets/forms/autogen . Localized translation forms are supported. To this end, place a Qt Translation file called <form_basename>_<lang>.ts next to the designer form <form_basename>.ui , where lang is a language or language/country code, i.e. en or en-US . There is a translateui.sh script to help generate the translation files. Example: ./translateui.sh .../qwc2/assets/forms/form.ui de it fr File uploads \u00b6 You can configure a text-like field of your dataset as an upload field as follows: For Autogenerated and Drag and Drop Designer forms configuration, set the widget type to Attachment. You can set the file type filter in the widget configuration under Display button to open file dialog -> Filter , in the format *.ext1, *.ext2 . For manually created Qt Designed Ui forms, use a QLineEdit widget named <fieldname>__upload , and optionally as the text value of the QLineEdit set a comma separated list of suggested file extensions. Attachments are stored on disk below the attachments_base_dir defined in the data service configuration, and the path to the attachments stored in the dataset. Note: If you set the format constraint to *.jpeg and your browser has access to a camera, QWC will allow you to directly upload images captured from the camera. You can set the allowed attachment extensions and maximum file sizes globally by setting allowed_attachment_extensions and max_attachment_file_size in the data service configuration. You may also need to set/increase client_max_body_size in qwc-docker/api-gateway/nginx.conf , which defaults to 1M . You can also set the allowed attachment extensions and maximum file sizes per dataset by setting max_attachment_file_size_per_dataset and allowed_extensions_per_dataset in the data service configuration. If you set the per dataset values, the global settings will be disregarded (i.e. if an attachment satisfies the per dataset constraint it will be considered valid, even if it violates the global constraint). To ensure the uploaded files are properly rendered as download links in GetFeatureInfo responses, use the qwc-feature-info-service . Key-value relations (value mappings) \u00b6 Value relations allow mapping technical values to a human readable display strings, displayed in a combo box. For Autogenerated and Drag and Drop Designer , use widgets of type Value Relation . In a manually created Qt-Designer Ui form, you can use key-value relations for combo box entries by naming the QComboBox widget according to the following pattern: kvrel__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . <kvtablename> refers to a table containing a field called <kvtable_valuefield> for the value of the entry and a field <kvtable_labelfield> for the label of the entry. For key-value relations inside a 1:N relation, use kvrel__<reltablename>__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . Note: The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Alternatively, you can set autogen_keyvaltable_datasets to true in the config generator configuration, to automatically generate resources and read-only permissions as required. 1:N relations \u00b6 1:N relations allow associating multiple child records to the target feature, displayed in a table. For Autogenerated and Drag and Drop Designer forms, configure the 1:N relation in QGIS Project \u2192 Properties \u2192 Relations. Note that the child table foreign key must refer to parent primary key. By default, a table widget similar to an attribute table will be generated to manage the relation values. You can switch to a list of child entries which, when clicked, are displayed in a nested form by setting generate_nested_nrel_forms to true as follows: In the toplevel config section of the tenantConfig.json . This will apply globally to all datasets. In the editConfig section of a theme in themesConfig.json (see also editConfig below). This will then apply only to the respective dataset. Example: \"editConfig\": { \"<LayerId>\": { \"generate_nested_nrel_forms\": true } } The label of the entry in the child entry list is chosen according to the following rules: The display name (Layer properties \u2192 Display \u2192 Display Name) of the referencing layer, if the expression is a single field name. The primary key value of the referencing layer. In a manually created Qt-Designer Ui form, create a widget of type QWidget , QGroupBox or QFrame named according to the pattern nrel__<reltablename>__<foreignkeyfield> , where <reltablename> is the name of the relation table and <foreignkeyfield> the name of the foreign key field in the relation table. Inside this widget, add the edit widgets for the values of the relation table. Name the widgets <reltablename>__<fieldname> . These edit widgets will be replicated for each relation record. Notes : In a manually created Qt-Designer Ui form, you can also specify a sort column for the 1:N relation in the form nrel__<reltablename>__<foreignkeyfield>__<sortcol> . If a sort-column is specified, QWC will display sort arrows for each entry in the relation widget. The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Expressions \u00b6 The QWC editing components will honour QGIS expressions configured in the field configuration of the QGIS layer properties, in particular \"Default value\" and \"Control Visibility by Expression\" will be honoured. Notes : Currently only a limited number of verbs are implemented, see the expression grammar . Pull requests for additional verbs are welcome! Make sure Data permissions exist for any datasets which are referenced in the expressions. The QWC expression parser requires a space between brackets and keywords, i.e. attribute('foo')is null is invalid, whereas attribute('foo') is null is valid. If the parser fails to parse an expression, an error message will be logged in the browser console. Special form widgets \u00b6 In manually created Qt-Designer Ui forms, there are a number of special widgets you can use: Images : To display attribute values which contain an image URL as an inline image, use a QLabel named img__<fieldname> . Linked features : To display a button to choose a linked feature and edit its attributes in a nested edit form, create a QPushButton named featurelink__<linkdataset>__<fieldname> (simple join) or featurelink__<linkdataset>__<reltable>__<fieldname> in a 1:N relation. In a 1:N relation, linkdataset can be equal to reltable to edit the relation record itself in the nested form. fieldname will contain the id of the linked feature. External fields : Some times it is useful to display information from an external source in the edit form. This can be accomplished by creating a QWidget with name ext__<fieldname> and using a form preprocessor hook (see registerFormPreprocessor in QtDesignerForm.jsx to populate the field by assigning a React fragment to formData.externalFields.<fieldname> . Buttons : To add a button with a custom action, add a QPushButton with name btn__<buttonname> , and use a form preprocessor hook to set the custom function to formData.buttons.buttonname.onClick . ReCAPTCHA validation \u00b6 You can enable ReCAPTCHA validation for public editable datasets as follows: Set the ReCAPTCHA site secret key in recaptcha_site_secret_key in the data service config. Set the ReCAPTCHA site public key in editServiceCaptchaSiteKey in the toplevel section of the config.json . Configure the desired datasets to be editable by public . If editServiceCaptchaSiteKey is set, a ReCAPTCHA validation widget will be displayed in the edit form as well as the attribute table when creating/updating/deleting features. Currently, the ReCAPTCHA validation will only be enabled for public users, and will automatically be bypassed for authenticated users. Logging mutations \u00b6 The qwc-data-service offers some basic functionality for logging mutations: If you set create_user_field in the data service config, the username of the user who created a record will be logged to the <create_user_field> field of the record. If you set create_timestamp_field in the data service config, the timestamp of the creation of a record will be logged to the <create_timestamp_field> field of the record. If you set edit_user_field in the data service config, the username of the last user who performed a mutation to a record will be logged to the <edit_user_field> field of the record. If you set edit_timestamp_field in the data service config, the timestamp of the last mutation to a record will be logged to the <edit_timestamp_field> field of the record. If you set upload_user_field_suffix in the data service config, the username of the last user who performed a mutation to <fieldname> will be logged to <fieldname>__<upload_user_field_suffix> . Note : for these fields to be written, ensure the qgis project is also up-to-date, i.e. that contain the up-to-date table schemas. You can set the respective field types to hidden in the QGIS layer properties to avoid them showing up in the autogenerated edit forms. The theme editConfig block \u00b6 The qwc-config-generator . will automatically generate the editConfig for a theme in themesConfig.json . You can however also specify it manually, in which case the manually defined entries will be merged with the automatically generated entries. The structure of the editConfig block is as follows: Entry Description { \u2063 <LayerId>: { A WMS layer ID. Should be a theme WMS layer name, to ensure the WMS is correctly refreshed. \u2063 \"layerName\": \"<LayerName>\", The layer name to show in the selection combo box. \u2063 \"editDataset\": \"<DatasetName>\", The name of the edit dataset passed to the editing interface. \u2063 \"geomType\": \"<GeomType>\", The geometry type, either Point , LineString or Polygon . \u2063 \"displayField\": \"<FieldId>\", The ID of the field to use in the feature selection menu. \u2063 \"permissions\": { A list of different write permissions to specify rights and buttons. \u2063 \"creatable\": <boolean>, If true , Draw button will appear in Editing interface and Add button in Attribute Table. \u2063 \"updatable\": <boolean>, If true , Pick button will appear in Editing interface. \u2063 \"deletable\": <boolean>, If true , Delete button will appear in Editing interface and Attribute Table. \u2063 }, \u2063 \"fields\": [{ A list of field definitions, for each exposed attribute. \u2063 \"id\": \"<FieldID>\", The field ID. \u2063 \"name\": \"<FieldName>\", The field name, as displayed in the editing form. \u2063 \"type\": \"<FieldType>\", A field type. Either bool , list or a regular HTML input element type . \u2063 \"constraints\": { Constraints for the input field. \u2063 \"values\": [<Entries>], Only if type is list : an array of arbitrary strings. \u2063 ... For regular HTML input types, the ReactJS API name of any applicable HTML input constraint , i.e. maxLength or readOnly . \u2063 } \u2063 }], \u2063 \"form\": \"<PathToUiFile>\", URL to a Qt Designed UI form (use :/<path> to specify a path below the assets folder). \u2063 \"generate_nested_nrel_forms\": <boolean> Optional: Tell the config-generator whether 1:N relations of this dataset should be displayed in nested forms. \u2063 } } Using a custom editing backend \u00b6 You can also use a custom editing backend instead of the qwc-data-service by following these steps: Implement the custom editing interface, taking default EditingInterface.js as a template. Enable the desired editing plugins in js/appConfig.js , passing your custom editing interface to Editing , AttributeTable and FeatureForm . Set up an editing backend.","title":"Editing"},{"location":"topics/Editing/#editing","text":"QWC offers comprehensive editing support through a variety of plugins: The Editing plugin allows creating, editing and removing features of an editable vector layer. It supports editing both geometry and attributes, displaying customizeable attribute forms. The AttributeTable plugin also allows creating, editing and removing features of an editable vector layer. It displays all features of the editable layer in a tabularized view, and allows editing attributes, but not geometries. Noteably, it will allow editing geometryless datasets. The FeatureForm works similarly to the feature-info, but will display the feature form according to the QGIS form configuration, and also allows editing the attributes and geometry of a picked feature. It can configured as identifyTool instead of the standard Identify plugin in config.json .","title":"Editing"},{"location":"topics/Editing/#quick-start","text":"The easiest way to use the editing functionality is by using the pre-configured qwc-docker with the qwc-data-service and qwc-config-generator . To make a layer editable, follow these steps: The datasource of the layer needs to be a PostGIS database. In particular, make sure that a primary key is configured for your dataset! Configure the QGIS PostgreSQL connection using a service name, add the corresponding service definition to your host pg_service.conf and to qwc-docker/pg_service-write.conf . Make sure your database host is reachable within the docker containers! Especially when your primary key field type is serial , you'll want to mark the corresponding field widget type as Hidden in the QGIS Attributes Form settings. Create a Data resource as child of the corresponding Map resource in the administration backend, and create a new permission for the Map and Data resources for the roles which should be allowed to edit the layer. Note: if you leave the \"Write\" checkbox in the Data resource permission unchecked, the dataset will be available as read-only, which can be useful if you want to use the AttributeTable and/or FeatureForm to just display the dataset without allowing any edits. Run the config generator from the administration backend to update service configuration.","title":"Quick start "},{"location":"topics/Editing/#designing-the-edit-forms","text":"Much of the power of the QWC editing functionality resides in its fully customizeable forms, providing support for different input widget types, file uploads and 1:N relations. The qwc-config-generator will automatically generate forms based on the configuration specified in the QGIS Layer Properties \u2192 Attributes Form. If Autogenerate or Drag and Drop Designer is chosen, a corresponding Qt UI form is automatically generated for QWC in assets/forms/autogen . If Provide ui-file is chosen, the specified UI form will copied to assets/forms/autogen . Localized translation forms are supported. To this end, place a Qt Translation file called <form_basename>_<lang>.ts next to the designer form <form_basename>.ui , where lang is a language or language/country code, i.e. en or en-US . There is a translateui.sh script to help generate the translation files. Example: ./translateui.sh .../qwc2/assets/forms/form.ui de it fr","title":"Designing the edit forms"},{"location":"topics/Editing/#file-uploads","text":"You can configure a text-like field of your dataset as an upload field as follows: For Autogenerated and Drag and Drop Designer forms configuration, set the widget type to Attachment. You can set the file type filter in the widget configuration under Display button to open file dialog -> Filter , in the format *.ext1, *.ext2 . For manually created Qt Designed Ui forms, use a QLineEdit widget named <fieldname>__upload , and optionally as the text value of the QLineEdit set a comma separated list of suggested file extensions. Attachments are stored on disk below the attachments_base_dir defined in the data service configuration, and the path to the attachments stored in the dataset. Note: If you set the format constraint to *.jpeg and your browser has access to a camera, QWC will allow you to directly upload images captured from the camera. You can set the allowed attachment extensions and maximum file sizes globally by setting allowed_attachment_extensions and max_attachment_file_size in the data service configuration. You may also need to set/increase client_max_body_size in qwc-docker/api-gateway/nginx.conf , which defaults to 1M . You can also set the allowed attachment extensions and maximum file sizes per dataset by setting max_attachment_file_size_per_dataset and allowed_extensions_per_dataset in the data service configuration. If you set the per dataset values, the global settings will be disregarded (i.e. if an attachment satisfies the per dataset constraint it will be considered valid, even if it violates the global constraint). To ensure the uploaded files are properly rendered as download links in GetFeatureInfo responses, use the qwc-feature-info-service .","title":"File uploads"},{"location":"topics/Editing/#key-value-relations-value-mappings","text":"Value relations allow mapping technical values to a human readable display strings, displayed in a combo box. For Autogenerated and Drag and Drop Designer , use widgets of type Value Relation . In a manually created Qt-Designer Ui form, you can use key-value relations for combo box entries by naming the QComboBox widget according to the following pattern: kvrel__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . <kvtablename> refers to a table containing a field called <kvtable_valuefield> for the value of the entry and a field <kvtable_labelfield> for the label of the entry. For key-value relations inside a 1:N relation, use kvrel__<reltablename>__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . Note: The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Alternatively, you can set autogen_keyvaltable_datasets to true in the config generator configuration, to automatically generate resources and read-only permissions as required.","title":"Key-value relations (value mappings)"},{"location":"topics/Editing/#1n-relations","text":"1:N relations allow associating multiple child records to the target feature, displayed in a table. For Autogenerated and Drag and Drop Designer forms, configure the 1:N relation in QGIS Project \u2192 Properties \u2192 Relations. Note that the child table foreign key must refer to parent primary key. By default, a table widget similar to an attribute table will be generated to manage the relation values. You can switch to a list of child entries which, when clicked, are displayed in a nested form by setting generate_nested_nrel_forms to true as follows: In the toplevel config section of the tenantConfig.json . This will apply globally to all datasets. In the editConfig section of a theme in themesConfig.json (see also editConfig below). This will then apply only to the respective dataset. Example: \"editConfig\": { \"<LayerId>\": { \"generate_nested_nrel_forms\": true } } The label of the entry in the child entry list is chosen according to the following rules: The display name (Layer properties \u2192 Display \u2192 Display Name) of the referencing layer, if the expression is a single field name. The primary key value of the referencing layer. In a manually created Qt-Designer Ui form, create a widget of type QWidget , QGroupBox or QFrame named according to the pattern nrel__<reltablename>__<foreignkeyfield> , where <reltablename> is the name of the relation table and <foreignkeyfield> the name of the foreign key field in the relation table. Inside this widget, add the edit widgets for the values of the relation table. Name the widgets <reltablename>__<fieldname> . These edit widgets will be replicated for each relation record. Notes : In a manually created Qt-Designer Ui form, you can also specify a sort column for the 1:N relation in the form nrel__<reltablename>__<foreignkeyfield>__<sortcol> . If a sort-column is specified, QWC will display sort arrows for each entry in the relation widget. The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend.","title":"1:N relations"},{"location":"topics/Editing/#expressions","text":"The QWC editing components will honour QGIS expressions configured in the field configuration of the QGIS layer properties, in particular \"Default value\" and \"Control Visibility by Expression\" will be honoured. Notes : Currently only a limited number of verbs are implemented, see the expression grammar . Pull requests for additional verbs are welcome! Make sure Data permissions exist for any datasets which are referenced in the expressions. The QWC expression parser requires a space between brackets and keywords, i.e. attribute('foo')is null is invalid, whereas attribute('foo') is null is valid. If the parser fails to parse an expression, an error message will be logged in the browser console.","title":"Expressions"},{"location":"topics/Editing/#special-form-widgets","text":"In manually created Qt-Designer Ui forms, there are a number of special widgets you can use: Images : To display attribute values which contain an image URL as an inline image, use a QLabel named img__<fieldname> . Linked features : To display a button to choose a linked feature and edit its attributes in a nested edit form, create a QPushButton named featurelink__<linkdataset>__<fieldname> (simple join) or featurelink__<linkdataset>__<reltable>__<fieldname> in a 1:N relation. In a 1:N relation, linkdataset can be equal to reltable to edit the relation record itself in the nested form. fieldname will contain the id of the linked feature. External fields : Some times it is useful to display information from an external source in the edit form. This can be accomplished by creating a QWidget with name ext__<fieldname> and using a form preprocessor hook (see registerFormPreprocessor in QtDesignerForm.jsx to populate the field by assigning a React fragment to formData.externalFields.<fieldname> . Buttons : To add a button with a custom action, add a QPushButton with name btn__<buttonname> , and use a form preprocessor hook to set the custom function to formData.buttons.buttonname.onClick .","title":"Special form widgets"},{"location":"topics/Editing/#recaptcha-validation","text":"You can enable ReCAPTCHA validation for public editable datasets as follows: Set the ReCAPTCHA site secret key in recaptcha_site_secret_key in the data service config. Set the ReCAPTCHA site public key in editServiceCaptchaSiteKey in the toplevel section of the config.json . Configure the desired datasets to be editable by public . If editServiceCaptchaSiteKey is set, a ReCAPTCHA validation widget will be displayed in the edit form as well as the attribute table when creating/updating/deleting features. Currently, the ReCAPTCHA validation will only be enabled for public users, and will automatically be bypassed for authenticated users.","title":"ReCAPTCHA validation"},{"location":"topics/Editing/#logging-mutations","text":"The qwc-data-service offers some basic functionality for logging mutations: If you set create_user_field in the data service config, the username of the user who created a record will be logged to the <create_user_field> field of the record. If you set create_timestamp_field in the data service config, the timestamp of the creation of a record will be logged to the <create_timestamp_field> field of the record. If you set edit_user_field in the data service config, the username of the last user who performed a mutation to a record will be logged to the <edit_user_field> field of the record. If you set edit_timestamp_field in the data service config, the timestamp of the last mutation to a record will be logged to the <edit_timestamp_field> field of the record. If you set upload_user_field_suffix in the data service config, the username of the last user who performed a mutation to <fieldname> will be logged to <fieldname>__<upload_user_field_suffix> . Note : for these fields to be written, ensure the qgis project is also up-to-date, i.e. that contain the up-to-date table schemas. You can set the respective field types to hidden in the QGIS layer properties to avoid them showing up in the autogenerated edit forms.","title":"Logging mutations"},{"location":"topics/Editing/#the-theme-editconfig-block","text":"The qwc-config-generator . will automatically generate the editConfig for a theme in themesConfig.json . You can however also specify it manually, in which case the manually defined entries will be merged with the automatically generated entries. The structure of the editConfig block is as follows: Entry Description { \u2063 <LayerId>: { A WMS layer ID. Should be a theme WMS layer name, to ensure the WMS is correctly refreshed. \u2063 \"layerName\": \"<LayerName>\", The layer name to show in the selection combo box. \u2063 \"editDataset\": \"<DatasetName>\", The name of the edit dataset passed to the editing interface. \u2063 \"geomType\": \"<GeomType>\", The geometry type, either Point , LineString or Polygon . \u2063 \"displayField\": \"<FieldId>\", The ID of the field to use in the feature selection menu. \u2063 \"permissions\": { A list of different write permissions to specify rights and buttons. \u2063 \"creatable\": <boolean>, If true , Draw button will appear in Editing interface and Add button in Attribute Table. \u2063 \"updatable\": <boolean>, If true , Pick button will appear in Editing interface. \u2063 \"deletable\": <boolean>, If true , Delete button will appear in Editing interface and Attribute Table. \u2063 }, \u2063 \"fields\": [{ A list of field definitions, for each exposed attribute. \u2063 \"id\": \"<FieldID>\", The field ID. \u2063 \"name\": \"<FieldName>\", The field name, as displayed in the editing form. \u2063 \"type\": \"<FieldType>\", A field type. Either bool , list or a regular HTML input element type . \u2063 \"constraints\": { Constraints for the input field. \u2063 \"values\": [<Entries>], Only if type is list : an array of arbitrary strings. \u2063 ... For regular HTML input types, the ReactJS API name of any applicable HTML input constraint , i.e. maxLength or readOnly . \u2063 } \u2063 }], \u2063 \"form\": \"<PathToUiFile>\", URL to a Qt Designed UI form (use :/<path> to specify a path below the assets folder). \u2063 \"generate_nested_nrel_forms\": <boolean> Optional: Tell the config-generator whether 1:N relations of this dataset should be displayed in nested forms. \u2063 } }","title":"The theme editConfig block"},{"location":"topics/Editing/#using-a-custom-editing-backend","text":"You can also use a custom editing backend instead of the qwc-data-service by following these steps: Implement the custom editing interface, taking default EditingInterface.js as a template. Enable the desired editing plugins in js/appConfig.js , passing your custom editing interface to Editing , AttributeTable and FeatureForm . Set up an editing backend.","title":"Using a custom editing backend"},{"location":"topics/FeatureInfo/","text":"Feature info \u00b6 The feature info displays attributes for picked objects. The following options are available for displaying feature info: Identify plugin : display attributes in a table or custom HTML templates, querying the features via: WMS GetFeatureInfo Custom SQL queries FeatureForm plugin : display attributes in QGIS attribute forms, querying the features via the qwc-data-service You can configure the identify tool by setting identifyTool in config.json (or per-theme in themesConfig.json ). By default, it is triggered when clicking on a feature in the map. You can also configure the feature info as an explicit viewer tool by setting identifyTool: null and adding a menuItems or toolbarItems entry. Identify plugin \u00b6 The identify plugin allows displaying feature attributes queried over WMS GetFeatureInfo or, by using the qwc-feature-info-service , from a custom SQL query. To use it as default identify-tool, set identifyTool: \"Identify\" in config.json . By default, results are displayed in a table. You can also display the results using a custom HTML template by using the qwc-feature-info-service . You can also omit empty attributes by setting skipEmptyFeatureAttributes: true in the theme configuration entry in themesConfig.json . Note: Use of the qwc-feature-info-service is also recommended if the qwc-data-service is used for editing, to ensure attribute values containing paths to uploaded files are properly converted to clickable hyperlinks. Querying features via WMS GetFeatureInfo \u00b6 Set whether a layer is identifyable in QGIS \u2192 Project Properties \u2192 Data sources . To highlight the geometry, make sure QGIS \u2192 Project Properties \u2192 QGIS Server \u2192 Add geometry to feature response is checked. You can suppress attributes globally by selecting \"Do not expose via WMS\" in QGIS \u2192 Layer properties \u2192 Fields. Alternatively, you can selectively restrict attributes using the qwc-admin-gui and assigning Attribute resource permissions as desired, see Permissions . If you use the qwc-feature-info-service , you can filter empty attributes service-side by setting skip_empty_attributes: true in the featureInfo service configuration in tenantConfig.json . Querying features via custom SQL queries \u00b6 With the qwc-feature-info-service , you can query features directly from a database instead of over WMS GetFeatureInfo, by providing the featureInfo service configuration as described in HTML templates , but specifying a db_url and sql , for example \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) . Attribute values: HTML markup, hyperlinks, images \u00b6 In general, HTML markup in attribute values is preserved. For displaying interactive hyperlinks, the following options are supported: URLs in attribute text values with no HTML markup are automatically converted to an interactive hyperlink. Alternatively, you can enclose the URL in a HTML <a> tag in the attribute value. To open the linked page in an inline dialog within QWC, you can set the anchor target to :iframedialog:<dialogname>:<optkey>=<optval>:<optkey>=<optval>:... where the supported options are: w : Dialog width in pixels, default: 640 . h : Dialog height in pixels, default: 480 . title : Dialog window title, by default the translation string windows.<dialogname> . print : Whether to add a print icon for printing the dialog contents, default: true . dockable : Whether the dialog can be docked, default false . docked : Whether the dialog is initially docked, default false . detachable : Whether the dialog can be detached, default true . Example: <a href=\"https://example.com\" target=\":iframedialog:w=1024:h=768:title=Example\">Link text</a> For displaying images, the following options are supported: If replaceImageUrls: true is set in the Identify plugin configuration in config.json , attribute text values which contain exactly an URL to an image are converted to inline images. If you use the qwc-feature-info-service , you need to set transform_image_urls in the featureInfo service configuration in tenantConfig.json . Alternatively, you can add a <img> tag directly in the attribute value. This applies in particular to <a /> anchor and <img /> tags for displaying links an images in an attribute value. Client side attributes \u00b6 To compute derived attributes client-side, you can register an attribute calculator via window.qwc2.addIdentifyAttributeCalculator , exposed by the API plugin. Custom export \u00b6 By default, the identify dialog in QWC allows you to export the results to json (QWC feature storage format), geojson (standard GeoJSON without QWC specific fields), csv (single CSV with all layers) or csv+zip (ZIP with one CSV per layer). You can define additional export functions registering an exporter via window.qwc2.addIdentifyExporter , exposed by the API plugin. Custom HTML templates \u00b6 With the qwc-feature-info-service , you can specify a custom HTML template for displaying the feature rather than the default table view. Mount the info templates folder into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info_templates:/info_templates Note: If mounting to another location than /info_templates , set the info_templates_path in the featureInfo service configuration in tenantConfig.json : { \"name\": \"featureInfo\", \"config\": { \"info_templates_path\": \"/<path>/\" } } Then, info templates will be searched by name as <info_templates_path>/<service_name>/<layername>.html . Alternatively, you can specify the template in the featureInfo service configuration in tenantConfig.json , either inline or as a path: { \"name\": \"featureInfo\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service_name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"info_template\": { <See below> } } ] } } ] } } Example info_template with inline template: \"info_template\": { \"type\": \"wms\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template with template path: \"info_template\": { \"type\": \"wms\", \"template_path\": \"/info_templates/template.html\" } Note: x and y are the info query coordinates. feature.<attr> renders the attr attribute value of the feature. The templates must be HTML fragments without html or body tags. The templates folder needs to be mounted into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info-templates:/info_templates:ro Localization \u00b6 The qwc-feature-info-service supports switching the runtime locale by setting the LOCALE environment variable, i.e.: qwc-feature-info-service: image: docker.io/sourcepole/qwc-feature-info-service:vXXXX.XX.XX environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/featureinfo' LOCALE: 'de_DE' In addition, the locale object is available in templates. This is particularly helpful for rendering locale-formatted numbers, i.e. <div>Area: {{ locale.format_string(\"%.2f\", area, True) }}</div> Permissions \u00b6 If permissions_default_allow is set to true in tenantConfig.json , layers and attributes are queryable by default. To restrict the display of single layer attributes to specific roles, create a Layer and Attribute resource (latter as child of the created Layer resource) and create permissions assigning the desired roles to the Attribute resources. To restrict whether a layer can be queried, create a FeatureInfo service and FeatureInfo layer resource (latter as child of the created FeatureInfo service resource), and create permissions assigning the desired roles to the FeatureInfo layer resources. Feature form plugin \u00b6 The FeatureForm plugin displays picked features in a feature form as configured in QGIS \u2192 Layer properties \u2192 Attributes form . It queries the features via qwc-data-service , and hence only works for layers with postgresql data source. See Designing the edit forms for more information on designing edit forms. To use it as default identify-tool, set identifyTool: \"FeatureForm\" in config.json . A layer is only identifyable with the FeatureForm plugin if corresponding Data resources and permissions are configured for the layer data source in the qwc-admin-gui . If a write permission is configured, the feature will be editable. Permissions \u00b6 The FeatureForm plugin relies on the qwc-data-service and the Data resource permissions, see Editing .","title":"Feature info"},{"location":"topics/FeatureInfo/#feature-info","text":"The feature info displays attributes for picked objects. The following options are available for displaying feature info: Identify plugin : display attributes in a table or custom HTML templates, querying the features via: WMS GetFeatureInfo Custom SQL queries FeatureForm plugin : display attributes in QGIS attribute forms, querying the features via the qwc-data-service You can configure the identify tool by setting identifyTool in config.json (or per-theme in themesConfig.json ). By default, it is triggered when clicking on a feature in the map. You can also configure the feature info as an explicit viewer tool by setting identifyTool: null and adding a menuItems or toolbarItems entry.","title":"Feature info"},{"location":"topics/FeatureInfo/#identify-plugin","text":"The identify plugin allows displaying feature attributes queried over WMS GetFeatureInfo or, by using the qwc-feature-info-service , from a custom SQL query. To use it as default identify-tool, set identifyTool: \"Identify\" in config.json . By default, results are displayed in a table. You can also display the results using a custom HTML template by using the qwc-feature-info-service . You can also omit empty attributes by setting skipEmptyFeatureAttributes: true in the theme configuration entry in themesConfig.json . Note: Use of the qwc-feature-info-service is also recommended if the qwc-data-service is used for editing, to ensure attribute values containing paths to uploaded files are properly converted to clickable hyperlinks.","title":"Identify plugin"},{"location":"topics/FeatureInfo/#querying-features-via-wms-getfeatureinfo","text":"Set whether a layer is identifyable in QGIS \u2192 Project Properties \u2192 Data sources . To highlight the geometry, make sure QGIS \u2192 Project Properties \u2192 QGIS Server \u2192 Add geometry to feature response is checked. You can suppress attributes globally by selecting \"Do not expose via WMS\" in QGIS \u2192 Layer properties \u2192 Fields. Alternatively, you can selectively restrict attributes using the qwc-admin-gui and assigning Attribute resource permissions as desired, see Permissions . If you use the qwc-feature-info-service , you can filter empty attributes service-side by setting skip_empty_attributes: true in the featureInfo service configuration in tenantConfig.json .","title":"Querying features via WMS GetFeatureInfo"},{"location":"topics/FeatureInfo/#querying-features-via-custom-sql-queries","text":"With the qwc-feature-info-service , you can query features directly from a database instead of over WMS GetFeatureInfo, by providing the featureInfo service configuration as described in HTML templates , but specifying a db_url and sql , for example \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) .","title":"Querying features via custom SQL queries"},{"location":"topics/FeatureInfo/#attribute-values-html-markup-hyperlinks-images","text":"In general, HTML markup in attribute values is preserved. For displaying interactive hyperlinks, the following options are supported: URLs in attribute text values with no HTML markup are automatically converted to an interactive hyperlink. Alternatively, you can enclose the URL in a HTML <a> tag in the attribute value. To open the linked page in an inline dialog within QWC, you can set the anchor target to :iframedialog:<dialogname>:<optkey>=<optval>:<optkey>=<optval>:... where the supported options are: w : Dialog width in pixels, default: 640 . h : Dialog height in pixels, default: 480 . title : Dialog window title, by default the translation string windows.<dialogname> . print : Whether to add a print icon for printing the dialog contents, default: true . dockable : Whether the dialog can be docked, default false . docked : Whether the dialog is initially docked, default false . detachable : Whether the dialog can be detached, default true . Example: <a href=\"https://example.com\" target=\":iframedialog:w=1024:h=768:title=Example\">Link text</a> For displaying images, the following options are supported: If replaceImageUrls: true is set in the Identify plugin configuration in config.json , attribute text values which contain exactly an URL to an image are converted to inline images. If you use the qwc-feature-info-service , you need to set transform_image_urls in the featureInfo service configuration in tenantConfig.json . Alternatively, you can add a <img> tag directly in the attribute value. This applies in particular to <a /> anchor and <img /> tags for displaying links an images in an attribute value.","title":"Attribute values: HTML markup, hyperlinks, images"},{"location":"topics/FeatureInfo/#client-side-attributes","text":"To compute derived attributes client-side, you can register an attribute calculator via window.qwc2.addIdentifyAttributeCalculator , exposed by the API plugin.","title":"Client side attributes"},{"location":"topics/FeatureInfo/#custom-export","text":"By default, the identify dialog in QWC allows you to export the results to json (QWC feature storage format), geojson (standard GeoJSON without QWC specific fields), csv (single CSV with all layers) or csv+zip (ZIP with one CSV per layer). You can define additional export functions registering an exporter via window.qwc2.addIdentifyExporter , exposed by the API plugin.","title":"Custom export"},{"location":"topics/FeatureInfo/#custom-html-templates","text":"With the qwc-feature-info-service , you can specify a custom HTML template for displaying the feature rather than the default table view. Mount the info templates folder into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info_templates:/info_templates Note: If mounting to another location than /info_templates , set the info_templates_path in the featureInfo service configuration in tenantConfig.json : { \"name\": \"featureInfo\", \"config\": { \"info_templates_path\": \"/<path>/\" } } Then, info templates will be searched by name as <info_templates_path>/<service_name>/<layername>.html . Alternatively, you can specify the template in the featureInfo service configuration in tenantConfig.json , either inline or as a path: { \"name\": \"featureInfo\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service_name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"info_template\": { <See below> } } ] } } ] } } Example info_template with inline template: \"info_template\": { \"type\": \"wms\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template with template path: \"info_template\": { \"type\": \"wms\", \"template_path\": \"/info_templates/template.html\" } Note: x and y are the info query coordinates. feature.<attr> renders the attr attribute value of the feature. The templates must be HTML fragments without html or body tags. The templates folder needs to be mounted into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info-templates:/info_templates:ro","title":"Custom HTML templates"},{"location":"topics/FeatureInfo/#localization","text":"The qwc-feature-info-service supports switching the runtime locale by setting the LOCALE environment variable, i.e.: qwc-feature-info-service: image: docker.io/sourcepole/qwc-feature-info-service:vXXXX.XX.XX environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/featureinfo' LOCALE: 'de_DE' In addition, the locale object is available in templates. This is particularly helpful for rendering locale-formatted numbers, i.e. <div>Area: {{ locale.format_string(\"%.2f\", area, True) }}</div>","title":"Localization"},{"location":"topics/FeatureInfo/#permissions","text":"If permissions_default_allow is set to true in tenantConfig.json , layers and attributes are queryable by default. To restrict the display of single layer attributes to specific roles, create a Layer and Attribute resource (latter as child of the created Layer resource) and create permissions assigning the desired roles to the Attribute resources. To restrict whether a layer can be queried, create a FeatureInfo service and FeatureInfo layer resource (latter as child of the created FeatureInfo service resource), and create permissions assigning the desired roles to the FeatureInfo layer resources.","title":"Permissions"},{"location":"topics/FeatureInfo/#feature-form-plugin","text":"The FeatureForm plugin displays picked features in a feature form as configured in QGIS \u2192 Layer properties \u2192 Attributes form . It queries the features via qwc-data-service , and hence only works for layers with postgresql data source. See Designing the edit forms for more information on designing edit forms. To use it as default identify-tool, set identifyTool: \"FeatureForm\" in config.json . A layer is only identifyable with the FeatureForm plugin if corresponding Data resources and permissions are configured for the layer data source in the qwc-admin-gui . If a write permission is configured, the feature will be editable.","title":"Feature form plugin"},{"location":"topics/FeatureInfo/#permissions_1","text":"The FeatureForm plugin relies on the qwc-data-service and the Data resource permissions, see Editing .","title":"Permissions"},{"location":"topics/Interfacing/","text":"Interfacing with other applications \u00b6 QWC offers a number of options to interface it with other applications. URL parameters \u00b6 The following parameters can appear in the URL of the QWC application: t : The active theme l : The layers in the map, see below. bl : The visible background layer e : The visible extent c : The center of the visible extent s : The current scale crs : The CRS of extent/center coordinates hc : If c is specified and hc is true or 1 , a marker is set at c when starting the application. Note: requires the StartupMarkerPlugin plugin to be active. ic : If c is specified and ic is true or 1 , a marker is set at c when starting the application. st : The search text hp , hf : Startup highlight parameters used in conjunction with the qwc-fulltext-search-service , see below. f : A filter configuration, see Map filtering . localConfig : Override the name of the loaded config file, i.e. to load myconfig.json instead of the default config.json , pass localConfig=myconfig . v : Which view to load: 2d for the 2D view, 3d for the fullscreen 3D view, 3d2d for the split-screen 3D/2D view. v3d : The 3D view, as camera_x,camera_y,camera_z,target_x,target_y,target_z,h , where camera is the camera position, target the scene target (\"look at\") position. If h is specified and non-zero, a first-person-view is assumed and h denotes the height above terrain of the camera. bl3d : The visible background layer in the 3D view. The l parameter lists all layers in the map (redlining and background layers) as a comma separated list of entries of the form <layername>[<transparency>]{<style>}! where - layername is the WMS name of a theme layer or group, or an external layer resource string in the format <wms|wfs>:<service_url>#<layername> for external layers, i.e. wms:https://wms.geo.admin.ch/?#ch.are.bauzonen . - <transparency> denotes the layer transparency, betwen 0 and 100. If the [<transparency>] portion is omitted, the layer is fully opaque. - <style> denotes the layer style name. If the {<style>} portion is omitted, the style named default will be used, if one exists, or the first available style otherwise. - ! denotes that the layer is invisible (i.e. unchecked in the layer tree). If omitted, the layer is visible. Note : If group name is specified instead of the layer name, QWC will automatically resolve this to all layer names contained in that group, and will apply transparency and visibility settings as specified for the group. The urlPositionFormat parameter in config.json determines whether the extent or the center and scale appears in the URL. The urlPositionCrs parameter in config.json determines the projection to use for the extent resp. center coordinates in the URL. By default the map projection of the current theme is used. If urlPositionCrs is equal to the map projection, the crs parameter is omitted in the URL. Highlight feature on startup \u00b6 If a search text passed via st results in a unique result, the viewer automatically zooms to this result on startup. If the search result does not provide a bounding box, the minScale defined in the searchOptions of the TopBar configuration in config.json is used. When using the qwc-fulltext-search-service , you can hightlight a feature on startup as follows: - Either specify hp=<facet_name>&hf=<filter_expr> - Or specify st=<filter_expr>&hp=<facet_name> See Fulltext search for more details. Launching external websites \u00b6 QWC menu entries can be configured to launch external websites as described in opening external websites . Javascript API \u00b6 The API plugin exposes many application actions via the window.qwc2 object and makes them accessible for external applications. See API plugin reference for more details. See api_examples.js for some concrete examples.","title":"Interfacing with applications"},{"location":"topics/Interfacing/#interfacing-with-other-applications","text":"QWC offers a number of options to interface it with other applications.","title":"Interfacing with other applications"},{"location":"topics/Interfacing/#url-parameters","text":"The following parameters can appear in the URL of the QWC application: t : The active theme l : The layers in the map, see below. bl : The visible background layer e : The visible extent c : The center of the visible extent s : The current scale crs : The CRS of extent/center coordinates hc : If c is specified and hc is true or 1 , a marker is set at c when starting the application. Note: requires the StartupMarkerPlugin plugin to be active. ic : If c is specified and ic is true or 1 , a marker is set at c when starting the application. st : The search text hp , hf : Startup highlight parameters used in conjunction with the qwc-fulltext-search-service , see below. f : A filter configuration, see Map filtering . localConfig : Override the name of the loaded config file, i.e. to load myconfig.json instead of the default config.json , pass localConfig=myconfig . v : Which view to load: 2d for the 2D view, 3d for the fullscreen 3D view, 3d2d for the split-screen 3D/2D view. v3d : The 3D view, as camera_x,camera_y,camera_z,target_x,target_y,target_z,h , where camera is the camera position, target the scene target (\"look at\") position. If h is specified and non-zero, a first-person-view is assumed and h denotes the height above terrain of the camera. bl3d : The visible background layer in the 3D view. The l parameter lists all layers in the map (redlining and background layers) as a comma separated list of entries of the form <layername>[<transparency>]{<style>}! where - layername is the WMS name of a theme layer or group, or an external layer resource string in the format <wms|wfs>:<service_url>#<layername> for external layers, i.e. wms:https://wms.geo.admin.ch/?#ch.are.bauzonen . - <transparency> denotes the layer transparency, betwen 0 and 100. If the [<transparency>] portion is omitted, the layer is fully opaque. - <style> denotes the layer style name. If the {<style>} portion is omitted, the style named default will be used, if one exists, or the first available style otherwise. - ! denotes that the layer is invisible (i.e. unchecked in the layer tree). If omitted, the layer is visible. Note : If group name is specified instead of the layer name, QWC will automatically resolve this to all layer names contained in that group, and will apply transparency and visibility settings as specified for the group. The urlPositionFormat parameter in config.json determines whether the extent or the center and scale appears in the URL. The urlPositionCrs parameter in config.json determines the projection to use for the extent resp. center coordinates in the URL. By default the map projection of the current theme is used. If urlPositionCrs is equal to the map projection, the crs parameter is omitted in the URL.","title":"URL parameters "},{"location":"topics/Interfacing/#highlight-feature-on-startup","text":"If a search text passed via st results in a unique result, the viewer automatically zooms to this result on startup. If the search result does not provide a bounding box, the minScale defined in the searchOptions of the TopBar configuration in config.json is used. When using the qwc-fulltext-search-service , you can hightlight a feature on startup as follows: - Either specify hp=<facet_name>&hf=<filter_expr> - Or specify st=<filter_expr>&hp=<facet_name> See Fulltext search for more details.","title":"Highlight feature on startup"},{"location":"topics/Interfacing/#launching-external-websites","text":"QWC menu entries can be configured to launch external websites as described in opening external websites .","title":"Launching external websites"},{"location":"topics/Interfacing/#javascript-api","text":"The API plugin exposes many application actions via the window.qwc2 object and makes them accessible for external applications. See API plugin reference for more details. See api_examples.js for some concrete examples.","title":"Javascript API"},{"location":"topics/LegendGraphics/","text":"Legend graphics \u00b6 By default, QWC will obtain the legend graphics of a layer from QGIS Server. Customizing the GetLegendGraphics request \u00b6 You can customize the GetLegendGraphics request by specifying additional query parameters in via extraLegendParameters in the theme configuration block . The list of supported query parameters is documented in the QGIS Server documentation . Providing custom legend images \u00b6 You can provide custom legend images by enabling the qwc-legend-service . Mount the legend folder into the qwc-legend-service container, i.e.: qwc-legend-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/legends:/legends Note: If mounting to another location than /legends , set the legend_images_path in the legend service configuration in tenantConfig.json : { \"name\": \"legend\", \"config\": { \"legend_images_path\": \"/<path>/\" } } Then, legend images will be searched for in this order (the first one found is used): A filename matching <legend_images_path>/<service_name>/<layername>_<style>_<suffix>.png A filename matching <legend_images_path>/<service_name>/<layername>_<suffix>.png A filename matching <legend_images_path>/<service_name>/default_<suffix>.png A filename matching <legend_images_path>/<service_name>/<layername>_<style>.png A filename matching <legend_images_path>/<service_name>/<layername>.png A filename matching <legend_images_path>/<resource_entry[legend_image]> A filename matching <legend_images_path>/<service_name>/default.png As base64, as set in <resource_entry[legend_image_base64]> Where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip . The suffix is passed by QWC to the legend service depending on the requested image type. resource_entry[legend_image] and resource_entry[legend_image_base64] are the legend_image resp. legend_image_base64 settings of a layer as configurd in the legend service resource configuration, for example: { \"name\": \"legend\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"legend_image\": \"edit_points.png\", \"legend_image_base64\": \"<base64_string>\" } ] } } ] } }","title":"Legend graphics"},{"location":"topics/LegendGraphics/#legend-graphics","text":"By default, QWC will obtain the legend graphics of a layer from QGIS Server.","title":"Legend graphics"},{"location":"topics/LegendGraphics/#customizing-the-getlegendgraphics-request","text":"You can customize the GetLegendGraphics request by specifying additional query parameters in via extraLegendParameters in the theme configuration block . The list of supported query parameters is documented in the QGIS Server documentation .","title":"Customizing the GetLegendGraphics request"},{"location":"topics/LegendGraphics/#providing-custom-legend-images","text":"You can provide custom legend images by enabling the qwc-legend-service . Mount the legend folder into the qwc-legend-service container, i.e.: qwc-legend-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/legends:/legends Note: If mounting to another location than /legends , set the legend_images_path in the legend service configuration in tenantConfig.json : { \"name\": \"legend\", \"config\": { \"legend_images_path\": \"/<path>/\" } } Then, legend images will be searched for in this order (the first one found is used): A filename matching <legend_images_path>/<service_name>/<layername>_<style>_<suffix>.png A filename matching <legend_images_path>/<service_name>/<layername>_<suffix>.png A filename matching <legend_images_path>/<service_name>/default_<suffix>.png A filename matching <legend_images_path>/<service_name>/<layername>_<style>.png A filename matching <legend_images_path>/<service_name>/<layername>.png A filename matching <legend_images_path>/<resource_entry[legend_image]> A filename matching <legend_images_path>/<service_name>/default.png As base64, as set in <resource_entry[legend_image_base64]> Where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip . The suffix is passed by QWC to the legend service depending on the requested image type. resource_entry[legend_image] and resource_entry[legend_image_base64] are the legend_image resp. legend_image_base64 settings of a layer as configurd in the legend service resource configuration, for example: { \"name\": \"legend\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"legend_image\": \"edit_points.png\", \"legend_image_base64\": \"<base64_string>\" } ] } } ] } }","title":"Providing custom legend images"},{"location":"topics/MapExport/","text":"Map export \u00b6 The MapExport plugin allows exporting a selected portion of the map to a variety of formats, as supported by the QGIS Server, among which: Image formats ( image/png , image/jpeg , image/tiff , ...) DXF ( application/dxf ) GeoPDF ( application/pdf ) See the MapExport plugin reference for a list of configuration options. In particular, the plugin supports specifying different export configurations for each format, i.e.: { \"name\": \"MapExport\", \"cfg\": { \"formatConfiguration\": { \"application/dxf\": [ {\"name\": \"default\"}, { \"name\": \"Geobau\", \"extraQuery\": \"LAYERS=dxfgeobau\", \"formatOptions\": \"MODE:NOSYMBOLOGY\" } ], \"image/png\": [ {\"name\": \"default\"}, {\"name\": \"With baselayer\", \"baseLayer\": \"SWISSIMAGE\"} ] } } }, For each format, if multiple configurations are defined, a combobox will be displayed to choose an export configuration. Export to image formats \u00b6 For image formats, it may be desired to override the background layer for the exported map. To this end, specify a baseLayer in the format configuration to the name of a background printLayer . For GeoTIFF image export to become available (image format image/tiff ), set up the wms_geotiff_output QGIS Server plugin : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/wms_geotiff_output:/usr/share/qgis/python/plugins/wms_geotiff_output:ro ... DXF export \u00b6 To enable the DXF export format, the desired layers are marked as Published in the QGIS Project Properties \u2192 QGIS Server \u2192 WFS/OAPIF. You can configure the DXF export by passing supported FORMAT_OPTIONS as formatOptions , i.e. \"formatOptions\": \"MODE:NOSYMBOLOGY;NO_MTEXT:1\" GeoPDF export \u00b6 GeoPDF export is available since QGIS Server 3.36. As opposed generating a PDF via GetPrint (as used by the Print -Plugin), the MapExport plugin generates the GeoPDF via GetMap and will return just the selected export area as a GeoPDF, without relying on any print layout defined in the QGIS project. You can configure the GeoPDF export by passing supported FORMAT_OPTIONS , look for PdfFormatOption in https://github.com/qgis/QGIS/blob/master/src/server/services/wms/qgswmsparameters.h .","title":"Map export"},{"location":"topics/MapExport/#map-export","text":"The MapExport plugin allows exporting a selected portion of the map to a variety of formats, as supported by the QGIS Server, among which: Image formats ( image/png , image/jpeg , image/tiff , ...) DXF ( application/dxf ) GeoPDF ( application/pdf ) See the MapExport plugin reference for a list of configuration options. In particular, the plugin supports specifying different export configurations for each format, i.e.: { \"name\": \"MapExport\", \"cfg\": { \"formatConfiguration\": { \"application/dxf\": [ {\"name\": \"default\"}, { \"name\": \"Geobau\", \"extraQuery\": \"LAYERS=dxfgeobau\", \"formatOptions\": \"MODE:NOSYMBOLOGY\" } ], \"image/png\": [ {\"name\": \"default\"}, {\"name\": \"With baselayer\", \"baseLayer\": \"SWISSIMAGE\"} ] } } }, For each format, if multiple configurations are defined, a combobox will be displayed to choose an export configuration.","title":"Map export"},{"location":"topics/MapExport/#export-to-image-formats","text":"For image formats, it may be desired to override the background layer for the exported map. To this end, specify a baseLayer in the format configuration to the name of a background printLayer . For GeoTIFF image export to become available (image format image/tiff ), set up the wms_geotiff_output QGIS Server plugin : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/wms_geotiff_output:/usr/share/qgis/python/plugins/wms_geotiff_output:ro ...","title":"Export to image formats"},{"location":"topics/MapExport/#dxf-export","text":"To enable the DXF export format, the desired layers are marked as Published in the QGIS Project Properties \u2192 QGIS Server \u2192 WFS/OAPIF. You can configure the DXF export by passing supported FORMAT_OPTIONS as formatOptions , i.e. \"formatOptions\": \"MODE:NOSYMBOLOGY;NO_MTEXT:1\"","title":"DXF export"},{"location":"topics/MapExport/#geopdf-export","text":"GeoPDF export is available since QGIS Server 3.36. As opposed generating a PDF via GetPrint (as used by the Print -Plugin), the MapExport plugin generates the GeoPDF via GetMap and will return just the selected export area as a GeoPDF, without relying on any print layout defined in the QGIS project. You can configure the GeoPDF export by passing supported FORMAT_OPTIONS , look for PdfFormatOption in https://github.com/qgis/QGIS/blob/master/src/server/services/wms/qgswmsparameters.h .","title":"GeoPDF export"},{"location":"topics/MapFilter/","text":"The MapFilter plugin allows filtering the map content via QGIS Server WMS FILTER. It can be configured to support predefined filters, geometry filters, temporal filters and custom filters, see MapFilter . Note : Geometry filters requires the filter_geom plugin from qwc-qgis-server-plugins , and the filter will currently only be applied to postgis layers. You can set predefined filter expressions for a theme item as follows: \"predefinedFilters\": [ { \"id\": \"<filter_id>\", \"title\": \"<filter_title>\", \"titlemsgid\": \"<filter_title_msgid>\", \"filter\": { \"<layer>\": <data_service_filter_expression> }, \"fields\": [ { \"id\": \"<value_id>\", \"title\": \"<value_title\">, \"titlemsgid\": \"<value_title_msgid>\", \"defaultValue\": <default_value>, \"inputConfig\": {<input_field_opts>} }, ... ] }, ... ] In the data service filter expression, you can use $<value_id>$ as the value placeholder. You can specify any common HTML input element properties in input_field_opts , i.e.: \"inputConfig\": {\"type\": \"number\", \"min\": 0} As a special case, you can define a dropdown list as follows: \"inputConfig\": {\"type\": \"select\", \"options\": [{\"value\": \"<value1>\", \"label|labelmsgid\": \"<label(msgid)1>\"}, ...]} It is also possible to pass a flat list as options, i.e. [\"<value1>\", \"<value2>\"] if the value is equal to the label. Example: \"predefinedFilters\": [{ \"id\": \"continent_filter\", \"title\": \"Continent\", \"filter\": { \"countries\": [\"continent\", \"=\", \"$continent$\"] }, \"fields\": [{ \"id\": \"continent\", \"title\": \"Name\", \"defaultValue\": \"\", \"inputConfig\": {\"type\": \"select\", \"options\": [\"Africa\", \"Asia\", \"Europe\", \"Oceania\"]} }] }] The data service filter expressions are of the form [\"<name>\", \"<op>\", <value>] , you can also specify complex expressions concatenated with and|or as follows: [[\"<name>\", \"<op>\", <value>],\"and|or\",[\"<name>\",\"<op>\",<value>],...] You can set the startup filter configuration by specifying a f URL-parameter with a JSON-serialized string as follows: f={\"<filter_id>\": {\"<field_id>\": <value>, ...}, ...} To control the temporal filter, the filter ID is __timefilter , and the field IDs are tstart and tend , with values an ISO date or datetime string ( YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS ). To control the spatial filter, the syntax is \"__geomfilter\": <GeoJSON polygon coodinates array> . To specify custom filters, the syntax is \"__custom\": [{\"title\": \"<title>\", \"layer\": \"<layername>\", \"expr\": <JSON filter expr>}, ...] . Whenever an startup filter value is specified, the filter is automatically enabled. Note : When specifying f , you should also specify t as the startup filter configuration needs to match the filters of the desired theme.","title":"Map filtering"},{"location":"topics/Mapinfo/","text":"Map info \u00b6 The map-info popup is provided by the MapInfoTooltip plugin. It displays a popup when right-clicking any position on the map. By default, it displayes the picked coordinates. If the qwc-elevation-service is enabled , it also returns the height at the picked position. If the qwc-mapinfo-service is enabled, queries can be configured in the service configuration in tenantConfig.json to return additional information. Example: { \"name\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_where\": \"type = 'Sovereign country'\", \"info_title\": \"Country\", \"info_id\": \"country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\", \"info_id\": \"type\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT abbrev, postal, subregion FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": [\"Abbreviation\", \"Postal Code\", \"Subregion\"], \"info_id\": \"details\" } ] } } If info_table , info_geom_col , info_display_col and optionally info_where are provided, the result obtained from SELECT {info_display_col} FROM {info_table} WHERE ST_contains({info_table}.{info_geom_col}, ST_SetSRID(ST_Point(:x, :y), :srid)) AND {info_where} LIMIT 1; will be returned and displayed in the map-info popup as with title as specified in info_title . If info_sql is provided, the result obtained from the specified query will be returned. Use the :x , :y and :srid placeholders. The info_id is required if you want to assign permissions to the mapinfo queries, see below. Permissions \u00b6 You can assign permissions to the mapinfo queries by creating and permitting Map info query resources, which shall be named according to the info_id of the query. If permissions_default_allow is true in tenatConfig.json , all mapinfo queries are permitted by default unless a permission is assigned to a specific role.","title":"Map info"},{"location":"topics/Mapinfo/#map-info","text":"The map-info popup is provided by the MapInfoTooltip plugin. It displays a popup when right-clicking any position on the map. By default, it displayes the picked coordinates. If the qwc-elevation-service is enabled , it also returns the height at the picked position. If the qwc-mapinfo-service is enabled, queries can be configured in the service configuration in tenantConfig.json to return additional information. Example: { \"name\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_where\": \"type = 'Sovereign country'\", \"info_title\": \"Country\", \"info_id\": \"country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\", \"info_id\": \"type\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT abbrev, postal, subregion FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": [\"Abbreviation\", \"Postal Code\", \"Subregion\"], \"info_id\": \"details\" } ] } } If info_table , info_geom_col , info_display_col and optionally info_where are provided, the result obtained from SELECT {info_display_col} FROM {info_table} WHERE ST_contains({info_table}.{info_geom_col}, ST_SetSRID(ST_Point(:x, :y), :srid)) AND {info_where} LIMIT 1; will be returned and displayed in the map-info popup as with title as specified in info_title . If info_sql is provided, the result obtained from the specified query will be returned. Use the :x , :y and :srid placeholders. The info_id is required if you want to assign permissions to the mapinfo queries, see below.","title":"Map info"},{"location":"topics/Mapinfo/#permissions","text":"You can assign permissions to the mapinfo queries by creating and permitting Map info query resources, which shall be named according to the info_id of the query. If permissions_default_allow is true in tenatConfig.json , all mapinfo queries are permitted by default unless a permission is assigned to a specific role.","title":"Permissions "},{"location":"topics/MultiTenancy/","text":"Multi-Tenancy \u00b6 Multi-tenancy allows serving multiple viewer configurations from a single installation. Specifically, it allows separate theme, viewer (plugins, appearance, etc.) and user/permissions configurations for each tenant. By default, qwc-docker includes a single default tenant, with the respective configuration file located at qwc-docker/volumes/config-in/default/tenantConfig.json . To configure additional tenants, the main steps are as follows: Define how the tenant name is extracted from the requests. Write a tenantConfig.json , specifying the location of the configuration database, the viewer configuration and viewer assets. Extracting the tenant name from the requests \u00b6 Multi-tenancy works by extracting a tenant name from the request URL and passing it to the respective QWC services. A typical setup is to run the application at the base address https://<hostname>/<tenant>/ The simplest approach is to extract the tenant name in a rewrite rule and set a corresponding header which will be read by the QWC services. This can be accomplished as follows: Define the name of the tenant header in qwc-docker/docker-compose.yml by setting the TENANT_HEADER environment variable in the qwc-service-variables block, i.e.: x-qwc-service-variables: &qwc-service-variables [...] TENANT_HEADER: Tenant Add rewrite rules to the api-gateway configuration file qwc-docker/api-gateway/nginx.conf , extracting the tenant name and setting the tenant header. For example server { listen 80; server_name localhost; proxy_redirect off; server_tokens off; location ~ ^/(?<t>tenant1|tenant2)/ { # Extract tenant proxy_set_header Tenant $t; # Set headers for original request host proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; location ~ ^/[^/]+/auth { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-auth-service:9090; } location ~ ^/[^/]+/ows { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-ogc-service:9090; } location ~ ^/[^/]+/api/v1/featureinfo { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-feature-info-service:9090; } # etc... location ~ ^/[^/]+/qwc_admin { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-admin-gui:9090; } # Place these last to give precedence to the other rules: # Redirect request without trailing slash location ~ ^(/[^/]+)$ { return 301 $scheme://$http_host$1/; } location ~ ^/[^/]+/ { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-map-viewer:9090; } } } Writing the tenantConfig.json \u00b6 The tenant configuration file tenantConfig.json is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json with <tenant> the name of the tenant. There are a number of configuration options which specifically affect the type of multi-tenancy setup, which is very flexible. Possible choices are: Shared vs. separate configuration database / admin backend Shared vs. separate viewer build Shared vs. separate qgs-resources tree etc... In general, you need to ensure that All the service URLs point to locations which are handled by the api-gateway configuration. All the paths refers to locations which are mounted in qwc-docker/docker-compose.yml . All database connection service names refer to connections which are defined qwc-docker/pg_service.conf . A minimal configuration for tenant tenant_name may look as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"tenant\": \"tenant_name\", \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/tenant_name/scan\" ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/tenant_name/\", \"ows_prefix\": \"/tenant_name/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/tenant_name/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/tenant_name/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/tenant_name/auth/\", \"ogc_service_url\": \"/tenant_name/ows/\", \"info_service_url\": \"/tenant_name/api/v1/featureinfo/\", ... } } ] } Notes : The database URL ( postgresql:///?service=qwc_configdb ) will determine whether a shared or sperate configuration database is used for each tenant. The qwc2_config_file , qwc2_index_file , qwc2_base_dir and qwc2_path paths will determine whether the viewer build/configuration is shared or separate for each tenant. To use a separate assets folder for each tenant, you can set an appropriate assetsPath in the qwc2_config_file of each tenant. The various service URLs in the mapViewer configuration and in other service configurations need to match what is expected in the api-gateway configuration. To separate the qgis projects per tenant (avoiding the <tenantname>/ prefix on the map names), you can proceed as follows: Create subdirectories for each tenant in volumes/qgs-resources , i.e. volumes/qgs-resources/<tenant_name> , Set default_qgis_server_url to http://qwc-qgis-server/ows/<tenant_name> , Set qgis_projects_base_dir to /data/<tenant_name> , Make sure to remove the /ows prefix from the url of any manually configured themes in themesConfig.json . tenantConfig template \u00b6 In particular when managing a large number of tenants, it can be tedious and error-prone to manage separate tenantConfig.json files for each tenant which might be nearly identical aside from the tenant name. To alleviate this, you can create a tenantConfig template, using the $tenant$ placeholder where appropriate, and point to this file in the respective tenantConfig.json files. The contents of the template will then be merged with the contents of tenantConfig.json , and occurence of $tenant$ in the template will be replaced with the current tenant name. For example, a minimal tenantConfig.json in qwc-docker/volumes/config-in/tenant_name/ could look as follows: { \"template\": \"../tenantConfig.template.json\", \"config\": { \"tenant\": \"tenant_name\" }, \"themesConfig\": \"./themesConfig.json\" } And the tenantConfig.template.json in qwc-docker/volumes/config-in/ as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/$tenant$/scan\" ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/\", \"ows_prefix\": \"/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/$tenant$/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/$tenant$/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/$tenant$/auth/\", \"ogc_service_url\": \"/$tenant$/ows/\", \"info_service_url\": \"/$tenant$/api/v1/featureinfo/\", ... } } ] } Note : A themesConfig entry in the tenantConfig template is resolved relative to the tenantConfig.template.json , and can be used to define common themes, background layers, etc. in the template. Multi-Tenancy with separate ConfigDB schemas \u00b6 If a separate DB config for each tenant is desired, as an alternative to configuring separate databases, it is possible to use a shared database with separate schemas. This can be achieved as follows: Manually create the desired schemas, and set the owner to qwc_admin . Configure a qwc-config-db-migrate container in docker-compose.yml with the QWC_CONFIG_SCHEMA environment variable set to the name of the created schema, and run the container to set up the config tables. Set qwc_config_schema to the name of the created schema in toplevel and relevant service configuration blocks in the tenantConfig.json ( mapViewer , adminGui , dbAuth ). Run the config-generator manually from a command line via curl -X POST \"http://localhost:5010/generate_configs?tenant=<tenantname>\" to generate the service configurations to ensure that a correct configuration is available for the Admin GUI and DB Auth (ensure that port 5010 of the qwc-config-service container is exposed to the docker host in docker-compose.yml ).","title":"Multi-tenancy"},{"location":"topics/MultiTenancy/#multi-tenancy","text":"Multi-tenancy allows serving multiple viewer configurations from a single installation. Specifically, it allows separate theme, viewer (plugins, appearance, etc.) and user/permissions configurations for each tenant. By default, qwc-docker includes a single default tenant, with the respective configuration file located at qwc-docker/volumes/config-in/default/tenantConfig.json . To configure additional tenants, the main steps are as follows: Define how the tenant name is extracted from the requests. Write a tenantConfig.json , specifying the location of the configuration database, the viewer configuration and viewer assets.","title":"Multi-Tenancy"},{"location":"topics/MultiTenancy/#extracting-the-tenant-name-from-the-requests","text":"Multi-tenancy works by extracting a tenant name from the request URL and passing it to the respective QWC services. A typical setup is to run the application at the base address https://<hostname>/<tenant>/ The simplest approach is to extract the tenant name in a rewrite rule and set a corresponding header which will be read by the QWC services. This can be accomplished as follows: Define the name of the tenant header in qwc-docker/docker-compose.yml by setting the TENANT_HEADER environment variable in the qwc-service-variables block, i.e.: x-qwc-service-variables: &qwc-service-variables [...] TENANT_HEADER: Tenant Add rewrite rules to the api-gateway configuration file qwc-docker/api-gateway/nginx.conf , extracting the tenant name and setting the tenant header. For example server { listen 80; server_name localhost; proxy_redirect off; server_tokens off; location ~ ^/(?<t>tenant1|tenant2)/ { # Extract tenant proxy_set_header Tenant $t; # Set headers for original request host proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; location ~ ^/[^/]+/auth { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-auth-service:9090; } location ~ ^/[^/]+/ows { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-ogc-service:9090; } location ~ ^/[^/]+/api/v1/featureinfo { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-feature-info-service:9090; } # etc... location ~ ^/[^/]+/qwc_admin { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-admin-gui:9090; } # Place these last to give precedence to the other rules: # Redirect request without trailing slash location ~ ^(/[^/]+)$ { return 301 $scheme://$http_host$1/; } location ~ ^/[^/]+/ { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-map-viewer:9090; } } }","title":"Extracting the tenant name from the requests"},{"location":"topics/MultiTenancy/#writing-the-tenantconfigjson","text":"The tenant configuration file tenantConfig.json is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json with <tenant> the name of the tenant. There are a number of configuration options which specifically affect the type of multi-tenancy setup, which is very flexible. Possible choices are: Shared vs. separate configuration database / admin backend Shared vs. separate viewer build Shared vs. separate qgs-resources tree etc... In general, you need to ensure that All the service URLs point to locations which are handled by the api-gateway configuration. All the paths refers to locations which are mounted in qwc-docker/docker-compose.yml . All database connection service names refer to connections which are defined qwc-docker/pg_service.conf . A minimal configuration for tenant tenant_name may look as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"tenant\": \"tenant_name\", \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/tenant_name/scan\" ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/tenant_name/\", \"ows_prefix\": \"/tenant_name/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/tenant_name/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/tenant_name/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/tenant_name/auth/\", \"ogc_service_url\": \"/tenant_name/ows/\", \"info_service_url\": \"/tenant_name/api/v1/featureinfo/\", ... } } ] } Notes : The database URL ( postgresql:///?service=qwc_configdb ) will determine whether a shared or sperate configuration database is used for each tenant. The qwc2_config_file , qwc2_index_file , qwc2_base_dir and qwc2_path paths will determine whether the viewer build/configuration is shared or separate for each tenant. To use a separate assets folder for each tenant, you can set an appropriate assetsPath in the qwc2_config_file of each tenant. The various service URLs in the mapViewer configuration and in other service configurations need to match what is expected in the api-gateway configuration. To separate the qgis projects per tenant (avoiding the <tenantname>/ prefix on the map names), you can proceed as follows: Create subdirectories for each tenant in volumes/qgs-resources , i.e. volumes/qgs-resources/<tenant_name> , Set default_qgis_server_url to http://qwc-qgis-server/ows/<tenant_name> , Set qgis_projects_base_dir to /data/<tenant_name> , Make sure to remove the /ows prefix from the url of any manually configured themes in themesConfig.json .","title":"Writing the tenantConfig.json"},{"location":"topics/MultiTenancy/#tenantconfig-template","text":"In particular when managing a large number of tenants, it can be tedious and error-prone to manage separate tenantConfig.json files for each tenant which might be nearly identical aside from the tenant name. To alleviate this, you can create a tenantConfig template, using the $tenant$ placeholder where appropriate, and point to this file in the respective tenantConfig.json files. The contents of the template will then be merged with the contents of tenantConfig.json , and occurence of $tenant$ in the template will be replaced with the current tenant name. For example, a minimal tenantConfig.json in qwc-docker/volumes/config-in/tenant_name/ could look as follows: { \"template\": \"../tenantConfig.template.json\", \"config\": { \"tenant\": \"tenant_name\" }, \"themesConfig\": \"./themesConfig.json\" } And the tenantConfig.template.json in qwc-docker/volumes/config-in/ as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/$tenant$/scan\" ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/\", \"ows_prefix\": \"/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/$tenant$/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/$tenant$/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/$tenant$/auth/\", \"ogc_service_url\": \"/$tenant$/ows/\", \"info_service_url\": \"/$tenant$/api/v1/featureinfo/\", ... } } ] } Note : A themesConfig entry in the tenantConfig template is resolved relative to the tenantConfig.template.json , and can be used to define common themes, background layers, etc. in the template.","title":"tenantConfig template"},{"location":"topics/MultiTenancy/#multi-tenancy-with-separate-configdb-schemas","text":"If a separate DB config for each tenant is desired, as an alternative to configuring separate databases, it is possible to use a shared database with separate schemas. This can be achieved as follows: Manually create the desired schemas, and set the owner to qwc_admin . Configure a qwc-config-db-migrate container in docker-compose.yml with the QWC_CONFIG_SCHEMA environment variable set to the name of the created schema, and run the container to set up the config tables. Set qwc_config_schema to the name of the created schema in toplevel and relevant service configuration blocks in the tenantConfig.json ( mapViewer , adminGui , dbAuth ). Run the config-generator manually from a command line via curl -X POST \"http://localhost:5010/generate_configs?tenant=<tenantname>\" to generate the service configurations to ensure that a correct configuration is available for the Admin GUI and DB Auth (ensure that port 5010 of the qwc-config-service container is exposed to the docker host in docker-compose.yml ).","title":"Multi-Tenancy with separate ConfigDB schemas"},{"location":"topics/Printing/","text":"Printing \u00b6 QWC supports printing to PDF via the QGIS Server GetPrint request. The basic steps are: Ensure the Print plugin is enabled in the QWC viewer. Create print layouts in the QGIS project as desired. The layouts must contain one Map element. Generate the themes configuration . The available print layouts will then appear in the QWC print plugin. You can limit the available print scales by setting printScales (or defaultPrintScales ) in the theme configuration to a list of scale denominators. If the list is empty, the print scale can be freely chosen. Similarly, you can limit the available print resolutions by setting printResolutions (or defaultPrintResolutions ) in the theme configuration to a list of resolutions. If the list is empty, the print resolution can be freely chosen. External WMS layers are automatically printed if the Print plugin config option printExternalLayers is true (default). Note that printing external WMTS layers is currently not supported by the QGIS Server. You can enable the option to generate a GeoPDF by setting the Print plugin config option allowGeoPdfExport to true . Note: This is only supported on QGIS Server 3.32 and newer. You can select output format for printing layout. Default values are application/pdf , image/jpeg , image/png and image/svg . You can restrict formats to one or more of them by setting the Print plugin config option formats to an array of these formats. See QGIS Server documentation for WMS GetPrint supported formats. Finally, you can configure which print layout is selected by default by setting defaultPrintLayout to the name of the desired print layout in the theme configuration . Some additional tasks include: Configuring the print background layers Configuring user labels Configuring the print grid Configuring layouts with legend Configuring atlas printing Configuring print background layers \u00b6 Background layers are handled purely client-side in QWC. There are two options for printing the background layer: The first option is to add a printLayer to the background layer entry when writing the themes configuration , i.e.: { ... \"backgroundLayers\": [ {\"name\": \"<background layer name>\", \"printLayer\": \"<qgis layer name or resource string>\"} ] } You can set printLayer to a QGIS layer name, or to a resource string (i.e. wms:<baseurl>#<layername> ). A QGIS layer marked as printLayer will be filtered out from the QWC layer tree, and hence will not be displayed in QWC. You can also set printLayer to a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<QGis layer name>\"}] , ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. This approach allows i.e. using a WMTS background layer in the web client for higher performance, and using a WMS background layer when printing for higher quality/resolution. The second option is to use WMS background layers, which are automatically printed as external layers. User labels \u00b6 User labels appear as free-text input fields in the QWC print dialog. To configure user labels, it is sufficient to add item id s to layout label items in the print layout. The specified id will appear as input field label in the QWC print dialog. Note : Label id s beginning with __ (two underscore characters) are ignored as user labels by QWC. You can can customize the input field (max length, number of rows) by setting the printLabelConfig in the theme configuration . Also, in the theme configuration, you can also set: printLabelForSearchResult : The id of the label to which to write the current search result label, if any. printLabelForAttribution : The id of the label to which to write the current map attribution text, if any. If you set the Print plugin config option hideAutopopulatedFields to true , these labels will not be shown in the print dialog, otherwise they will be displayed as read-only fields. Print grid \u00b6 In alternative to configuring a grid directly in the print layout, one can also define a printGrid configuration in the theme configuration . For example \"printGrid\": { \"s\": 1000, \"x\": 500, \"y\": 500, \"s\": 2000, \"y\": 1000, \"y\": 1000, \"s\": 10000, \"y\": 5000, \"y\": 5000, } will print a 500x500 (map units) grid for scales up to 1:1000 , a 1000x1000 grid for scales up to 1:2000 , etc. Layouts with legend \u00b6 The QWC print dialog will expose a toggle switch to enable the legend in the print output for layout <layout_name> if the QGIS project contains a second layout named <layout_name>_legend . The layout with the _legend suffix is expected to contain a legend item. Atlas printing \u00b6 To enable atlas printing in QWC, configure the QGIS project as follows: Check the Generate an atlas checkbox in the desired layout in QGIS layout designer \u2192 Atlas \u2192 Atlas settings, selecting the coverage layer as desired. In the layout map item properties, check Controlled by Atlas . In the Project properties \u2192 QGIS Server, set Maximum features for Atlas print requests to the desired value. In the Project properties \u2192 QGIS Server, check Add geometry to feature response . QWC will then display a feature picked in the print dialog which will allow picking the desired atlas features, and QGIS Server will generate a multi-page PDF accordingly. Layout templates \u00b6 The QGIS Server print templates plugin allows providing a common set of print layouts to projects to avoid having to manage potentially identical print layouts multiple times in the individual projects. To configure it in qwc-docker , proceed as follows: Download the QGIS Server print templates plugin , i.e. to volumes/qgis-server-plugins/print_templates , choose a print layout folder (i.e. volumes/print-layouts ) and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> environment: FCGID_EXTRA_ENV: 'PRINT_LAYOUT_DIR' PRINT_LAYOUT_DIR: '/layouts' volumes: - ./volumes/qgis-server-plugins/print_templates:/usr/share/qgis/python/plugins/print_templates:ro - ./volumes/print-layouts:/layouts:ro ... Mount the print layout folder also into the config generator container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<TAG> volumes: - ./volumes/print-layouts:/layouts:ro ... Extend the config generator configuration in tenantConfig.json by specifying the location of the print layouts dir: { \"config\": { \"qgis_print_layouts_dir\": \"/layouts\" ... } ... } In a multi-tenant environment, to provide separate print layouts for each tenant, organize the layouts in separate directories for each tenant below qgis_print_layouts_dir , and specify qgis_print_layouts_tenant_subdir in the respective tenantConfig.json to point to the desired subdir path. Finally, place your *.qpt print layouts in volumes/print-layouts and run the ConfigGenerator.","title":"Printing"},{"location":"topics/Printing/#printing","text":"QWC supports printing to PDF via the QGIS Server GetPrint request. The basic steps are: Ensure the Print plugin is enabled in the QWC viewer. Create print layouts in the QGIS project as desired. The layouts must contain one Map element. Generate the themes configuration . The available print layouts will then appear in the QWC print plugin. You can limit the available print scales by setting printScales (or defaultPrintScales ) in the theme configuration to a list of scale denominators. If the list is empty, the print scale can be freely chosen. Similarly, you can limit the available print resolutions by setting printResolutions (or defaultPrintResolutions ) in the theme configuration to a list of resolutions. If the list is empty, the print resolution can be freely chosen. External WMS layers are automatically printed if the Print plugin config option printExternalLayers is true (default). Note that printing external WMTS layers is currently not supported by the QGIS Server. You can enable the option to generate a GeoPDF by setting the Print plugin config option allowGeoPdfExport to true . Note: This is only supported on QGIS Server 3.32 and newer. You can select output format for printing layout. Default values are application/pdf , image/jpeg , image/png and image/svg . You can restrict formats to one or more of them by setting the Print plugin config option formats to an array of these formats. See QGIS Server documentation for WMS GetPrint supported formats. Finally, you can configure which print layout is selected by default by setting defaultPrintLayout to the name of the desired print layout in the theme configuration . Some additional tasks include: Configuring the print background layers Configuring user labels Configuring the print grid Configuring layouts with legend Configuring atlas printing","title":"Printing"},{"location":"topics/Printing/#configuring-print-background-layers","text":"Background layers are handled purely client-side in QWC. There are two options for printing the background layer: The first option is to add a printLayer to the background layer entry when writing the themes configuration , i.e.: { ... \"backgroundLayers\": [ {\"name\": \"<background layer name>\", \"printLayer\": \"<qgis layer name or resource string>\"} ] } You can set printLayer to a QGIS layer name, or to a resource string (i.e. wms:<baseurl>#<layername> ). A QGIS layer marked as printLayer will be filtered out from the QWC layer tree, and hence will not be displayed in QWC. You can also set printLayer to a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<QGis layer name>\"}] , ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. This approach allows i.e. using a WMTS background layer in the web client for higher performance, and using a WMS background layer when printing for higher quality/resolution. The second option is to use WMS background layers, which are automatically printed as external layers.","title":"Configuring print background layers "},{"location":"topics/Printing/#user-labels","text":"User labels appear as free-text input fields in the QWC print dialog. To configure user labels, it is sufficient to add item id s to layout label items in the print layout. The specified id will appear as input field label in the QWC print dialog. Note : Label id s beginning with __ (two underscore characters) are ignored as user labels by QWC. You can can customize the input field (max length, number of rows) by setting the printLabelConfig in the theme configuration . Also, in the theme configuration, you can also set: printLabelForSearchResult : The id of the label to which to write the current search result label, if any. printLabelForAttribution : The id of the label to which to write the current map attribution text, if any. If you set the Print plugin config option hideAutopopulatedFields to true , these labels will not be shown in the print dialog, otherwise they will be displayed as read-only fields.","title":"User labels "},{"location":"topics/Printing/#print-grid","text":"In alternative to configuring a grid directly in the print layout, one can also define a printGrid configuration in the theme configuration . For example \"printGrid\": { \"s\": 1000, \"x\": 500, \"y\": 500, \"s\": 2000, \"y\": 1000, \"y\": 1000, \"s\": 10000, \"y\": 5000, \"y\": 5000, } will print a 500x500 (map units) grid for scales up to 1:1000 , a 1000x1000 grid for scales up to 1:2000 , etc.","title":"Print grid "},{"location":"topics/Printing/#layouts-with-legend","text":"The QWC print dialog will expose a toggle switch to enable the legend in the print output for layout <layout_name> if the QGIS project contains a second layout named <layout_name>_legend . The layout with the _legend suffix is expected to contain a legend item.","title":"Layouts with legend "},{"location":"topics/Printing/#atlas-printing","text":"To enable atlas printing in QWC, configure the QGIS project as follows: Check the Generate an atlas checkbox in the desired layout in QGIS layout designer \u2192 Atlas \u2192 Atlas settings, selecting the coverage layer as desired. In the layout map item properties, check Controlled by Atlas . In the Project properties \u2192 QGIS Server, set Maximum features for Atlas print requests to the desired value. In the Project properties \u2192 QGIS Server, check Add geometry to feature response . QWC will then display a feature picked in the print dialog which will allow picking the desired atlas features, and QGIS Server will generate a multi-page PDF accordingly.","title":"Atlas printing "},{"location":"topics/Printing/#layout-templates","text":"The QGIS Server print templates plugin allows providing a common set of print layouts to projects to avoid having to manage potentially identical print layouts multiple times in the individual projects. To configure it in qwc-docker , proceed as follows: Download the QGIS Server print templates plugin , i.e. to volumes/qgis-server-plugins/print_templates , choose a print layout folder (i.e. volumes/print-layouts ) and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> environment: FCGID_EXTRA_ENV: 'PRINT_LAYOUT_DIR' PRINT_LAYOUT_DIR: '/layouts' volumes: - ./volumes/qgis-server-plugins/print_templates:/usr/share/qgis/python/plugins/print_templates:ro - ./volumes/print-layouts:/layouts:ro ... Mount the print layout folder also into the config generator container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<TAG> volumes: - ./volumes/print-layouts:/layouts:ro ... Extend the config generator configuration in tenantConfig.json by specifying the location of the print layouts dir: { \"config\": { \"qgis_print_layouts_dir\": \"/layouts\" ... } ... } In a multi-tenant environment, to provide separate print layouts for each tenant, organize the layouts in separate directories for each tenant below qgis_print_layouts_dir , and specify qgis_print_layouts_tenant_subdir in the respective tenantConfig.json to point to the desired subdir path. Finally, place your *.qpt print layouts in volumes/print-layouts and run the ConfigGenerator.","title":"Layout templates "},{"location":"topics/Reports/","text":"Reports \u00b6 QWC, complemented with the qwc-document-service , provides the possibility to generate reports for features of layers whose datasource is a PostgreSQL table, based on Jasper report templates. Setting up the document-service \u00b6 As a first step, set up a qwc-document-service , placing your report templates below the report_dir . Read the qwc-document-service README for more information on setting up the service and to understand how to prepare and configure your report templates. When using qwc-docker , you can configure the container as follows: qwc-document-service: image: docker.io/sourcepole/qwc-document-service:<tag> environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/document' # FLASK_DEBUG: 1 volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/reports:/reports - ./volumes/reports/fonts:/srv/qwc_service/fonts - ./volumes/config:/srv/qwc_service/config:ro In addition, to ensure that the qwc-config-generator automatically picks up existing reports when generating the document service configuration, ensure that the reports directory is also mounted in its container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<tag> ... volumes: ... - ./volumes/reports:/reports Configuring the web client \u00b6 As a second step, associate the report templates to theme layers to expose the reports in the web client. This is done providing a featureReport entry in a theme item in themesConfig.json as follows: \"featureReport\": { \"<layer_name1>\": \"<template_name>\", \"<layer_name2>\": [ { \"title\": \"<title>\", \"template\": \"<template_name>\", \"single_report\": <false|true>, \"format\": \"<pdf|docx|...>\" }, ... ], ... } The first case example displays the shorthand syntax for assigning one report template to one layer. The second example displays the syntax for assigning one or more templates to one layer, supporting the following extra options: single_report : If true , one report will be compiled and a list of feature IDs will be passed in the report params. If false , one report will be compiled for each feature ID, and the result will be a multi-page report (one report per feature). Default is false . format : The report format, one of pdf , html , csv , docx , ods , odt , pptx , rtf , xlsx , xml . Default is pdf . The web client will then display a link to download the report(s) for one or more selected features in the identify results dialog. In addition, the Reports plugin provides a convenient interface to directly select a desired report layer and download the reports for one or more, or all, features of the selected layer. Example \u00b6 Here is an example to configure a report for a layer, whose datasource is a PostgreSQL table, assuming a qwc-docker setup. Create a Jasper report template using Jasper Studio with the desired layout. To include data from the PostgreSQL datasource in your report, add a Postgres Data Adapter, using the name of the PG service definition in your pg_service.conf as the name of the data adapter. Create a report parameter, though which the document-service will pass the primary key of report feature. Define the data query in the Dataset and Query Dialog , in the form SELECT <fields> FROM <table_name> WHERE <pk_column> = $P{<FEATURE_PARAM_NAME>} If you need a more complex query, you'll need to explicitly specify the table_name , pk_column and FEATURE_PARAM_NAME in the document template resource configuration, see below. If you want to include external resources (images, etc), set the resource path relative to the $P{REPORT_DIR} path as described in the README . Save your report to the document service report dir, i.e. as volumes/reports/MyReport.jrxml . If you included any custom fonts in your report, place these in ttf format in volumes/reports/fonts respecting the naming convention described in the README . If your report requires third party java classes, you can mount the corresponding JARs as volumes to /srv/qwc_service/libs/ . Associate the report with a layer via themesConfig.json by adding the following to the desired theme configuration entry: \"featureReport\": { \"my_layer\": \"MyReport\" } Note : MyReport here denotes the relative path of MyReport.jrxml below volumes/reports , without the .jrxml extension. If the name of the data adapter does not match the name of a PG service definition, or if your report contains a complex data query SQL, from which the dataset table name, primary key column of feature parameter name cannot be trivially parsed, then you need to explicitly define these document_templates in the resources block of the document configuration section in tenantConfig.json , for instance: { \"name\": \"document\", \"config\": {...}, \"resources\": { \"document_templates\": [ { \"template\": \"MyReport\", \"datasource\": \"<pg_service_name>\", \"table\": \"<table_name>\", \"primary_key\": \"<primary_key_column_name>\", \"parameter_name\": \"<report_parameter_name>\" } ] } } Generate the document service configuration by running the ConfigGenerator. It will automatically pick up all *.jrxml files and generate corresponding document_templates resources, complementing any manually defined resources. Test your report, either through the QWC interface, or via a direct call to the document service, i.e.: http://localhost:8088/api/v1/document/MyReport.pdf?feature=<fid> Permissions \u00b6 Report permissions are managed through the Document template resources and permissions. They are allowed by default if permissions_default_allow is true in the tenantConfig.json . Permissions / restrictions will by default also be applied to any reports included as subreports by a parent report. If you set permit_subreports to true in the document service config in tenantConfig.json , subreports will always be permitted if the parent report is permitted. Debugging \u00b6 Check the logs of the qwc-document-service (in particular with FLASK_DEBUG: 1 ) to get detailed information about the report generation. Enable additional Java logging by mounting a logging.properties of the form # Keep global logs at WARNING level to reduce noise .level=WARNING # Enable detailed logging only for JasperReports net.sf.jasperreports.level=ALL handlers=java.util.logging.ConsoleHandler # Configure ConsoleHandler java.util.logging.ConsoleHandler.level=ALL java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter to /srv/qwc_service/libs/logging.properties , i.e.: ./volumes/logging.properties:/srv/qwc_service/libs/logging.properties:ro","title":"Reports"},{"location":"topics/Reports/#reports","text":"QWC, complemented with the qwc-document-service , provides the possibility to generate reports for features of layers whose datasource is a PostgreSQL table, based on Jasper report templates.","title":"Reports"},{"location":"topics/Reports/#setting-up-the-document-service","text":"As a first step, set up a qwc-document-service , placing your report templates below the report_dir . Read the qwc-document-service README for more information on setting up the service and to understand how to prepare and configure your report templates. When using qwc-docker , you can configure the container as follows: qwc-document-service: image: docker.io/sourcepole/qwc-document-service:<tag> environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/document' # FLASK_DEBUG: 1 volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/reports:/reports - ./volumes/reports/fonts:/srv/qwc_service/fonts - ./volumes/config:/srv/qwc_service/config:ro In addition, to ensure that the qwc-config-generator automatically picks up existing reports when generating the document service configuration, ensure that the reports directory is also mounted in its container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<tag> ... volumes: ... - ./volumes/reports:/reports","title":"Setting up the document-service"},{"location":"topics/Reports/#configuring-the-web-client","text":"As a second step, associate the report templates to theme layers to expose the reports in the web client. This is done providing a featureReport entry in a theme item in themesConfig.json as follows: \"featureReport\": { \"<layer_name1>\": \"<template_name>\", \"<layer_name2>\": [ { \"title\": \"<title>\", \"template\": \"<template_name>\", \"single_report\": <false|true>, \"format\": \"<pdf|docx|...>\" }, ... ], ... } The first case example displays the shorthand syntax for assigning one report template to one layer. The second example displays the syntax for assigning one or more templates to one layer, supporting the following extra options: single_report : If true , one report will be compiled and a list of feature IDs will be passed in the report params. If false , one report will be compiled for each feature ID, and the result will be a multi-page report (one report per feature). Default is false . format : The report format, one of pdf , html , csv , docx , ods , odt , pptx , rtf , xlsx , xml . Default is pdf . The web client will then display a link to download the report(s) for one or more selected features in the identify results dialog. In addition, the Reports plugin provides a convenient interface to directly select a desired report layer and download the reports for one or more, or all, features of the selected layer.","title":"Configuring the web client"},{"location":"topics/Reports/#example","text":"Here is an example to configure a report for a layer, whose datasource is a PostgreSQL table, assuming a qwc-docker setup. Create a Jasper report template using Jasper Studio with the desired layout. To include data from the PostgreSQL datasource in your report, add a Postgres Data Adapter, using the name of the PG service definition in your pg_service.conf as the name of the data adapter. Create a report parameter, though which the document-service will pass the primary key of report feature. Define the data query in the Dataset and Query Dialog , in the form SELECT <fields> FROM <table_name> WHERE <pk_column> = $P{<FEATURE_PARAM_NAME>} If you need a more complex query, you'll need to explicitly specify the table_name , pk_column and FEATURE_PARAM_NAME in the document template resource configuration, see below. If you want to include external resources (images, etc), set the resource path relative to the $P{REPORT_DIR} path as described in the README . Save your report to the document service report dir, i.e. as volumes/reports/MyReport.jrxml . If you included any custom fonts in your report, place these in ttf format in volumes/reports/fonts respecting the naming convention described in the README . If your report requires third party java classes, you can mount the corresponding JARs as volumes to /srv/qwc_service/libs/ . Associate the report with a layer via themesConfig.json by adding the following to the desired theme configuration entry: \"featureReport\": { \"my_layer\": \"MyReport\" } Note : MyReport here denotes the relative path of MyReport.jrxml below volumes/reports , without the .jrxml extension. If the name of the data adapter does not match the name of a PG service definition, or if your report contains a complex data query SQL, from which the dataset table name, primary key column of feature parameter name cannot be trivially parsed, then you need to explicitly define these document_templates in the resources block of the document configuration section in tenantConfig.json , for instance: { \"name\": \"document\", \"config\": {...}, \"resources\": { \"document_templates\": [ { \"template\": \"MyReport\", \"datasource\": \"<pg_service_name>\", \"table\": \"<table_name>\", \"primary_key\": \"<primary_key_column_name>\", \"parameter_name\": \"<report_parameter_name>\" } ] } } Generate the document service configuration by running the ConfigGenerator. It will automatically pick up all *.jrxml files and generate corresponding document_templates resources, complementing any manually defined resources. Test your report, either through the QWC interface, or via a direct call to the document service, i.e.: http://localhost:8088/api/v1/document/MyReport.pdf?feature=<fid>","title":"Example"},{"location":"topics/Reports/#permissions","text":"Report permissions are managed through the Document template resources and permissions. They are allowed by default if permissions_default_allow is true in the tenantConfig.json . Permissions / restrictions will by default also be applied to any reports included as subreports by a parent report. If you set permit_subreports to true in the document service config in tenantConfig.json , subreports will always be permitted if the parent report is permitted.","title":"Permissions"},{"location":"topics/Reports/#debugging","text":"Check the logs of the qwc-document-service (in particular with FLASK_DEBUG: 1 ) to get detailed information about the report generation. Enable additional Java logging by mounting a logging.properties of the form # Keep global logs at WARNING level to reduce noise .level=WARNING # Enable detailed logging only for JasperReports net.sf.jasperreports.level=ALL handlers=java.util.logging.ConsoleHandler # Configure ConsoleHandler java.util.logging.ConsoleHandler.level=ALL java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter to /srv/qwc_service/libs/logging.properties , i.e.: ./volumes/logging.properties:/srv/qwc_service/libs/logging.properties:ro","title":"Debugging"},{"location":"topics/Search/","text":"Search \u00b6 QWC can be configured to use arbitrary custom search providers. In addition, the qwc-fulltext-search-service provided by the qwc-services ecosystem can be used. Adding search providers \u00b6 Search providers can be defined as follows: In an external script loaded at runtime, defined i.e. in static/assets/searchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This script file needs to be include in index.html : <script type=\"text/javascript\" src=\"assets/searchProviders.js\" ></script> Built-in in a custom QWC build, i.e. defined in js/SearchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This file needs to be imported into the application, i.e. via import './SearchProviders.js'; in js/appConfig.js . Built-in search providers are compiled into the application bundle and avoid the need for an extra resource to be loaded on application startup. The downside is that you need to rebuild QWC to add/modify search providers. The format of ProviderDefinition is { label: \"<label>\", // Provider label (displayed in provider selection menu) labelmsgid: \"<msgid>\", // Translateable label message ID, instead of `label` onSearch: function(searchText, searchParams, callback, axios) => { const results = []; // See below /* Populate results... */ callback({results: results}); }, getResultGeometry: function(resultItem, callback, axios) => { /* Retreive geometry... */ // resultItem is a search result entry as returned by onSearch, which provides the context for retreiving the geometry const geometry = \"<wktString>\"; // or const geometry = {<GeoJSON geometry>}; const crs = \"EPSG:XXXX\"; const hidemarker = <boolean>; // Whether to suppress displaying a search marker on top of the search geometry const bbox = [xmin, xmax, ymin, ymax]; // Optional, if null, the bbox of the resultItem will be used const center = [x, y]; // Optional, if null, the center of the resultItem will be used callback({geometry: geometry, crs: crs, hidemarker: hidemarker, bbox: bbox, center: center}); // or callback({feature: geojson_feature, crs: crs, hidemarker: hidemarker, bbox: bbox, center: center}); }, handlesGeomFilter: <boolean>, // Hint whether provider will completely filter the results on provider side and that no client-side filtering is necessary getLayerDefinition: function(resultItem, callback, axios) => { // layer definition, in the same format as a \"sublayers\" entry in themes.json const layer = {<layer_definition>}; callback(layer); } } } Notes: The format of searchParams is as follows: Field Description { displaycrs: \"EPSG:XXXX\", Currently selected mouse coordinate display CRS. mapcrs: \"EPSG:XXXX\", The current map CRS. lang: \"<code>\", The current application language, i.e. en-US or en. cfgParams: <params>, Additional parameters passed in the theme search provider configuration, see below. limit: <number>, Result count limit. activeLayers: [\"<layername>\", ...], List of active layers in the map. filterBBox: [xmin, ymin, xmax, ymax]|null, A filter bbox, in mapcrs, the search component may pass to the provider to narrow down the results. filterPoly: [[x0, y0], [x1, y1], ...]|null A filter polygon, in mapcrs, the search component may pass to the provider to narrow down the results. } axios is passed for convenience so that providers can use the compiled-in axios library for network requests. onSearch is expected to return a list of search category results structured as follows: Field Description { id: \"<categoryid>\", Unique category ID. title: \"<display_title>\", Text to display as group title in the search results. titlemsgid: \"<display_title_msgid>\", Translation message id for group title, instead of title . resultCount: <result_count>, Optional: true result count (i.e. not limited to the limit specified in searchParams). priority: <priority_nr>, Optional: search result group priority. Groups with higher priority are displayed first in the list. type: SearchResultType.{PLACE|THEMELAYER|EXTERNALLAYER}, Specifies the type of results. Defaults to SearchResultType.PLACE . items: [ { Format for PLACE result: id: \"<item_id>\", Unique item ID. text: \"<display_text>\", Text to display as search result. label: \"<map_marker_text>\", Optional, text to show next to the position marker on the map instead of text . x: <x>, X coordinate of result. y: <y>, Y coordinate of result crs: <crs>, CRS of result coordinates and bbox. If not specified, the current map crs is assumed. bbox: [xmin, ymin, xmax, ymax], Bounding box of result (if non-empty, map will zoom to this extent when selecting result). geometry: <GeoJSON geometry>, Optional, result geometry. Geometries may also be fetched separately via getResultGeometry . thumbnail: \"<thumbnail_url>\", Optional: thumbnail image to display next to the search result text in the result list. externalLink: \"<url>\", Optional: a url to an external resource. If specified, a info icon is displayed in the result entry to open the link. target: \"<target>\" Optional: external link target. Can be _blank (default) or iframe . }, { Format for THEMELAYER or EXTERNALLAYER result: id: \"<item_id>\", Unique item ID. text: \"<display_text>\", Text to display as search result. layer: {<layer_definition>}, Optional, layer definition:., in the same format as a \"sublayers\" entry in themes.json. * For THEMELAYER results, the entry should be in the same format as a sublayer entry of a theme layer in themes.json . * For EXTERNALLAYER results, the entry can be of the form {resource: \"<resource_string>} or a full layer definition. If layer is not specified, the layer definition will be queried via getLayerDefinition . info: <bool>, Optional: Whether to display a info icon in the result list. The info is read from layer.abstract . thumbnail: \"<thumbnail_url>\", Optional: thumbnail image to display next to the search result text in the result list. sublayers: [{<sublayer>}, ...] Optional: list of sublayers, in the same format as the format parent result item (i.e. {id: \"<item_id>\", text: \"<display_text>\", layer: {<layer>}, ...} ). } ] } Consult static/assets/searchProviders.js for a full example. Filtering \u00b6 When using the SearchBox search component with allowSearchFilters: true passed in the TopBar searchOptions , you a filter menu will be displayed allowing to restrict the search area. If the provider does not fully handle the filter geometry internally ( handlesGeomFilter != true ), client-side filtering will be performed as follows: Polygon intersection test if the result has a geometry field with a Polygon geometry Polygon intersection test if the result has a bbox field Point-in-polygon test using the results x and y point coordinates You can also set a predefined list of filter areas by setting searchFilterRegions in config.json (or per-theme in themesConfig.json ) as follows: \"searchFilterRegions\": [ { \"name\": \"<Group name>\", \"items\": [ { \"name\": \"<Name>\", \"crs\": \"<EPSG:XXXX>\", \"coordinates\": [[x0, y0], [x1, y1], ...] }, ... ] }, ... ] Alternatively, you can also set searchFilterRegions to an URL returning a JSON document structured like in the above example. Configuring theme search providers \u00b6 For each theme item in themesConfig.json , you can define a list of search providers to enable for the theme as follows: Field Description searchProviders: [ \"<providerkey1>\", Simple form. { Complex form with custom params: \"provider\": \"<providerkey2>\", Provider key. \"key\": \"<key>\", Optional: key to disambiguate multiple provider configurations of the same provider type (i.e. multiple qgis provider configurations). \"label\": \"<label>\", Optional: provider label (displayed in provider selection menu). If not specified, the label/labelmsgid from the provider definition is used. \"labelmsgid\": \"<msgid>\", Optional: translateable label message ID, instead of label . \"params\": {...} Additional params passed to the provider onSearch function as searchParams.cfgParams . } ] Note: The QWC stock application (also used by the qwc-map-viewer docker image) includes four providers by default: coordinates , nominatim (OpenStreetMap location search, see below ), qgis (see below ) and fulltext (see below ). Configuring the nominatim (OpenStreetMap) location search \u00b6 The nominatim search is build-in and in it's simplest form can be configured by just specifying nominatim in the searchProviders . You can customize the search by passing parameters described in the Nominatim API in the provider params, i.e. to restrict the results to Switzerland and Germany you can write: { \"provider\": \"nominatim\", \"params\": { \"countrycodes\": \"de,ch\" } } Configuring the QGIS feature search \u00b6 The QGIS feature search relies on WMS GetFeatureInfo with the FILTER parameter to search features of layers which are part of the theme WMS. It is enabled via the qgis search provider, which is part of the QWC stock application. Note : Make sure the QGIS Project is configured to return geometries with the feature info responses ( Project \u2192 Properties \u2192 QGIS Server \u2192 Add geometry to feature response ). In it's simples form, you can configure the theme search provider entry as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"<search name>\", \"expression\": { \"<layername1>\": \"<expression>\", \"<layername2>\": \"<expression>\" } } } where expression is a WMS GetFeatureInfo FILTER expression, for example \"\\\"name\\\" ILIKE '%$TEXT$%'\" . $TEXT$ will be replaced by the search text entered by the user, name corresponds to a field name of the specified layer. A more complex form, useable through the FeatureSearch plugin, allows defining a field configuration for multiple input fields. A full example is as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"Person search\", \"expression\": { \"persons\": \"\\\"name\\\" ILIKE '%$NAME$%' AND \\\"age\\\" >= $AGE$ AND \\\"gender\\\" = '$GENDER$'\" }, \"fields\": { \"NAME\": {\"label\": \"Name\", \"type\": \"text\"}, \"AGE\": {\"label\": \"Min. age\", \"type\": \"number\", \"options\": {\"min\": 0}}, \"GENDER\": {\"label\": \"Gender\", \"type\": \"select\", \"options\": [{\"value\": \"f\", \"label\": \"Female\"}, {\"value\": \"m\", \"label\": \"Male\"}]} } } } Here, each field will provide a value which is substituted in the expression. Any HTML Input type is supported (i.e. text , number , range , ...), with options depending on the input type. In addition, the select field type is supported to display a ComboBox. You can specify the options: As a [{\"value\": \"<value>\", \"label\": \"<label>\"}, ...] value-label list. As a flat [\"<value1>\", \"<value2>\", ...] list, in which case value and label are equal. By specifying a dynamic lookup URL as options_query instead of options , as follows: You can query the options via qwc-data-service by setting options_query to <data_service_url>/<dataset>/keyvals?key=<key_field>&value=<value_field> . In addition, you can pass a filter to dynamically query the key-values depending on the value of another field by specifying filter , i.e. <data_service_url>/<dataset>/keyvals?key=<key_field>&value=<value_field>&filter=[[\"<field>\",\"=\",\"$FIELDNAME$\"]] , where $FIELDNAME$ will be replaced by the currently selected value for field FIELDNAME . Alternatively, you can also query any service (including the qwc-data-service , or a WFS/OAPIF service) which returns a GeoJSON Feature Collection by specifying options_query , value_field and label_field , in which case the options will be populated with the unique sets of {\"<value_field>\": \"<label_field>\" } extracted from the returned GeoJSON features. For example: \"type\": \"select\", \"options_query\": \"http://<data_service_url>/<dataset>?fields=<value_field>,<label_field>&filter=[[\\\"<otherfield>\\\",\\\"=\\\",\\\"$FIELDNAME$\\\"]]\", \"value_field\": \"<value_field>\", \"label_field\": \"<label_field>\" Note : qgis provider searches are exposed to the search field only if no fields are specified (i.e. single input search). The FeatureSearch plugin on the other hand will list all qgis provider searches. In addition to the configuration described above, you can specify these additional parameters in params : featureCount : A number, passed as feature_count to the GetFeatureInfo request to control the maximum number of returned features. If not specified, defaults to 100 . resultTitle : A format string for the result title. Allowed placeholders are: {layername} for the layer name and {<fieldname>} for the value of fieldname . If not the layer name followed by the feature displayfield will be shown. description : An arbitrary descriptive text which will be displayed above the search fields in the FeatureSearch plugin. default : Whether the search is selected by default when opening the FeatureSearch plugin. group : A group name, used to group the searches in the FeatureSearch selection combobox. Configuring the fulltext search service \u00b6 The qwc-fulltext-search-service provides facetted fullsearch text search, with one of the following backends: Postgres Trigram Apache Solr A facet references a searchable dataset. The configuration of the fulltext search service and available search facets can be found in tenantConfig.json : { \"name\": \"search\", \"config\": { \"search_backend\": \"<solr|trgm>\", \"word_split_re\": \"[\\\\s,.:;\\\"]+\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\", // trgm specific configuration, see below \"trgm_feature_query\": \"<see below>\", \"trgm_feature_query_template\": \"<see below>\", \"trgm_layer_query\": \"<see below>\", \"trgm_layer_query_template\": \"<see below>\", \"trgm_similarity_threshold\": \"0.3\" // solr specific configuration, see below \"solr_service_url\": \"http://localhost:8983/solr/gdi/select\", \"search_result_sort\": \"score desc, sort asc\", }, \"resources\": { \"facets\": [ { \"name\": \"<facet name>\", \"filter_word\": \"<filter word>\", \"table_name\": \"<schema.tablename>\", \"geometry_column\": \"<geometry column name>\", \"search_id_col\": \"<id column name>\" }, ... ] } } The search_backend specifies the search backend to use, either solr or trgm . Default: solr . The db_url specifies the DB which contains the search index (searched either by solr or by the specified trgm queries). The word_split_re specifies the regular expression which is used to split the search string into single words. Default: [\\\\s,.:;\\\"]+ . search_result_limit specifies the maximum number of feature results returned by a search. Default: 50 . The facets describe a searchable dataset and are referenced by the search index: name specifies the facet identifier. filter_word is a short (human readable) name which appears as result category in the search results (i.e. Address ). table_name specifies the table containing the features referenced by the search index (in the format schema.table_name ). geometry_column specifies the name of the geometry column in this table. search_id_col specifies the name of the id column in this table. If unset, field from search filter expression is used. Fulltext search with Trigram backend \u00b6 To configure a fulltext search with the trigram backend, set search_backend to trgm and specify a trgm_feature_query and optionally a trgm_layer_query . The feature and layer query SQL can contain following placeholders: :term : The full search text :terms : A list of search text words (i.e. the full search text split by whitespace). :thres : The trigram similarity treshold value (note that the service will also separately execute SET pg_trgm.similarity_threshold = <value> ). :facets : The permitted search facets, as a list. The trgm_feature_query must return the following fields: display : The label to display in the search results. facet_id : The facet name (as configured in resources => facets ). id_field_name : The name of the identifier field in the table referenced by the facet. feature_id : The feature identifier through which to locate the feature in table referenced by the facet. bbox : The feature bounding box, as a [xmin,ymin,xmax,ymax] string. srid : The SRID of the bbox coordinates (i.e. 3857 ). id_in_quotes : Whether the id field value should be quoted. Example: SELECT display, facet_id, id_field_name, feature_id, bbox, srid, similarity(suchbegriffe, :term) sml FROM public.search_index WHERE searchterms % :term OR searchterms ILIKE '%' || :term || '%' ORDER BY sml DESC;\", The trgm_layer_query must return the following fields: display : The label to display in the search results. dataproduct_id : The id of the dataproduct. has_info : Whether an abstract is available for the dataproduct. sublayers : A JSON stringified array of the shape [{\"ident\": \"<dataproduct_id>\", \"display\": \"<display>\", \"dset_info\": true}, ...] , or NULL if no sublayers exist. stacktype : The layer stacktype, foreground or background . Note : The layer query relies on an additional service, configured as dataproductServiceUrl in the viewer config.json , which resolves the dataproduct_id to a QWC theme sublayer object, like the sogis-dataproduct-service . In alternative to specifying trgm_feature_query and/or trgm_layer_query , you can set trgm_feature_query_template and/or trgm_layer_query_template to a Jinja template string which generates the final SQL query. The following variables are available in the template string: searchtext : the full search text, as a string words : the single words of the search text, as an array facets : the permitted search facets, as an array. Example for trgm_feature_query_template to generate an \"unrolled\" query for each word in the searchtext: SELECT display, facet_id, id_field_name, feature_id, bbox, srid FROM public.search_index WHERE {% for word in words %} searchterms ILIKE '%' || '{{ word }}' || '%' {% if not loop.last %} AND {% endif %} {% endfor %} ORDER BY {% for word in words %} similarity(searchterms, '{{ word }}') {% if not loop.last %} + {% endif %} {% endfor %} DESC Note : Set FLASK_DEBUG=1 as environment variable for the search service to see additional logging information. Fulltext search with Solr backend \u00b6 To use the solr backend, you need to run a solr search service and point solr_service_url to the corresponding URL. You can find the solr documentation at https://lucene.apache.org/solr/guide/8_0/ . Next, create search XML configuration files in volumes/solr/configsets/gdi/conf/ . The name of the file can be chosen freely. Example: <dataConfig> <dataSource driver=\"org.postgresql.Driver\" url=\"jdbc:postgresql://{DB_HOST}:{DB_PORT}/{DB_NAME}\" user=\"{DB_USER}\" password=\"{DB_PASSWORD}\" /> <document> <entity name=\"{FACET_NAME}\" query=\" WITH index_base AS ( /* ==== Base query for search index ==== */ SELECT '{FACET_NAME}'::text AS subclass, {PRIMARY_KEY} AS id_in_class, '{PRIMARY_KEY}' AS id_name, 'str:{SEARCH_FIELD_IS_STRING}' AS search_field_str, {DISPLAYTEXT} AS displaytext, {SEARCH_FIELD_1} AS search_part_1, {GEOMETRY_FIELD} AS geom FROM {SCHEMA}.{SEARCH_TABLE_NAME} /* ===================================== */ ) SELECT (array_to_json(array_append(ARRAY[subclass::text], id_in_class::text)))::text AS id, displaytext AS display, search_part_1 AS search_1_stem, search_part_1 AS sort, st_srid(geom) AS srid, subclass AS facet, 'default' AS tenant, (array_to_json(array_append(ARRAY[id_name::text], search_field_str::text)))::text AS idfield_meta, (st_asgeojson(st_envelope(geom), 0, 1)::json -> 'bbox')::text AS bbox, id_name, geom FROM index_base\"> </entity> </document> </dataConfig> The next table shows how the values need to be defined: Name Definition Example DB_HOST Database hostname qwc-postgis DB_NAME Database name qwc_demo DB_PORT Database port number 5432 DB_USER Database username qwc_service DB_PASSWORD Password for the specified database user qwc_service FACET_NAME Name of the search facet fluesse_search PRIMARY_KEY Primary key name of the table that is used in the search query ogc_fid SEARCH_FIELD_IS_STRING Definition, if search field is string ( y ) or not ( n ). If not, it's interpreted as integer. n DISPLAYTEXT Displaytext that will be shown by the QWC when a match was found name_long SEARCH_FIELD_1 Table field that will be used by the search name_long GEOMETRY_FIELD Name of the geometry column of the search table wkb_geometry SCHEMA Search table schema qwc_geodb SEARCH_TABLE_NAME Search table name fluesse Hint : For a less complex configuration file, of course it is also possible to define the query within a VIEW definition within the database. In this case just provide the query within the facet configuration like: <entity name=\"{FACET_NAME}\" query=\" SELECT id, display, search_1_stem, sort, facet, tenant, idfield_meta, bbox id_name, geom FROM index_base\"> </entity> Note : In the case of several searches sharing the same database connection, all searche queries can be written to the same XML file. Each search corresponds to exactly one <entity> tag in the XML file. After the configuration file has been created, the search must be registered in solr . In the volumes/solr/configsets/gdi/conf/solrconfig.xml file you have to look for `","title":"Search"},{"location":"topics/Search/#search","text":"QWC can be configured to use arbitrary custom search providers. In addition, the qwc-fulltext-search-service provided by the qwc-services ecosystem can be used.","title":"Search"},{"location":"topics/Search/#adding-search-providers","text":"Search providers can be defined as follows: In an external script loaded at runtime, defined i.e. in static/assets/searchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This script file needs to be include in index.html : <script type=\"text/javascript\" src=\"assets/searchProviders.js\" ></script> Built-in in a custom QWC build, i.e. defined in js/SearchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This file needs to be imported into the application, i.e. via import './SearchProviders.js'; in js/appConfig.js . Built-in search providers are compiled into the application bundle and avoid the need for an extra resource to be loaded on application startup. The downside is that you need to rebuild QWC to add/modify search providers. The format of ProviderDefinition is { label: \"<label>\", // Provider label (displayed in provider selection menu) labelmsgid: \"<msgid>\", // Translateable label message ID, instead of `label` onSearch: function(searchText, searchParams, callback, axios) => { const results = []; // See below /* Populate results... */ callback({results: results}); }, getResultGeometry: function(resultItem, callback, axios) => { /* Retreive geometry... */ // resultItem is a search result entry as returned by onSearch, which provides the context for retreiving the geometry const geometry = \"<wktString>\"; // or const geometry = {<GeoJSON geometry>}; const crs = \"EPSG:XXXX\"; const hidemarker = <boolean>; // Whether to suppress displaying a search marker on top of the search geometry const bbox = [xmin, xmax, ymin, ymax]; // Optional, if null, the bbox of the resultItem will be used const center = [x, y]; // Optional, if null, the center of the resultItem will be used callback({geometry: geometry, crs: crs, hidemarker: hidemarker, bbox: bbox, center: center}); // or callback({feature: geojson_feature, crs: crs, hidemarker: hidemarker, bbox: bbox, center: center}); }, handlesGeomFilter: <boolean>, // Hint whether provider will completely filter the results on provider side and that no client-side filtering is necessary getLayerDefinition: function(resultItem, callback, axios) => { // layer definition, in the same format as a \"sublayers\" entry in themes.json const layer = {<layer_definition>}; callback(layer); } } } Notes: The format of searchParams is as follows: Field Description { displaycrs: \"EPSG:XXXX\", Currently selected mouse coordinate display CRS. mapcrs: \"EPSG:XXXX\", The current map CRS. lang: \"<code>\", The current application language, i.e. en-US or en. cfgParams: <params>, Additional parameters passed in the theme search provider configuration, see below. limit: <number>, Result count limit. activeLayers: [\"<layername>\", ...], List of active layers in the map. filterBBox: [xmin, ymin, xmax, ymax]|null, A filter bbox, in mapcrs, the search component may pass to the provider to narrow down the results. filterPoly: [[x0, y0], [x1, y1], ...]|null A filter polygon, in mapcrs, the search component may pass to the provider to narrow down the results. } axios is passed for convenience so that providers can use the compiled-in axios library for network requests. onSearch is expected to return a list of search category results structured as follows: Field Description { id: \"<categoryid>\", Unique category ID. title: \"<display_title>\", Text to display as group title in the search results. titlemsgid: \"<display_title_msgid>\", Translation message id for group title, instead of title . resultCount: <result_count>, Optional: true result count (i.e. not limited to the limit specified in searchParams). priority: <priority_nr>, Optional: search result group priority. Groups with higher priority are displayed first in the list. type: SearchResultType.{PLACE|THEMELAYER|EXTERNALLAYER}, Specifies the type of results. Defaults to SearchResultType.PLACE . items: [ { Format for PLACE result: id: \"<item_id>\", Unique item ID. text: \"<display_text>\", Text to display as search result. label: \"<map_marker_text>\", Optional, text to show next to the position marker on the map instead of text . x: <x>, X coordinate of result. y: <y>, Y coordinate of result crs: <crs>, CRS of result coordinates and bbox. If not specified, the current map crs is assumed. bbox: [xmin, ymin, xmax, ymax], Bounding box of result (if non-empty, map will zoom to this extent when selecting result). geometry: <GeoJSON geometry>, Optional, result geometry. Geometries may also be fetched separately via getResultGeometry . thumbnail: \"<thumbnail_url>\", Optional: thumbnail image to display next to the search result text in the result list. externalLink: \"<url>\", Optional: a url to an external resource. If specified, a info icon is displayed in the result entry to open the link. target: \"<target>\" Optional: external link target. Can be _blank (default) or iframe . }, { Format for THEMELAYER or EXTERNALLAYER result: id: \"<item_id>\", Unique item ID. text: \"<display_text>\", Text to display as search result. layer: {<layer_definition>}, Optional, layer definition:., in the same format as a \"sublayers\" entry in themes.json. * For THEMELAYER results, the entry should be in the same format as a sublayer entry of a theme layer in themes.json . * For EXTERNALLAYER results, the entry can be of the form {resource: \"<resource_string>} or a full layer definition. If layer is not specified, the layer definition will be queried via getLayerDefinition . info: <bool>, Optional: Whether to display a info icon in the result list. The info is read from layer.abstract . thumbnail: \"<thumbnail_url>\", Optional: thumbnail image to display next to the search result text in the result list. sublayers: [{<sublayer>}, ...] Optional: list of sublayers, in the same format as the format parent result item (i.e. {id: \"<item_id>\", text: \"<display_text>\", layer: {<layer>}, ...} ). } ] } Consult static/assets/searchProviders.js for a full example.","title":"Adding search providers"},{"location":"topics/Search/#filtering","text":"When using the SearchBox search component with allowSearchFilters: true passed in the TopBar searchOptions , you a filter menu will be displayed allowing to restrict the search area. If the provider does not fully handle the filter geometry internally ( handlesGeomFilter != true ), client-side filtering will be performed as follows: Polygon intersection test if the result has a geometry field with a Polygon geometry Polygon intersection test if the result has a bbox field Point-in-polygon test using the results x and y point coordinates You can also set a predefined list of filter areas by setting searchFilterRegions in config.json (or per-theme in themesConfig.json ) as follows: \"searchFilterRegions\": [ { \"name\": \"<Group name>\", \"items\": [ { \"name\": \"<Name>\", \"crs\": \"<EPSG:XXXX>\", \"coordinates\": [[x0, y0], [x1, y1], ...] }, ... ] }, ... ] Alternatively, you can also set searchFilterRegions to an URL returning a JSON document structured like in the above example.","title":"Filtering "},{"location":"topics/Search/#configuring-theme-search-providers","text":"For each theme item in themesConfig.json , you can define a list of search providers to enable for the theme as follows: Field Description searchProviders: [ \"<providerkey1>\", Simple form. { Complex form with custom params: \"provider\": \"<providerkey2>\", Provider key. \"key\": \"<key>\", Optional: key to disambiguate multiple provider configurations of the same provider type (i.e. multiple qgis provider configurations). \"label\": \"<label>\", Optional: provider label (displayed in provider selection menu). If not specified, the label/labelmsgid from the provider definition is used. \"labelmsgid\": \"<msgid>\", Optional: translateable label message ID, instead of label . \"params\": {...} Additional params passed to the provider onSearch function as searchParams.cfgParams . } ] Note: The QWC stock application (also used by the qwc-map-viewer docker image) includes four providers by default: coordinates , nominatim (OpenStreetMap location search, see below ), qgis (see below ) and fulltext (see below ).","title":"Configuring theme search providers"},{"location":"topics/Search/#configuring-the-nominatim-openstreetmap-location-search","text":"The nominatim search is build-in and in it's simplest form can be configured by just specifying nominatim in the searchProviders . You can customize the search by passing parameters described in the Nominatim API in the provider params, i.e. to restrict the results to Switzerland and Germany you can write: { \"provider\": \"nominatim\", \"params\": { \"countrycodes\": \"de,ch\" } }","title":"Configuring the nominatim (OpenStreetMap) location search "},{"location":"topics/Search/#configuring-the-qgis-feature-search","text":"The QGIS feature search relies on WMS GetFeatureInfo with the FILTER parameter to search features of layers which are part of the theme WMS. It is enabled via the qgis search provider, which is part of the QWC stock application. Note : Make sure the QGIS Project is configured to return geometries with the feature info responses ( Project \u2192 Properties \u2192 QGIS Server \u2192 Add geometry to feature response ). In it's simples form, you can configure the theme search provider entry as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"<search name>\", \"expression\": { \"<layername1>\": \"<expression>\", \"<layername2>\": \"<expression>\" } } } where expression is a WMS GetFeatureInfo FILTER expression, for example \"\\\"name\\\" ILIKE '%$TEXT$%'\" . $TEXT$ will be replaced by the search text entered by the user, name corresponds to a field name of the specified layer. A more complex form, useable through the FeatureSearch plugin, allows defining a field configuration for multiple input fields. A full example is as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"Person search\", \"expression\": { \"persons\": \"\\\"name\\\" ILIKE '%$NAME$%' AND \\\"age\\\" >= $AGE$ AND \\\"gender\\\" = '$GENDER$'\" }, \"fields\": { \"NAME\": {\"label\": \"Name\", \"type\": \"text\"}, \"AGE\": {\"label\": \"Min. age\", \"type\": \"number\", \"options\": {\"min\": 0}}, \"GENDER\": {\"label\": \"Gender\", \"type\": \"select\", \"options\": [{\"value\": \"f\", \"label\": \"Female\"}, {\"value\": \"m\", \"label\": \"Male\"}]} } } } Here, each field will provide a value which is substituted in the expression. Any HTML Input type is supported (i.e. text , number , range , ...), with options depending on the input type. In addition, the select field type is supported to display a ComboBox. You can specify the options: As a [{\"value\": \"<value>\", \"label\": \"<label>\"}, ...] value-label list. As a flat [\"<value1>\", \"<value2>\", ...] list, in which case value and label are equal. By specifying a dynamic lookup URL as options_query instead of options , as follows: You can query the options via qwc-data-service by setting options_query to <data_service_url>/<dataset>/keyvals?key=<key_field>&value=<value_field> . In addition, you can pass a filter to dynamically query the key-values depending on the value of another field by specifying filter , i.e. <data_service_url>/<dataset>/keyvals?key=<key_field>&value=<value_field>&filter=[[\"<field>\",\"=\",\"$FIELDNAME$\"]] , where $FIELDNAME$ will be replaced by the currently selected value for field FIELDNAME . Alternatively, you can also query any service (including the qwc-data-service , or a WFS/OAPIF service) which returns a GeoJSON Feature Collection by specifying options_query , value_field and label_field , in which case the options will be populated with the unique sets of {\"<value_field>\": \"<label_field>\" } extracted from the returned GeoJSON features. For example: \"type\": \"select\", \"options_query\": \"http://<data_service_url>/<dataset>?fields=<value_field>,<label_field>&filter=[[\\\"<otherfield>\\\",\\\"=\\\",\\\"$FIELDNAME$\\\"]]\", \"value_field\": \"<value_field>\", \"label_field\": \"<label_field>\" Note : qgis provider searches are exposed to the search field only if no fields are specified (i.e. single input search). The FeatureSearch plugin on the other hand will list all qgis provider searches. In addition to the configuration described above, you can specify these additional parameters in params : featureCount : A number, passed as feature_count to the GetFeatureInfo request to control the maximum number of returned features. If not specified, defaults to 100 . resultTitle : A format string for the result title. Allowed placeholders are: {layername} for the layer name and {<fieldname>} for the value of fieldname . If not the layer name followed by the feature displayfield will be shown. description : An arbitrary descriptive text which will be displayed above the search fields in the FeatureSearch plugin. default : Whether the search is selected by default when opening the FeatureSearch plugin. group : A group name, used to group the searches in the FeatureSearch selection combobox.","title":"Configuring the QGIS feature search "},{"location":"topics/Search/#configuring-the-fulltext-search-service","text":"The qwc-fulltext-search-service provides facetted fullsearch text search, with one of the following backends: Postgres Trigram Apache Solr A facet references a searchable dataset. The configuration of the fulltext search service and available search facets can be found in tenantConfig.json : { \"name\": \"search\", \"config\": { \"search_backend\": \"<solr|trgm>\", \"word_split_re\": \"[\\\\s,.:;\\\"]+\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\", // trgm specific configuration, see below \"trgm_feature_query\": \"<see below>\", \"trgm_feature_query_template\": \"<see below>\", \"trgm_layer_query\": \"<see below>\", \"trgm_layer_query_template\": \"<see below>\", \"trgm_similarity_threshold\": \"0.3\" // solr specific configuration, see below \"solr_service_url\": \"http://localhost:8983/solr/gdi/select\", \"search_result_sort\": \"score desc, sort asc\", }, \"resources\": { \"facets\": [ { \"name\": \"<facet name>\", \"filter_word\": \"<filter word>\", \"table_name\": \"<schema.tablename>\", \"geometry_column\": \"<geometry column name>\", \"search_id_col\": \"<id column name>\" }, ... ] } } The search_backend specifies the search backend to use, either solr or trgm . Default: solr . The db_url specifies the DB which contains the search index (searched either by solr or by the specified trgm queries). The word_split_re specifies the regular expression which is used to split the search string into single words. Default: [\\\\s,.:;\\\"]+ . search_result_limit specifies the maximum number of feature results returned by a search. Default: 50 . The facets describe a searchable dataset and are referenced by the search index: name specifies the facet identifier. filter_word is a short (human readable) name which appears as result category in the search results (i.e. Address ). table_name specifies the table containing the features referenced by the search index (in the format schema.table_name ). geometry_column specifies the name of the geometry column in this table. search_id_col specifies the name of the id column in this table. If unset, field from search filter expression is used.","title":"Configuring the fulltext search service "},{"location":"topics/Search/#fulltext-search-with-trigram-backend","text":"To configure a fulltext search with the trigram backend, set search_backend to trgm and specify a trgm_feature_query and optionally a trgm_layer_query . The feature and layer query SQL can contain following placeholders: :term : The full search text :terms : A list of search text words (i.e. the full search text split by whitespace). :thres : The trigram similarity treshold value (note that the service will also separately execute SET pg_trgm.similarity_threshold = <value> ). :facets : The permitted search facets, as a list. The trgm_feature_query must return the following fields: display : The label to display in the search results. facet_id : The facet name (as configured in resources => facets ). id_field_name : The name of the identifier field in the table referenced by the facet. feature_id : The feature identifier through which to locate the feature in table referenced by the facet. bbox : The feature bounding box, as a [xmin,ymin,xmax,ymax] string. srid : The SRID of the bbox coordinates (i.e. 3857 ). id_in_quotes : Whether the id field value should be quoted. Example: SELECT display, facet_id, id_field_name, feature_id, bbox, srid, similarity(suchbegriffe, :term) sml FROM public.search_index WHERE searchterms % :term OR searchterms ILIKE '%' || :term || '%' ORDER BY sml DESC;\", The trgm_layer_query must return the following fields: display : The label to display in the search results. dataproduct_id : The id of the dataproduct. has_info : Whether an abstract is available for the dataproduct. sublayers : A JSON stringified array of the shape [{\"ident\": \"<dataproduct_id>\", \"display\": \"<display>\", \"dset_info\": true}, ...] , or NULL if no sublayers exist. stacktype : The layer stacktype, foreground or background . Note : The layer query relies on an additional service, configured as dataproductServiceUrl in the viewer config.json , which resolves the dataproduct_id to a QWC theme sublayer object, like the sogis-dataproduct-service . In alternative to specifying trgm_feature_query and/or trgm_layer_query , you can set trgm_feature_query_template and/or trgm_layer_query_template to a Jinja template string which generates the final SQL query. The following variables are available in the template string: searchtext : the full search text, as a string words : the single words of the search text, as an array facets : the permitted search facets, as an array. Example for trgm_feature_query_template to generate an \"unrolled\" query for each word in the searchtext: SELECT display, facet_id, id_field_name, feature_id, bbox, srid FROM public.search_index WHERE {% for word in words %} searchterms ILIKE '%' || '{{ word }}' || '%' {% if not loop.last %} AND {% endif %} {% endfor %} ORDER BY {% for word in words %} similarity(searchterms, '{{ word }}') {% if not loop.last %} + {% endif %} {% endfor %} DESC Note : Set FLASK_DEBUG=1 as environment variable for the search service to see additional logging information.","title":"Fulltext search with Trigram backend"},{"location":"topics/Search/#fulltext-search-with-solr-backend","text":"To use the solr backend, you need to run a solr search service and point solr_service_url to the corresponding URL. You can find the solr documentation at https://lucene.apache.org/solr/guide/8_0/ . Next, create search XML configuration files in volumes/solr/configsets/gdi/conf/ . The name of the file can be chosen freely. Example: <dataConfig> <dataSource driver=\"org.postgresql.Driver\" url=\"jdbc:postgresql://{DB_HOST}:{DB_PORT}/{DB_NAME}\" user=\"{DB_USER}\" password=\"{DB_PASSWORD}\" /> <document> <entity name=\"{FACET_NAME}\" query=\" WITH index_base AS ( /* ==== Base query for search index ==== */ SELECT '{FACET_NAME}'::text AS subclass, {PRIMARY_KEY} AS id_in_class, '{PRIMARY_KEY}' AS id_name, 'str:{SEARCH_FIELD_IS_STRING}' AS search_field_str, {DISPLAYTEXT} AS displaytext, {SEARCH_FIELD_1} AS search_part_1, {GEOMETRY_FIELD} AS geom FROM {SCHEMA}.{SEARCH_TABLE_NAME} /* ===================================== */ ) SELECT (array_to_json(array_append(ARRAY[subclass::text], id_in_class::text)))::text AS id, displaytext AS display, search_part_1 AS search_1_stem, search_part_1 AS sort, st_srid(geom) AS srid, subclass AS facet, 'default' AS tenant, (array_to_json(array_append(ARRAY[id_name::text], search_field_str::text)))::text AS idfield_meta, (st_asgeojson(st_envelope(geom), 0, 1)::json -> 'bbox')::text AS bbox, id_name, geom FROM index_base\"> </entity> </document> </dataConfig> The next table shows how the values need to be defined: Name Definition Example DB_HOST Database hostname qwc-postgis DB_NAME Database name qwc_demo DB_PORT Database port number 5432 DB_USER Database username qwc_service DB_PASSWORD Password for the specified database user qwc_service FACET_NAME Name of the search facet fluesse_search PRIMARY_KEY Primary key name of the table that is used in the search query ogc_fid SEARCH_FIELD_IS_STRING Definition, if search field is string ( y ) or not ( n ). If not, it's interpreted as integer. n DISPLAYTEXT Displaytext that will be shown by the QWC when a match was found name_long SEARCH_FIELD_1 Table field that will be used by the search name_long GEOMETRY_FIELD Name of the geometry column of the search table wkb_geometry SCHEMA Search table schema qwc_geodb SEARCH_TABLE_NAME Search table name fluesse Hint : For a less complex configuration file, of course it is also possible to define the query within a VIEW definition within the database. In this case just provide the query within the facet configuration like: <entity name=\"{FACET_NAME}\" query=\" SELECT id, display, search_1_stem, sort, facet, tenant, idfield_meta, bbox id_name, geom FROM index_base\"> </entity> Note : In the case of several searches sharing the same database connection, all searche queries can be written to the same XML file. Each search corresponds to exactly one <entity> tag in the XML file. After the configuration file has been created, the search must be registered in solr . In the volumes/solr/configsets/gdi/conf/solrconfig.xml file you have to look for `","title":"Fulltext search with Solr backend"},{"location":"topics/Snapping/","text":"Snapping \u00b6 QWC ships a plugin for snapping support while drawing (redlining / measuring / editing). The plugin is enabled in the stock application. To enable it in a custom application, make sure the SnappingSupport plugin is enabled in appConfig.js (see the sample sample js/appConfig.js ). Then, for each theme for which you want snapping to be available, you can add a snapping block to your theme item in themesConfig.json as follows: ... \"snapping\": { \"snaplayers\": [ { \"name\": \"<layername>\", \"min\": <min_scale>, \"max\": <max_scale> } ], \"featureCount\": <feature_count>, \"wfsMaxScale\": <wfs_max_scale> } ... where: layername is the name of the theme sublayer from which to retreive the snapping geometries. min is the minimum scale denominator (inclusive) from which this layer should be used for snapping. max is the maximum scale denominator (exclusive) up to which this layer should be used for snapping. feature_count is the maximum number of snapping geometries to retreive for the current map extent (default: 500). wfs_max_scale is the maximum scale denominator (exclusive) up to which loaded WFS layers should be used for snapping. Note : Snapping works by querying the geometries of all snapping layers inside the scale range via WMS GetFeatureInfo and refreshing the geometries every time the map extent changes. Therefore, it is recommended to ensure the geometry complexity of the snap layers is appropriate for the specified scale ranges to avoid overloading the server with the GetFeatureInfo requests. Also, the QGIS project will need to be configured so that snap layers are queryable and that feature info responses contain geometries. For the Redlining , Measure and Editing plugins, the availability of snapping can be independently configured: { \"name\":\"<Redlining|Measure|Editing>\", \"cfg\": { \"snapping\": <true|false>, \"snappingActive\": <true|false>, ... } } where: snapping determines whether snapping is available for the specified plugin snappingActive determines whether snapping is active by default for the specified plugin When snapping is available, a small toolbar appears on the bottom border of the map with the possibility to toggle snapping.","title":"Snapping"},{"location":"topics/Snapping/#snapping","text":"QWC ships a plugin for snapping support while drawing (redlining / measuring / editing). The plugin is enabled in the stock application. To enable it in a custom application, make sure the SnappingSupport plugin is enabled in appConfig.js (see the sample sample js/appConfig.js ). Then, for each theme for which you want snapping to be available, you can add a snapping block to your theme item in themesConfig.json as follows: ... \"snapping\": { \"snaplayers\": [ { \"name\": \"<layername>\", \"min\": <min_scale>, \"max\": <max_scale> } ], \"featureCount\": <feature_count>, \"wfsMaxScale\": <wfs_max_scale> } ... where: layername is the name of the theme sublayer from which to retreive the snapping geometries. min is the minimum scale denominator (inclusive) from which this layer should be used for snapping. max is the maximum scale denominator (exclusive) up to which this layer should be used for snapping. feature_count is the maximum number of snapping geometries to retreive for the current map extent (default: 500). wfs_max_scale is the maximum scale denominator (exclusive) up to which loaded WFS layers should be used for snapping. Note : Snapping works by querying the geometries of all snapping layers inside the scale range via WMS GetFeatureInfo and refreshing the geometries every time the map extent changes. Therefore, it is recommended to ensure the geometry complexity of the snap layers is appropriate for the specified scale ranges to avoid overloading the server with the GetFeatureInfo requests. Also, the QGIS project will need to be configured so that snap layers are queryable and that feature info responses contain geometries. For the Redlining , Measure and Editing plugins, the availability of snapping can be independently configured: { \"name\":\"<Redlining|Measure|Editing>\", \"cfg\": { \"snapping\": <true|false>, \"snappingActive\": <true|false>, ... } } where: snapping determines whether snapping is available for the specified plugin snappingActive determines whether snapping is active by default for the specified plugin When snapping is available, a small toolbar appears on the bottom border of the map with the possibility to toggle snapping.","title":"Snapping"},{"location":"topics/TimeManager/","text":"Temporal layers (Time Manager) \u00b6 QWC supports WMS layers with time dimension (WMS-T) through the TimeManager plugin. To view and manage temporal layers in QWC, add a new time dimension, selecting appropriate temporal fields as start- and end-attributes in the QGIS Layer Properties \u2192 QGIS Server \u2192 Dimensions. For the time markers functionality in the Time Manager plugin to work correctly, you also need to enable the qwc-feature-info-service . Note: The QGIS Layer Properties \u2192 Temporal settings are ignored by QGIS Server and hence have no effect in QWC.","title":"Temporal layers"},{"location":"topics/TimeManager/#temporal-layers-time-manager","text":"QWC supports WMS layers with time dimension (WMS-T) through the TimeManager plugin. To view and manage temporal layers in QWC, add a new time dimension, selecting appropriate temporal fields as start- and end-attributes in the QGIS Layer Properties \u2192 QGIS Server \u2192 Dimensions. For the time markers functionality in the Time Manager plugin to work correctly, you also need to enable the qwc-feature-info-service . Note: The QGIS Layer Properties \u2192 Temporal settings are ignored by QGIS Server and hence have no effect in QWC.","title":"Temporal layers (Time Manager)"},{"location":"topics/Tourguide/","text":"Tour Guide JSON Configuration \u00b6 A DriverJS implementation is available in QWC. To configure and use it with the Tour Guide Plugin , you can customize your tour guide using a .json file. By default, the file is located in the static folder of QWC, but you can also provide any JSON file using the tourGuideUrl parameter in the plugin configuration. Each step of the tour can be configured using the following parameters: selector : (string) CSS selector to target an element by ID or class. Default : null title : (string) Title of the tour guide step card. Default : \"\" content : (string) Content body of the tour guide step card. Default : \"\" side : (string) Position of the step card relative to the highlighted element. Possible values include \"top\" , \"bottom\" , \"left\" , \"right\" . Default : \"left\" align : (string) Alignment of the card relative to its position. Possible values include \"start\" , \"center\" , \"end\" . Default : \"start\" disableActiveInteraction : (boolean) Whether to disable user interaction with the highlighted element. Default : false In addition to the above parameters, it is also possible to configure tasks that will be triggered when moving to the next or previous steps: onNextClick : (array of strings) A list of actions to perform when the \"Next\" button is clicked. onPrevClick : (array of strings) A list of actions to perform when the \"Previous\" button is clicked. Supported actions include: \"setTask:<taskName>\" \u2013 Opens the specified task, or use null to close it. \"openMenu\" \u2013 Opens the main menu. \"closeMenu\" \u2013 Closes the main menu. \"openSubMenu:<submenu>\" \u2013 Opens a specific submenu. For example: \"openSubMenu:tools\" Example JSON Configuration \u00b6 [ { \"selector\": \".Toolbar\", \"title\": \"Top Bar\", \"content\": \"The top bar toolbar is a configurable interface managed by the administrator. It hosts many tools available in the QGIS Web Client. Typically, you will find the most frequently used tools here, such as printing and measuring.\" }, { \"selector\": \"button[title='Switch background']\", \"title\": \"Background Switcher\", \"content\": \"This module allows you to change the map background. New backgrounds can be configured in the theme configuration file.\", \"side\": \"top\" }, { \"selector\": \"#LayerTree\", \"title\": \"Layer Tree\", \"content\": \"Here you can manage the visibility and order of the map layers.\", \"onNextClick\": [\"setTask:null\", \"openMenu\"], \"onPrevClick\": [\"setTask:LayerTree\", \"closeMenu\"] } ] For a full example, you can refer to the tourGuide.json file in the QWC application.","title":"Tour Guide"},{"location":"topics/Tourguide/#tour-guide-json-configuration","text":"A DriverJS implementation is available in QWC. To configure and use it with the Tour Guide Plugin , you can customize your tour guide using a .json file. By default, the file is located in the static folder of QWC, but you can also provide any JSON file using the tourGuideUrl parameter in the plugin configuration. Each step of the tour can be configured using the following parameters: selector : (string) CSS selector to target an element by ID or class. Default : null title : (string) Title of the tour guide step card. Default : \"\" content : (string) Content body of the tour guide step card. Default : \"\" side : (string) Position of the step card relative to the highlighted element. Possible values include \"top\" , \"bottom\" , \"left\" , \"right\" . Default : \"left\" align : (string) Alignment of the card relative to its position. Possible values include \"start\" , \"center\" , \"end\" . Default : \"start\" disableActiveInteraction : (boolean) Whether to disable user interaction with the highlighted element. Default : false In addition to the above parameters, it is also possible to configure tasks that will be triggered when moving to the next or previous steps: onNextClick : (array of strings) A list of actions to perform when the \"Next\" button is clicked. onPrevClick : (array of strings) A list of actions to perform when the \"Previous\" button is clicked. Supported actions include: \"setTask:<taskName>\" \u2013 Opens the specified task, or use null to close it. \"openMenu\" \u2013 Opens the main menu. \"closeMenu\" \u2013 Closes the main menu. \"openSubMenu:<submenu>\" \u2013 Opens a specific submenu. For example: \"openSubMenu:tools\"","title":"Tour Guide JSON Configuration"},{"location":"topics/Tourguide/#example-json-configuration","text":"[ { \"selector\": \".Toolbar\", \"title\": \"Top Bar\", \"content\": \"The top bar toolbar is a configurable interface managed by the administrator. It hosts many tools available in the QGIS Web Client. Typically, you will find the most frequently used tools here, such as printing and measuring.\" }, { \"selector\": \"button[title='Switch background']\", \"title\": \"Background Switcher\", \"content\": \"This module allows you to change the map background. New backgrounds can be configured in the theme configuration file.\", \"side\": \"top\" }, { \"selector\": \"#LayerTree\", \"title\": \"Layer Tree\", \"content\": \"Here you can manage the visibility and order of the map layers.\", \"onNextClick\": [\"setTask:null\", \"openMenu\"], \"onPrevClick\": [\"setTask:LayerTree\", \"closeMenu\"] } ] For a full example, you can refer to the tourGuide.json file in the QWC application.","title":"Example JSON Configuration"},{"location":"topics/Translations/","text":"Translations \u00b6 QWC Viewer translations are available for multiple languags (with varying degree of competeness). By default, QWC will attempt to load the translation matching your browser language. Alternatively, you can explicitly specify the language by adding the lang=<lang> query parameter to the application URL, i.e. lang=de-CH . The Settings Plugin furthermore allows graphically switching the language within QWC, with the list of available languages configured via the languages plugin configuration property. Translated themes \u00b6 QWC also supports localized themes, including in particular the theme name, layer and attribute names. As a prerequisite, the get_translations QGIS Server plugin needs be enabled, i.e. when using qwc-qgis-server : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/get_translations:/usr/share/qgis/python/plugins/get_translations:ro ... Then, to localize a theme: In QGIS \u2192 Project Properties \u2192 General , generate a project translation file by selecting the source language and pressing Generate TS File . Rename the generated <projectname>.ts to <projectname>_<lang>.ts , where <lang> is language code like de or de-CH . Open the <projectname>_<lang>.ts with the Qt Linguist application and fill out the translations. Note that translations need to be marked as \"finished\" in Qt Linguist Since the QGIS project translations mechanism does not currently allow translating some project strings which are useful for QWC, these need to be defined in an auxiliary translation file <projectname>_<lang>.json structured as follows: { \"layouts\": { \"<layout_name>\": \"<translated_layout_name>\", ... }, \"theme\": { \"title\": \"<translated_theme_title>\" } } Where: layouts is used to translate print layout names. Note that if you want to translate the name of a (print layout templates)[Printing.md#layout-templates], the layout_name may need to include the path portion of the layout (i.e. <subdir>/<layout_name> ). theme is used to translate the theme title (and possibly other strings in the future) Finally, run the ConfigGenerator to include the translated theme names in the themes configuration. Localized viewer asssets \u00b6 The qwc-map-viewer supports returning localized viewer assets if the lang=<lang>-<COUNTRY> query parameter is added to the asset URL, i.e. <baseurl>/assets/myfile.ext?lang=<lang>-<COUNTRY> where <lang>-<COUNTRY> is a language-country code like de-CH . The service will then check if myfile_<lang>-<COUNTRY>.ext or myfile_<lang>.ext exist, returning the first possible match, falling back to myfile.ext if neither exists. Adding and modifying Viewer translations \u00b6 When working inside a qwc-app source folder, the translations are located at qwc-app/static/translations . A script will take care of merging the translations from the qwc2 package into the application translations. This way, when updating the qwc2 dependency, new translations are automatically obtained. This script is automatically invoked on yarn start , but can also be manually invoked using yarn run tsupdate Translations are stored inside the respective translations folder as regular plain-text JSON files, named <lang>.json and can be freely edited with any text editor. The tsconfig.json files stored inside the respective translations folder contains the list of languages for which translations should be generated and a list of message IDs to include in the translation. The tsupdate script will automatically scan the code for message IDs (looking for static strings passed to LocaleUtils.tr and LocaleUtils.trmsg ), store these in tsconfig.json and automatically create resp. update the translation files. In some cases tsconfig.json will not pick up a message ID (for instance, if it is computed at runtime). In these cases, the message IDs can be added manually to the extra_strings section of the tsconfig.json . Also it may be desired to override a translation inherited from the QWC components at application level. To prevent tsupdate from continuously reverting the overridden translation, the respective message IDs can be added to the overrides section in the application tsconfig.json file. To add a new language, list it in qwc-app/qwc2/translations/tsconfig.json and run yarn run tsupdate , then complete the messages taking the english translation file as reference. When adding or modifying translations at QWC components level, please contribute them by submitting a pull request to the upstream qwc2 repository . Selectively overriding translation strings \u00b6 Occasionally, it is desireable to selectively override specific translation strings. While one can modify the full translation file as described above, especially when using the qwc-map-viewer docker image, it is easier to just selectively override the desired translation strings and leave the original file unchanged and avoid having to compile a custom viewer (or overwriting the entire file with a docker volume mount). To do this: Set loadTranslationOverrides to true in config.json . Create a <lang>_overrides.json containing just the ovverridden strings, for example en-US_overrides.json : { \"messages\": { \"appmenu\": { \"items\": { \"LayerTree\": \"Layers\" } } } } Place this file inside the translations folder of your production build. When using qwc-docker , you can place this file in qwc-docker/volumes/qwc2/translations/ and mount this file inside the container, i.e. : qwc-map-viewer: image: sourcepole/qwc-map-viewer:vYYYY.MM.DD [...] volumes: - ./volumes/qwc2/translations/en-US_overrides.json:/qwc2/translations/en-US_overrides.json:ro Specifying the default fallback translation \u00b6 When no translation exists for the requested language (i.e. the current browser language), QWC will fall back to the default translation specified as defaultLocaleData in qwc2-app/js/appConfig.js . For the stock application, the default fallback translation is en-US .","title":"Translations"},{"location":"topics/Translations/#translations","text":"QWC Viewer translations are available for multiple languags (with varying degree of competeness). By default, QWC will attempt to load the translation matching your browser language. Alternatively, you can explicitly specify the language by adding the lang=<lang> query parameter to the application URL, i.e. lang=de-CH . The Settings Plugin furthermore allows graphically switching the language within QWC, with the list of available languages configured via the languages plugin configuration property.","title":"Translations "},{"location":"topics/Translations/#translated-themes","text":"QWC also supports localized themes, including in particular the theme name, layer and attribute names. As a prerequisite, the get_translations QGIS Server plugin needs be enabled, i.e. when using qwc-qgis-server : qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> volumes: - ./volumes/qgis-server-plugins/get_translations:/usr/share/qgis/python/plugins/get_translations:ro ... Then, to localize a theme: In QGIS \u2192 Project Properties \u2192 General , generate a project translation file by selecting the source language and pressing Generate TS File . Rename the generated <projectname>.ts to <projectname>_<lang>.ts , where <lang> is language code like de or de-CH . Open the <projectname>_<lang>.ts with the Qt Linguist application and fill out the translations. Note that translations need to be marked as \"finished\" in Qt Linguist Since the QGIS project translations mechanism does not currently allow translating some project strings which are useful for QWC, these need to be defined in an auxiliary translation file <projectname>_<lang>.json structured as follows: { \"layouts\": { \"<layout_name>\": \"<translated_layout_name>\", ... }, \"theme\": { \"title\": \"<translated_theme_title>\" } } Where: layouts is used to translate print layout names. Note that if you want to translate the name of a (print layout templates)[Printing.md#layout-templates], the layout_name may need to include the path portion of the layout (i.e. <subdir>/<layout_name> ). theme is used to translate the theme title (and possibly other strings in the future) Finally, run the ConfigGenerator to include the translated theme names in the themes configuration.","title":"Translated themes"},{"location":"topics/Translations/#localized-viewer-asssets","text":"The qwc-map-viewer supports returning localized viewer assets if the lang=<lang>-<COUNTRY> query parameter is added to the asset URL, i.e. <baseurl>/assets/myfile.ext?lang=<lang>-<COUNTRY> where <lang>-<COUNTRY> is a language-country code like de-CH . The service will then check if myfile_<lang>-<COUNTRY>.ext or myfile_<lang>.ext exist, returning the first possible match, falling back to myfile.ext if neither exists.","title":"Localized viewer asssets"},{"location":"topics/Translations/#adding-and-modifying-viewer-translations","text":"When working inside a qwc-app source folder, the translations are located at qwc-app/static/translations . A script will take care of merging the translations from the qwc2 package into the application translations. This way, when updating the qwc2 dependency, new translations are automatically obtained. This script is automatically invoked on yarn start , but can also be manually invoked using yarn run tsupdate Translations are stored inside the respective translations folder as regular plain-text JSON files, named <lang>.json and can be freely edited with any text editor. The tsconfig.json files stored inside the respective translations folder contains the list of languages for which translations should be generated and a list of message IDs to include in the translation. The tsupdate script will automatically scan the code for message IDs (looking for static strings passed to LocaleUtils.tr and LocaleUtils.trmsg ), store these in tsconfig.json and automatically create resp. update the translation files. In some cases tsconfig.json will not pick up a message ID (for instance, if it is computed at runtime). In these cases, the message IDs can be added manually to the extra_strings section of the tsconfig.json . Also it may be desired to override a translation inherited from the QWC components at application level. To prevent tsupdate from continuously reverting the overridden translation, the respective message IDs can be added to the overrides section in the application tsconfig.json file. To add a new language, list it in qwc-app/qwc2/translations/tsconfig.json and run yarn run tsupdate , then complete the messages taking the english translation file as reference. When adding or modifying translations at QWC components level, please contribute them by submitting a pull request to the upstream qwc2 repository .","title":"Adding and modifying Viewer translations"},{"location":"topics/Translations/#selectively-overriding-translation-strings","text":"Occasionally, it is desireable to selectively override specific translation strings. While one can modify the full translation file as described above, especially when using the qwc-map-viewer docker image, it is easier to just selectively override the desired translation strings and leave the original file unchanged and avoid having to compile a custom viewer (or overwriting the entire file with a docker volume mount). To do this: Set loadTranslationOverrides to true in config.json . Create a <lang>_overrides.json containing just the ovverridden strings, for example en-US_overrides.json : { \"messages\": { \"appmenu\": { \"items\": { \"LayerTree\": \"Layers\" } } } } Place this file inside the translations folder of your production build. When using qwc-docker , you can place this file in qwc-docker/volumes/qwc2/translations/ and mount this file inside the container, i.e. : qwc-map-viewer: image: sourcepole/qwc-map-viewer:vYYYY.MM.DD [...] volumes: - ./volumes/qwc2/translations/en-US_overrides.json:/qwc2/translations/en-US_overrides.json:ro","title":"Selectively overriding translation strings"},{"location":"topics/Translations/#specifying-the-default-fallback-translation","text":"When no translation exists for the requested language (i.e. the current browser language), QWC will fall back to the default translation specified as defaultLocaleData in qwc2-app/js/appConfig.js . For the stock application, the default fallback translation is en-US .","title":"Specifying the default fallback translation"},{"location":"topics/View3D/","text":"3D View \u00b6 QWC offers a full 3D view based on THREE.js and Giro3D . It allows displaying 3D objects, mainly served as 3D Tiles, on a terrain provided by a COG (Cloud Optimised GeoTIFF). Layers from the 2D view will be rendered as draped textures on the 3D terrain. Configuring the 3D View \u00b6 To enable the 3D view, you need to configure the plugin in config.json . A typical View3D plugin configuration may look as follows: { \"name\": \"View3D\", \"cfg\": { \"pluginOptions\": { \"Identify3D\": { \"tileInfoServiceUrl\": \"/api/v1/tileinfo/objinfo?tileset={tileset}&objectid={objectid}\" }, \"LayerTree3D\": { \"importedTilesBaseUrl\": \"/assets/\" }, \"TopBar3D\": { \"menuItems\": [ {\"key\": \"ThemeSwitcher\", \"icon\": \"themes\"}, {\"key\": \"LayerTree3D\", \"icon\": \"layers\"}, {\"key\": \"Draw3D\", \"icon\": \"draw\"}, {\"key\": \"Measure3D\", \"icon\": \"measure\"}, {\"key\": \"Compare3D\", \"icon\": \"compare\"}, {\"key\": \"HideObjects3D\", \"icon\": \"eye\"}, {\"key\": \"MapLight3D\", \"icon\": \"light\"}, {\"key\": \"MapExport3D\", \"icon\": \"rasterexport\"}, {\"key\": \"ExportObjects3D\", \"icon\": \"export\"}, {\"key\": \"Share\", \"icon\": \"share\"}, {\"key\": \"Bookmark\", \"icon\": \"bookmark\"}, {\"key\": \"Help\", \"icon\": \"info\"}, {\"key\": \"Settings3D\", \"icon\": \"cog\"}, {\"key\": \"Settings\", \"icon\": \"cog\"} ], \"toolbarItems\": [ {\"key\": \"Measure3D\", \"icon\": \"measure\"} ] } } } } NOTE : The menuItems and toolbarItems can contain both 3D tools as well as generic tools (which are not specifically 2D map tools). If you run the 3D View in split-screen 3D+2D mode, only 3D tools will be displayed in the 3D window toolbar and menu. If you run the 3D View in fullscreen, all configured entries will be displayed. Consult the View3D plugin reference as well as well as the 3D tool plugins reference for additional configuation options. Next, to add a 3D View to a theme, add a map3d configuration to the desired theme item in themesConfig.json : \"map3d\": { \"initialView\": { \"camera\": [x, y, z], \"target\": [x, y, z], \"personHeight\": h }, \"dtm\": {\"url\": \"<url_to_dtm.tif>\", \"crs\": \"<dtm_epsg_code>}, \"basemaps\": [ {\"name\": \"<name_of_background_layer>\", \"visibility\": true, \"overview\": true}, {\"name\": \"<name_of_background_layer>\"}, ... ], \"tiles3d\": [ { \"name\": \"<name>\", \"url\": \"<url_to_tileset.json>\", \"title\": \"<title>\", \"baseColor\": \"<css RGB(A) color string>\", \"idAttr\": \"<tile_feature_attr>\", \"styles\": {\"<styleName>\", \"<url_to_tilesetStyle.json>\", ...}, \"style\": \"<styleName>\", \"colorAttr\": \"<tile_feature_attr>\", \"alphaAttr\": \"<tile_feature_attr>\", \"labelAttr\": \"<tile_feature_attr>\", } ], \"objects3d\": [ { \"name\": \"<name>\", \"url\": \"<url_to_file.gltf>\", \"title\": \"<title>\" } ] } Where: initialView is optional and allows to define the initial view when opening the 3D view. If personHeight is specified and greater than 0, the first-person view is activated. If not specified, the 2D view is synchronized. The dtm URL should point to a cloud optimized GeoTIFF. The background layer names refer to the names of the entries defined in backgroundLayers in the themesConfig.json . Additionally: visibility controls the initially visibile background layer overview: true controls the name of background layer to display in the overview map. If no background layer is marked with overview: true , the currently visibile background layer id dipslayed in the overview map. The tiles3d entry contains an optional list of 3d tiles to add to the scene, with: idAttr : feature properties table attribute which stores the object id, used for styling and passed to tileInfoServiceUrl of the Identify3D plugin. Default: id . styles : optional, available tileset styles. Takes precedente over colorAttr , alphaAttr , labelAttr . style : optional, tileset style enabled by default. baseColor : the fallback color for the tile objects, defaults to white . colorAttr : optional, feature properties table attribute which stores the feature color, as a 0xRRGGBB integer. alphaAttr : optional, feature properties table attribute which stores the feature alpha (transparency), as an integer between 0 and 255 . labelAttr : optional, feature properties table attribute which stores the feature label, displayed above the geometry. The objects3d entry contains an optional list of GLTF objects to add to the scene. You can control whether a theme is loaded by default in 2D, 3D or splitscreen 2D/3D view via startupView in the theme item configuration . NOTE : If a theme contains a map3d configuration, a view switcher map button will automatically be displayed. Permissions \u00b6 To restrict 3D tiles configured in tiles3d of a map3d theme configuration, create a 3D Tiles Tileset resource named according to the name of the tiles3d entry and create permissions assigning the desired roles to the resources. Styling 3D tiles \u00b6 The tileset style JSON is a 3D Tiles stylesheet , of which currently the color section is supported, and which may in addition also contain a featureStyles section as follows: { \"color\": { ... }, \"featureStyles\": { \"<object_id>\": { \"label\": \"<label>\", \"labelOffset\": <offset>, \"color\": \"<css RGB(A) color string>\" } } } Where: label is an optional string with which to label the object. labelOffset is an optional number which represents the vertical offset between the object top and the label. Defaults to 80 . color is an optional CSS color string which defines the object color. Note : The color declarations in the featureStyles section override any color resulting from a color expression in the color section. You must ensure that your 3D tiles properties table contains all attributes which are referenced as variables in a color expression! 3D Tile Info Service \u00b6 The qwc-3d-tile-info-service serves two purposes: It provides additional info attributes for 3D Tiles via /objinfo?tileset=<tileset_name>&objectid=<feature_id> . It provides 3D Tiles stylesheets, converted from 2D SLD styles via /tileinfo/stylesheet?tileset=<tileset_name>&stylename=<style_name> . To set up the qwc-3d-tile-info-service , add the following to docker-compose.yml : qwc-3d-tile-info-service: image: docker.io/sourcepole/qwc-3d-tile-info-service:<tag> environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/tileinfo' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qgs-resources:/data:ro and configure the route in the api-gateway/nginx.conf : location /api/v1/tileinfo { proxy_pass http://qwc-3d-tile-info-service:9090; } Then, assuming a buildings 3D Tiles dataset configured as \"tiles3d\":[ { \"name\": \"buildings\", \"url\":\" :/assets/3dtiles/buildings/tileset.json\", \"title\":\"Buildings\", \"idAttr\":\"gml_id\", \"styles\":{\"default\":\"/api/v1/tileinfo/stylesheet?tileset=buildings&stylename=default\"}, \"style\": \"default\" } ] a possible tileinfo configuration in tenantConfig.json may look as follows: { \"name\": \"tileinfo\", \"config\": { \"info_datasets\": { \"buildings\" : { \"dataset\": \"/data/buildings2d.gpkg\", \"layername\": \"buildings2d\", \"idfield\": \"gml_id\", \"type\": \"gpkg\", \"attribute_aliases\": { \"function\": \"Building function\", \"description\": \"Description\" }, \"attribute_blacklist\": [ \"gml_id\" ], \"styles\": { \"default\": { \"filename\": \"/data/buildings.sld\" // or \"query\": \"SELECT styleSLD FROM layer_styles WHERE f_table_name = 'buildings'\" } } } } } } NOTE : The idAttr in the tiles3d entry of the themes configuration specifies the tile feature properties attribute which contains the feature id passed to /objinfo . The idfield in the info_datasets entry of the service configuration specifies the feature id attribute of the buildings2d dataset to use for looking up the feature id passed to /objinfo . Import \u00b6 To import scene objects in formats other than GLTF, a ogcProcessesUrl in config.json needs to point to a BBOX OGC processes server. Generating 3D tiles \u00b6 QWC is specialized on 3D tiles in local coordinate reference systems. The following workflow shows all steps to a import CityGML model in EPSG:25832 into a 3DCity PostgreSQL database and generating 3D tiles with attributes. Create docker network: docker network create citydb-net Set PostgreSQL password: export CITYDB_PASSWORD=\"citydb\" Start PostgreSQL database container: docker run -t -d --rm --name citydb --network=citydb-net \\ -e POSTGRES_USER=citydb -e POSTGRES_DB=citydb -e POSTGRES_PASSWORD=$CITYDB_PASSWORD \\ -e SRID=25832 -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::25832,crs:EPSG::5783\" \\ -p 127.0.0.1:5439:5432 -v $PWD/db:/var/lib/postgresql/data \\ 3dcitydb/3dcitydb-pg:15-3.4-5 Import CityGML file ( ./data/LoD2_Flughafen.gml ) into 3DCityDB: docker run -t --rm --user=$UID --network=citydb-net -v $PWD/data:/data:ro \\ 3dcitydb/citydb-tool:1.0 import citygml LoD2_Flughafen.gml -H citydb -d citydb -u citydb -p $CITYDB_PASSWORD Create a view with a filter on PolyhedralSurface geometries and joined attributes: docker exec -it citydb psql -U citydb -d citydb -c \"CREATE VIEW geometry_data_ext AS SELECT g.*, coalesce(p1.feature_id, g.feature_id) AS parent_feature_id, p2.val_uri AS gml_id, split_part(p3.val_string, '_', 2)::integer AS function, p4.val_string::integer AS roof_type FROM geometry_data g LEFT JOIN property p1 ON (p1.name = 'buildingPart' and p1.val_feature_id = g.feature_id) LEFT JOIN property p2 ON (p2.name = 'externalReference' and p2.feature_id IN (p1.feature_id, g.feature_id)) LEFT JOIN property p3 ON (p3.name = 'function' and p3.feature_id IN (p1.feature_id, g.feature_id)) LEFT JOIN property p4 ON (p4.name = 'roofType' and p4.feature_id = g.feature_id) WHERE ST_GeometryType(geometry) = 'ST_PolyhedralSurface' \" Create a spatial index: docker exec -it citydb psql -U citydb -d citydb -c \"CREATE INDEX ON geometry_data USING gist(st_centroid(st_envelope(geometry)))\" Generate 3D tiles with pg2b3dm: docker run -t --rm --user $(id -u):$(id -g) -v $PWD/dataout:/app/output --network=citydb-net -e PGPASSWORD=$DB_PASSWORD geodan/pg2b3dm:2.20.2 -h citydb -U citydb -d citydb -t geometry_data_ext -c geometry --keep_projection true --attributecolumns feature_id,gml_id,function,roof_type For an overview of 3D tile generation see this talk from FOSS4G Europe 2025 . More tools and information can be found in the Awesome 3D Tiles collection.","title":"3D View"},{"location":"topics/View3D/#3d-view","text":"QWC offers a full 3D view based on THREE.js and Giro3D . It allows displaying 3D objects, mainly served as 3D Tiles, on a terrain provided by a COG (Cloud Optimised GeoTIFF). Layers from the 2D view will be rendered as draped textures on the 3D terrain.","title":"3D View"},{"location":"topics/View3D/#configuring-the-3d-view","text":"To enable the 3D view, you need to configure the plugin in config.json . A typical View3D plugin configuration may look as follows: { \"name\": \"View3D\", \"cfg\": { \"pluginOptions\": { \"Identify3D\": { \"tileInfoServiceUrl\": \"/api/v1/tileinfo/objinfo?tileset={tileset}&objectid={objectid}\" }, \"LayerTree3D\": { \"importedTilesBaseUrl\": \"/assets/\" }, \"TopBar3D\": { \"menuItems\": [ {\"key\": \"ThemeSwitcher\", \"icon\": \"themes\"}, {\"key\": \"LayerTree3D\", \"icon\": \"layers\"}, {\"key\": \"Draw3D\", \"icon\": \"draw\"}, {\"key\": \"Measure3D\", \"icon\": \"measure\"}, {\"key\": \"Compare3D\", \"icon\": \"compare\"}, {\"key\": \"HideObjects3D\", \"icon\": \"eye\"}, {\"key\": \"MapLight3D\", \"icon\": \"light\"}, {\"key\": \"MapExport3D\", \"icon\": \"rasterexport\"}, {\"key\": \"ExportObjects3D\", \"icon\": \"export\"}, {\"key\": \"Share\", \"icon\": \"share\"}, {\"key\": \"Bookmark\", \"icon\": \"bookmark\"}, {\"key\": \"Help\", \"icon\": \"info\"}, {\"key\": \"Settings3D\", \"icon\": \"cog\"}, {\"key\": \"Settings\", \"icon\": \"cog\"} ], \"toolbarItems\": [ {\"key\": \"Measure3D\", \"icon\": \"measure\"} ] } } } } NOTE : The menuItems and toolbarItems can contain both 3D tools as well as generic tools (which are not specifically 2D map tools). If you run the 3D View in split-screen 3D+2D mode, only 3D tools will be displayed in the 3D window toolbar and menu. If you run the 3D View in fullscreen, all configured entries will be displayed. Consult the View3D plugin reference as well as well as the 3D tool plugins reference for additional configuation options. Next, to add a 3D View to a theme, add a map3d configuration to the desired theme item in themesConfig.json : \"map3d\": { \"initialView\": { \"camera\": [x, y, z], \"target\": [x, y, z], \"personHeight\": h }, \"dtm\": {\"url\": \"<url_to_dtm.tif>\", \"crs\": \"<dtm_epsg_code>}, \"basemaps\": [ {\"name\": \"<name_of_background_layer>\", \"visibility\": true, \"overview\": true}, {\"name\": \"<name_of_background_layer>\"}, ... ], \"tiles3d\": [ { \"name\": \"<name>\", \"url\": \"<url_to_tileset.json>\", \"title\": \"<title>\", \"baseColor\": \"<css RGB(A) color string>\", \"idAttr\": \"<tile_feature_attr>\", \"styles\": {\"<styleName>\", \"<url_to_tilesetStyle.json>\", ...}, \"style\": \"<styleName>\", \"colorAttr\": \"<tile_feature_attr>\", \"alphaAttr\": \"<tile_feature_attr>\", \"labelAttr\": \"<tile_feature_attr>\", } ], \"objects3d\": [ { \"name\": \"<name>\", \"url\": \"<url_to_file.gltf>\", \"title\": \"<title>\" } ] } Where: initialView is optional and allows to define the initial view when opening the 3D view. If personHeight is specified and greater than 0, the first-person view is activated. If not specified, the 2D view is synchronized. The dtm URL should point to a cloud optimized GeoTIFF. The background layer names refer to the names of the entries defined in backgroundLayers in the themesConfig.json . Additionally: visibility controls the initially visibile background layer overview: true controls the name of background layer to display in the overview map. If no background layer is marked with overview: true , the currently visibile background layer id dipslayed in the overview map. The tiles3d entry contains an optional list of 3d tiles to add to the scene, with: idAttr : feature properties table attribute which stores the object id, used for styling and passed to tileInfoServiceUrl of the Identify3D plugin. Default: id . styles : optional, available tileset styles. Takes precedente over colorAttr , alphaAttr , labelAttr . style : optional, tileset style enabled by default. baseColor : the fallback color for the tile objects, defaults to white . colorAttr : optional, feature properties table attribute which stores the feature color, as a 0xRRGGBB integer. alphaAttr : optional, feature properties table attribute which stores the feature alpha (transparency), as an integer between 0 and 255 . labelAttr : optional, feature properties table attribute which stores the feature label, displayed above the geometry. The objects3d entry contains an optional list of GLTF objects to add to the scene. You can control whether a theme is loaded by default in 2D, 3D or splitscreen 2D/3D view via startupView in the theme item configuration . NOTE : If a theme contains a map3d configuration, a view switcher map button will automatically be displayed.","title":"Configuring the 3D View"},{"location":"topics/View3D/#permissions","text":"To restrict 3D tiles configured in tiles3d of a map3d theme configuration, create a 3D Tiles Tileset resource named according to the name of the tiles3d entry and create permissions assigning the desired roles to the resources.","title":"Permissions "},{"location":"topics/View3D/#styling-3d-tiles","text":"The tileset style JSON is a 3D Tiles stylesheet , of which currently the color section is supported, and which may in addition also contain a featureStyles section as follows: { \"color\": { ... }, \"featureStyles\": { \"<object_id>\": { \"label\": \"<label>\", \"labelOffset\": <offset>, \"color\": \"<css RGB(A) color string>\" } } } Where: label is an optional string with which to label the object. labelOffset is an optional number which represents the vertical offset between the object top and the label. Defaults to 80 . color is an optional CSS color string which defines the object color. Note : The color declarations in the featureStyles section override any color resulting from a color expression in the color section. You must ensure that your 3D tiles properties table contains all attributes which are referenced as variables in a color expression!","title":"Styling 3D tiles"},{"location":"topics/View3D/#3d-tile-info-service","text":"The qwc-3d-tile-info-service serves two purposes: It provides additional info attributes for 3D Tiles via /objinfo?tileset=<tileset_name>&objectid=<feature_id> . It provides 3D Tiles stylesheets, converted from 2D SLD styles via /tileinfo/stylesheet?tileset=<tileset_name>&stylename=<style_name> . To set up the qwc-3d-tile-info-service , add the following to docker-compose.yml : qwc-3d-tile-info-service: image: docker.io/sourcepole/qwc-3d-tile-info-service:<tag> environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/tileinfo' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qgs-resources:/data:ro and configure the route in the api-gateway/nginx.conf : location /api/v1/tileinfo { proxy_pass http://qwc-3d-tile-info-service:9090; } Then, assuming a buildings 3D Tiles dataset configured as \"tiles3d\":[ { \"name\": \"buildings\", \"url\":\" :/assets/3dtiles/buildings/tileset.json\", \"title\":\"Buildings\", \"idAttr\":\"gml_id\", \"styles\":{\"default\":\"/api/v1/tileinfo/stylesheet?tileset=buildings&stylename=default\"}, \"style\": \"default\" } ] a possible tileinfo configuration in tenantConfig.json may look as follows: { \"name\": \"tileinfo\", \"config\": { \"info_datasets\": { \"buildings\" : { \"dataset\": \"/data/buildings2d.gpkg\", \"layername\": \"buildings2d\", \"idfield\": \"gml_id\", \"type\": \"gpkg\", \"attribute_aliases\": { \"function\": \"Building function\", \"description\": \"Description\" }, \"attribute_blacklist\": [ \"gml_id\" ], \"styles\": { \"default\": { \"filename\": \"/data/buildings.sld\" // or \"query\": \"SELECT styleSLD FROM layer_styles WHERE f_table_name = 'buildings'\" } } } } } } NOTE : The idAttr in the tiles3d entry of the themes configuration specifies the tile feature properties attribute which contains the feature id passed to /objinfo . The idfield in the info_datasets entry of the service configuration specifies the feature id attribute of the buildings2d dataset to use for looking up the feature id passed to /objinfo .","title":"3D Tile Info Service"},{"location":"topics/View3D/#import","text":"To import scene objects in formats other than GLTF, a ogcProcessesUrl in config.json needs to point to a BBOX OGC processes server.","title":"Import"},{"location":"topics/View3D/#generating-3d-tiles","text":"QWC is specialized on 3D tiles in local coordinate reference systems. The following workflow shows all steps to a import CityGML model in EPSG:25832 into a 3DCity PostgreSQL database and generating 3D tiles with attributes. Create docker network: docker network create citydb-net Set PostgreSQL password: export CITYDB_PASSWORD=\"citydb\" Start PostgreSQL database container: docker run -t -d --rm --name citydb --network=citydb-net \\ -e POSTGRES_USER=citydb -e POSTGRES_DB=citydb -e POSTGRES_PASSWORD=$CITYDB_PASSWORD \\ -e SRID=25832 -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::25832,crs:EPSG::5783\" \\ -p 127.0.0.1:5439:5432 -v $PWD/db:/var/lib/postgresql/data \\ 3dcitydb/3dcitydb-pg:15-3.4-5 Import CityGML file ( ./data/LoD2_Flughafen.gml ) into 3DCityDB: docker run -t --rm --user=$UID --network=citydb-net -v $PWD/data:/data:ro \\ 3dcitydb/citydb-tool:1.0 import citygml LoD2_Flughafen.gml -H citydb -d citydb -u citydb -p $CITYDB_PASSWORD Create a view with a filter on PolyhedralSurface geometries and joined attributes: docker exec -it citydb psql -U citydb -d citydb -c \"CREATE VIEW geometry_data_ext AS SELECT g.*, coalesce(p1.feature_id, g.feature_id) AS parent_feature_id, p2.val_uri AS gml_id, split_part(p3.val_string, '_', 2)::integer AS function, p4.val_string::integer AS roof_type FROM geometry_data g LEFT JOIN property p1 ON (p1.name = 'buildingPart' and p1.val_feature_id = g.feature_id) LEFT JOIN property p2 ON (p2.name = 'externalReference' and p2.feature_id IN (p1.feature_id, g.feature_id)) LEFT JOIN property p3 ON (p3.name = 'function' and p3.feature_id IN (p1.feature_id, g.feature_id)) LEFT JOIN property p4 ON (p4.name = 'roofType' and p4.feature_id = g.feature_id) WHERE ST_GeometryType(geometry) = 'ST_PolyhedralSurface' \" Create a spatial index: docker exec -it citydb psql -U citydb -d citydb -c \"CREATE INDEX ON geometry_data USING gist(st_centroid(st_envelope(geometry)))\" Generate 3D tiles with pg2b3dm: docker run -t --rm --user $(id -u):$(id -g) -v $PWD/dataout:/app/output --network=citydb-net -e PGPASSWORD=$DB_PASSWORD geodan/pg2b3dm:2.20.2 -h citydb -U citydb -d citydb -t geometry_data_ext -c geometry --keep_projection true --attributecolumns feature_id,gml_id,function,roof_type For an overview of 3D tile generation see this talk from FOSS4G Europe 2025 . More tools and information can be found in the Awesome 3D Tiles collection.","title":"Generating 3D tiles"}]}